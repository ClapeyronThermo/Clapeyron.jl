name: CI
on:
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
      - 'examples/**'
  push:
    paths-ignore:
      - 'docs/**'
      - 'examples/**'
# needed to allow julia-actions/cache to delete old caches that it has created
permissions:
  actions: write
  contents: read
concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: always.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, 'Clapeyron skip ci')"
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        version:
          - 'lts'
          - '1'
          - 'nightly'
        os:
          - ubuntu-latest
          - windows-latest
        arch:
          - x64
        include:
          - os: macOS-latest
            arch: aarch64
            version : 'lts'
          - os: macOS-latest
            arch: aarch64
            version : '1'
          - os: macOS-latest
            arch: aarch64
            version: 'nightly'
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@latest
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: julia-actions/cache@v2
      - uses: julia-actions/julia-buildpkg@latest      
      #- name: "Install Dependencies and Run Tests"
      #  run: |
      #    import Pkg
      #    Pkg.Registry.update()
      #    # Install packages present in subdirectories
      #    Pkg.instantiate()
      #    Pkg.test(; coverage="user", julia_args = ["--optimize=2"])
      #  shell: julia --color=yes --optimize=2 --code-coverage=user --depwarn=yes --project=. {0}
      - uses: julia-actions/julia-runtest@latest
      #  with:
      #    test_args: 'optimize=1'
      - uses: julia-actions/julia-processcoverage@v1
        if: matrix.version == '1' && matrix.os == 'ubuntu-latest'
      - uses: codecov/codecov-action@v4
        if: matrix.version == '1' && matrix.os == 'ubuntu-latest'
        with:
          file: lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
