var documenterSearchIndex = {"docs":
[{"location":"theory/background/#Models","page":"Background","title":"Models","text":"","category":"section"},{"location":"theory/background/","page":"Background","title":"Background","text":"Here, we give a high-level description of equations of state and the models provided by OpenSAFT.","category":"page"},{"location":"theory/background/#Equations-of-state","page":"Background","title":"Equations of state","text":"","category":"section"},{"location":"theory/background/","page":"Background","title":"Background","text":"Equations of state provide a functional form to obtain a thermodynamic property, F, at given conditions boldsymbolOmega:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"F = f(boldsymbolOmegaboldsymbolXi)","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"where f is the equation of state. There are many ways one can develop an equation of state, however, the most commonly used approach is through what is known as the canonical ensemble. More information on this can be found in Statistical Mechanics textbooks. This typically results in equations that determine the Helmholtz free energy, A, at a given temperature, T, system volume, V and system composition, mathbfN. It is also typical for an equation of state to require parameters, boldsymbolXi, to model certain species. What these parameters are depend on the equation of state.","category":"page"},{"location":"theory/background/#Ideal-model","page":"Background","title":"Ideal model","text":"","category":"section"},{"location":"theory/background/","page":"Background","title":"Background","text":"One equation of state that most engineers and scientists should be very familiar with is the ideal gas equation, commonly expressed as:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"pV = Nk_mathrmBT","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"where p is the pressure, N is the total number of particles and k_mathrmB is the Boltzmann constant. It is possible to derive this equation by assuming that species can be modelled as infinitesimally  small particles. This is surprisingly appropriate for a variety of species in the gas phase at high temperature and low pressure.","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"However, if we wish to determine other thermodynamic properties, we would need to integrate the above equation with respect to volume to determine the Helmholtz free energy:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"A_mathrmideal =- int pmathrmdV =- Nk_mathrmBTlnV+c(TmathbfN)","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"We can see that, in just using the original equation, we've lost a temperature and composition dependence in the Helmholtz free energy. If we follow the derivation from statistical or quantum mechanics, we can obtain the following equation (we denote this as the Monomer model in OpenSAFT):","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"fracA_mathrmidealNk_mathrmBT = left(sum_ix_iln(rho_iLambda_i^3)right)-1","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"where x_i, rho_i, and Lambda_i are the molar composition, number density and thermal de Broglie wavelength of species i, respectively. For the purposes of vapour-liquid equilibrium and most thermodynamic properties, this ideal model is sufficient (one can even ignore Lambda_i in the case of the former; we use this as the default Basic model). In addition, some would argue that this is the only ideal model as it only considers the translational motion of infinitesimally small particles.","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"However, polyatomic species typically have vibrational and rotational modes of motion as well which are typically included as part of the ideal term. These can also be derived from statistical mechanics giving:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"fracA_mathrmidealNk_mathrmBT=sum_ix_ibigglnleft(rho_iLambda_i^3right)-fracN_mathrmroti2 ln fracTtheta_mathrmroti+sum^N_mathrmvibi_mathrmvg_imathrmvleftfractheta_mathrmvibimathrmv2T+lnleft(1-exp-(theta_mathrmvibimathrmvT)right)right-1bigg","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"where N_mathrmroti, theta_mathrmroti and N_mathrmvibi are the number of rotations, vibrations and rotational temperature of a species i, respectively. g_imathrmv and theta_mathrmvibimathrmv are the degeneracy and vibrational temperature of a vibrational mode mathrmv on species i, respectively. The Walker model provides the necessary parameters to use such an equation. However, the more-commonly used approach is through the use of ideal isobaric heat-capacity, C_pi^0, correlations, such as the Reid, Wilhoit and Aly and Lee models. With the ideal isobaric heat-capacity, it is possible to determine the ideal Helmholtz free energy using the following equation:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"fracA_mathrmidealNk_mathrmBT = sum_i=1^N_mathrmComponent x_ileftlnfracrho_irho_0     + frac1Nk_mathrmBT int_T_0^T C_pi^0 dT + fracH_0iNk_mathrmBT- frac1Nk_Bint_T_0^T fracC_pi^0T dT -lnfracTT_0-fracS_0iNk_mathrmB - 1right","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"Note that the reference states, rho_0, H_0i and S_0i, can typically be neglected as these will not impact or contribute to most thermodynamic properties of interest.","category":"page"},{"location":"theory/background/#Cubic-models","page":"Background","title":"Cubic models","text":"","category":"section"},{"location":"theory/background/","page":"Background","title":"Background","text":"Some of the more-popular equations of state have been the engineering cubic equations. The first of these is the van der Waals (vdW) equation of state, written as:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"p = fracNk_mathrmBTV-Nb-fracN^2aV^2","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"where a and b are the model parameters which can be related to the critical temperature and pressure of a species. Although this equation was originally empirical, it is possible to derive this equation from statistical thermodynamics where b corresponds to the excluded volume of a single species and a quantifies the magnitude of attraction between species. As a result, the first term typically accounts for the repulsive interactions between species and the second accounts for attractive interactions. Although its simple functional form makes calculations quite straight-forward, this model is inadequate for modelling the liquid phase and vapour-liquid equilibrium properties. ","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"As result, wanting to keep with the van der Waals equation's simple form, a few engineering cubic equations have been developed. The first noteworthy one of these is the Redlich-Kwong (RK) equation:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"p = fracNk_mathrmBTV-Nb-fracN^2asqrtTV(V+Nb)","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"There is no physical justification for the change in the second term, however, it was found to give improved modelling of the liquid phase. This equation was subsequently improved upon by Soave, resulting in the SRK equation of state:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"p = fracNk_mathrmBTV-Nb-fracN^2alpha(Tomega)V(V+Nb)","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"The alpha function requires an additional parameter, the acentricity factor, which is effectively a measure of the location of the saturation pressure when TT_c=07. The idea behind this is, if you can capture both the critical point and another point along the vapour curve, you will improve the accuracy of your equation of state. This is indeed what happened. Further improvements were also made by Peng and Robinson who introduced their own equation of state (PR):","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"p = fracNk_mathrmBTV-Nb-fracN^2alpha(Tomega)V^2+2NbV+b^2N^2","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"Both the SRK and PR equations of state are comparable in performance, although the latter generally models liquid densities to a greater degree of accuracy. However, when it comes to modelling complex species such as chains or associating species, both models tend to perform badly. We do note that, within OpenSAFT,  the cubic plus association (CPA) equation of state has been labelled as a cubic equation; whilst this is the case, we will describe it in greater detail when discussing the SAFT-type models as it main improvement over other cubics is borrowed from the SAFT theory.","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"Something that may be apparent in all these equations is the fact that these are all functions that give a pressure and, thus, must be integrated to obtain the Helmholtz free energy. Like the ideal gas equation, there will be missing temperature and compositional dependences which need to be included.","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"One may also wonder how to model mixtures using such equations; this can be achieved using mixing rules. Although there are many variants, one of the more-popular ones is the van der Waals one-fluid mixing rules which treats the mixture as having the same parameters bara and barb which can be determined from:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"bara=sum_isum_jx_ix_ja_ij","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"barb=sum_isum_jx_ix_jb_ij","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"More-complicated mixing rules do exist (such as the Wong-Sandler mixing rule) which will be made available in OpenSAFT. When i=j, a and b are just the normal van der Waals parameters for the pure. However, when ineq j, these parameter characterise the unlike interactions between i and j. We typically need to use combining rules (not to be confused with mixing rules) to determine the unlike parameters. Examples of these include:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"b_ij=fracb_i+b_j2","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"a_ij = (1-k_ij)sqrta_ia_j","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"where k_ij can be set to 0 but, using either more-advanced combining rules or regression to experimental data, can be tuned to improve the effectiveness of the combining rule. Further details on this will be given for the SAFT models.","category":"page"},{"location":"theory/background/#SAFT-models","page":"Background","title":"SAFT models","text":"","category":"section"},{"location":"theory/background/","page":"Background","title":"Background","text":"In comparison to the cubic equations of state, equations based on the Statistical Associating Fluid Theory (SAFT) take a more-theoretical approach. As mentioned earlier, the van der Waals equation can be derived from statistical mechanics where the resultant Helmholtz free energy is given by:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"fracANk_mathrmBT = fracA_mathrmidealNk_mathrmBT+fracA_mathrmHSNk_mathrmBT+fracA_mathrm1(Nk_mathrmBT)^2","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"where the ideal and hard-sphere (HS) terms combine to give the repulsive term whilst the A_1 term results in the attractive term. We can see that, in the van der Waals equation, species are effectively modelled as hard-spheres with dispersive interactions (we sometimes can these London dispersion interactions). The last two terms can be merged into what is referred to as the monomer or segment term. Whilst this is a step up from the ideal term, most species can't be modelled effectively as single spheres and, in cases like water, experiences interactions more complex that simple dispersion (dipoles and hydrogen bonding). ","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"Using Wertheim's TPT1 theory of association, it is possible to model species as chains which can interact through both dispersive and associative interactions. The latter is described as interactions through associations sites on the segments which are strong and highly directional (like hydrogen bonding and dipole interactions). This results in the addition of two extra contributions to the Helmholtz free energy (note that the HS and dispersive terms have been merged into a monomer term):","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"fracANk_mathrmBT = fracA_mathrmidealNk_mathrmBT+fracA_mathrmmonoNk_mathrmBT+fracA_mathrmchainNk_mathrmBT+fracA_mathrmassocNk_mathrmBT","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"The chain term accounts for the formation of chains of spherical segments and is generally expressed as:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"fracA_mathrmchainNk_mathrmBT=-sum_ix_i(m_i-1)lng_ii(d_ii)","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"where g_ij(r_ij) is the pair-distribution function (i.e. the likelihood of a segment of species i being present at a distance r from another segment of species j) . Many SAFT equations differ in how to express this pair-distribution function. We note here the introduction of the Barker-Henderson hard-sphere diameter, d which is given by:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"d = int_0^sigma (1-exp-betaphi(r))dr","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"where phi(r) is our effective pair potential and beta=1(k_mathrmBT). This effectively gives a temperature dependence to the size of our segment and accounts for our segment becoming softer as temperature rises.","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"The association term accounts for the highly-directional associative interactions. For most SAFT equations of state, it is expressed as:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"fracA_mathrmassocNk_mathrmBT=sum_ix_ileft(sum_aleft(lnX_ia-fracX_ia2right)+fracM_i2right)","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"where X_ia is the fraction of association sites a on species i not bonded to another and M_i is the number of association sites on species i.  X_ia can be solved for using the following system of equations:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"X_ia = (1+rhosum_jx_jsum_bX_jbDelta_ijab)^-1","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"An important aspect of the association term is that the above equation results in a system of equations that typically needs to be solved iteratively; this greatly increases the computational cost of the SAFT equations. Delta_ijab is the association strength between site a on species i with site b on species j; this is also an aspect where SAFT equations usually differ but can all be written generally as:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"Delta_ijab = F_ijabK_ijabI_ijab","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"Where F_ijab is Mayer's function given by:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"F = exp-betaepsilon^mathrmassoc-1","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"where epsilon^mathrmassoc is the potential depth of the association interaction. K and I differ between equations but, generally, these represent the length scale of the interaction and the likelihood that the sites are correctly orientated such that they overlap, respectively.","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"Surprisingly, the monomer term is one of the aspects that most distinguishes the different SAFT equations where no two variants use the same equation. However, in general, the monomer term is composed of more than one term:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"fracA_mathrmmonoNk_mathrmBT=fracA_mathrmHSNk_mathrmBT+fracA_mathrm1(Nk_mathrmBT)^2+fracA_mathrm2(Nk_mathrmBT)^3+fracA_mathrm3(Nk_mathrmBT)^4+","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"This is known as a Barker-Henderson perturbative expansion; the N^mathrmth order terms account for interactions between N segments. Most SAFT equations truncate this sum at just the second order term. These terms generally account for the dispersive interactions between segments.","category":"page"},{"location":"theory/background/#Parameters","page":"Background","title":"Parameters","text":"","category":"section"},{"location":"theory/background/","page":"Background","title":"Background","text":"Although different SAFT equations use different parameters, most share a common set. These include the parameters that characterise the dispersive interactions (which are usually modelled as pair potentials): the potential depth epsilon and the segment size sigma. We point out here that this potential (and its parameters) is not a bare pair potential which only accounts for the interactions of two species; it is an effective pair potential which accounts for the effects of other species being around the interacting pair, in some cases quantum effects and, if associative interactions are not modelled separately, account for non-dispersive interactions.","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"As species can now be modelled as chains of segments, the number of segments, m, also becomes a parameter. One thing to point out about this parameter is it need not be an integer (despite what its name suggest); non-integer values of m can usually be interpreted as segments merging within the chain. ","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"Only required for associating species, SAFT equations usually require a parameter for the potential well depth of the association, epsilon^mathrmassoc and a parameter characterising the length-scale of the interaction (either a bonding volume, kappa^mathrmassoc or length, r_c^mathrmassoc). In the case of the dispersive and associative interaction parameters, there will also be the equivalent parameters characterising unlike interactions between species in a mixture (which can also be obtained from combining rules).","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"Unfortunately, due to the complex function form of SAFT equations, it is impossible to directly relate these parameters to critical properties like in the engineering cubics. These parameters are typically obtained by regression using experimental data (typical pure-component saturation pressure and saturated liquid density data).","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"We will next go through each of the variants of the SAFT equation available in OpenSAFT and what makes these unique.","category":"page"},{"location":"theory/background/#Original-SAFT","page":"Background","title":"Original SAFT","text":"","category":"section"},{"location":"theory/background/","page":"Background","title":"Background","text":"Derived by Chapman et al. (1990), this is the first variant of the SAFT equation of state. This equation can be seen as a `proof of concept' as not many parameters are available (none for mixtures). Nevertheless, some noteworthy features of this equation is its use of a semi-empirical equation to obtain the hard-sphere diameter that depends on the number of segments of a species (no other SAFT variant does this). The chain term uses the hard-sphere pair-distribution function, which has a much-simpler analytical form than what some other SAFT equations choose to use. The association strength, Delta is evaluated in a unique way as well:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"Delta_ijab=d_ij^3g_ij^mathrmHSF_ijabkappa_ijab","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"where kappa_ijab is dimensionless. Unfortunately, the implementation of ogSAFT in OpenSAFT cannot yet replicate the figures from the original paper. The reason for this is that the monomer / segment term presented in the paper is not the one used to generate the results. The actual term used is developed by Twu et al. (1980) and we are currently attempting to implement this within OpenSAFT but it is not clear, as of yet, how it was implemented within the original equation.","category":"page"},{"location":"theory/background/#CK-SAFT","page":"Background","title":"CK-SAFT","text":"","category":"section"},{"location":"theory/background/","page":"Background","title":"Background","text":"If the SAFT equation derived by Chapman et al. was the prototype, the variant developed by Huang and Radosz (1990) was the first usable SAFT equation, with over a 100 pure-component parameters and many unlike parameters available. CKSAFT effectively simplifies many of the computationally-intensive parts of ogSAFT, using a simpler equation to obtain the hard-sphere diameter and actually providing the correct monomer term within the paper. The chain term between the two equations is identical. Similarly, the association strength only has a minor change:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"Delta_ijab=sigma_ij^3g_ij^mathrmHSF_ijabkappa_ijab","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"which slightly reduces the computational cost. However, the most-noteworthy simplification came with the association term. As mentioned earlier, the association fraction needs to be solved for iteratively. However, Huang and Radosz proposed approximations of the association fraction that could be used to solve for the association term explicitly, greatly reducing the computational intensity of these calculations. These approximations have not been implemented within OpenSAFT as of yet, but these only impact calculations for species other than alcohols and carboxylic acids. We also point out that Huang and Radosz introduced the concept of association schemes which helps classify species based on how they interaction through association.","category":"page"},{"location":"theory/background/#SAFT-VR-SW","page":"Background","title":"SAFT-VR SW","text":"","category":"section"},{"location":"theory/background/","page":"Background","title":"Background","text":"Gil-Villegas et al. (1997) developed a new class of SAFT equations known as SAFT variable range. Here, more emphasis was placed on the potentials used to characterise dispersion interactions where a new parameter was introduced through the potential shape. Whilst many versions of SAFT-VR are proposed, each using different underlying potentials, the one that was chosen as the default was SAFT-VR square-well (SW) with the potential shape parameter lambda (characterising the width of the potential well). Within this framework, novel expressions for the monomer and chain terms were proposed, both being based on the SW potential. The association term remained largely unchanged, with the association strength having the most-noteworthy modification:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"Delta_ijab=g_ij^mathrmSWF_ijabkappa_ijab","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"Here, kappa_ijab now carries units of volume. Not many parameters are available for this equation of state, primarily being use to model alkanes and perfluoro-alkanes. However, compared to most other SAFT variants, SAFT-VR SW has possibly seen the most extensions, having a group-contribution alternative (SAFT-gamma SW), electrolyte (SAFT-VRE SW) and cross-over theory (SAFT-VRX SW). ","category":"page"},{"location":"theory/background/#soft-SAFT","page":"Background","title":"soft-SAFT","text":"","category":"section"},{"location":"theory/background/","page":"Background","title":"Background","text":"Developed by Blas and Vega (2001), whereas SAFT equations up until now have used a hard-sphere reference from which to build the equation of state, soft-SAFT chooses to use a Lennard-Jones reference instead. Because of this, compared to all other SAFT equations, soft-SAFT relies heavily on correlations obtained from molecular-dynamic simulations to obtain the monomer term, pair-distribution function and association strength. Like SAFT-VR SW, soft-SAFT does not have an extensive database of parameters, but has been extended multiple times (cross over theory being the more-noteworthy extension).","category":"page"},{"location":"theory/background/#PC-SAFT","page":"Background","title":"PC-SAFT","text":"","category":"section"},{"location":"theory/background/","page":"Background","title":"Background","text":"Possibly the most-popular variant of the SAFT equation, Perturbed-Chain (not polymer-chain) SAFT was developed by Gross and Sadowski (2001) and, like soft-SAFT, chooses a different reference state than previous SAFT equations. This time, we start from the hard-chain (HC), not hard-sphere, expressing the SAFT equation as:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"fracANk_mathrmBT = fracA_mathrmidealNk_mathrmBT+fracA_mathrmHCNk_mathrmBT+fracA_mathrmdispNk_mathrmBT+fracA_mathrmassocNk_mathrmBT","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"This isn't as significant a change as one might initially think as, effectively, the hard-sphere and chain terms (which uses a hard-sphere pair distribution function like CK-SAFT) are combined into the hard chain term. The dispersion term is then simply another correlation, only this time depends on the number of segments as well. It carries many similarities with CK-SAFT, using the same expression for the hard-sphere diameter, pair-distribution function and association term.","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"The primary reason behind PC-SAFT's popularity is three-fold. For one, the code for PC-SAFT is available open-source. Secondly, there is an abundance of parameters available (over 250), including unlike parameters. Finally, many variants of the PC-SAFT equation have been developed. These include:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"Polar PC-SAFT (PPC-SAFT)\nPC-Polar SAFT (PCP-SAFT); yes, these are distinct equations\nElectrolyte PC-SAFT (ePC-SAFT)\nElectrolyte PPC-SAFT (ePPC-SAFT)\nPolyelectrolyte ePC-SAFT (epPC-SAFT)\nCritical-point based PC-SAFT (CP-PC-SAFT)\nCritical-point based PPC-SAFT (CP-PPC-SAFT)\nGroup-contribution PC-SAFT (GC-PC-SAFT)\nGroup contribution PPC-SAFT (GC-PPC-SAFT)","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"We will aim to provide some of these variants at a later date.","category":"page"},{"location":"theory/background/#sPC-SAFT","page":"Background","title":"sPC-SAFT","text":"","category":"section"},{"location":"theory/background/","page":"Background","title":"Background","text":"Nevertheless, we do provide one of these variants, being the simplified PC-SAFT equation (developed by Von Solms et al. (2003)). Here, the only modifications are to the hard-chain and association terms where, instead of using the generalised expressions for the hard-sphere term and hard-sphere pair-distribution function, by averaging the hard-sphere diameter (effectively treating mixtures as being made-up of identically-sized segments), the pure-component versions of these properties are used instead. The benefit of this is that pure-component parameters determined for PC-SAFT can still be used here, and only the unlike parameters need to be modified.","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"Similar to PC-SAFT, variants of the sPC-SAFT equation also exist, although no-where near as extensive. Most notably, a significant group-contribution method is available.","category":"page"},{"location":"theory/background/#SAFT-VR-Mie","page":"Background","title":"SAFT-VR Mie","text":"","category":"section"},{"location":"theory/background/","page":"Background","title":"Background","text":"One of the most-novel SAFT equation of state, derived by Lafitte et al. (2013), this equation is effectively an extension of the SAFT-VR framework developed by Gil-Villegas et al. (1997), with further improvements. First of these is extending the Barker-Henderson perturbative expansion to third order instead of second order:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"fracA_mathrmmonoNk_mathrmBT=fracA_mathrmHSNk_mathrmBT+fracA_mathrm1(Nk_mathrmBT)^2+fracA_mathrm2(Nk_mathrmBT)^3+fracA_mathrm3(Nk_mathrmBT)^4","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"We do point out that, whilst the first two terms are developed following the SAFT-VR framework, the third order term is more akin to a correlation regressed using molecular dynamic simulations of Mie fluids. This third order term resulted in significant improvements in the modelling of properties near the critical point (without using cross-over theory). The chain term also received further improvements as a result. This is also the only SAFT equation which evaluates the hard-sphere diameter analytically, although numerical approximations are needed (we note that the original SAFT-VR Mie equation used 10-point Gauss-Legendre quadrature, whilst the newer version uses 5-point Gauss-Laguerre quadrature).","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"However, three different versions of the association strength have been developed:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"Hard-sphere kernel:\nDelta_ijab=sigma_ij^3g_ij^mathrmHSF_ijabK_ijab\nLennard-Jones kernel:\nDelta_ijab=F_ijabK_ijabI_ijab(epsilon_ijsigma_ij)\nMie kernel:\nDelta_ijab=F_ijabK_ijabI_ijab(epsilon_ijsigma_ijlambda_ij)","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"Unfortunately, it seems that there have been inconsistencies between which of these kernels is used in different publications. The current 'default' SAFT-VR Mie equation uses the Lennard-Jones kernel, as such, this is the one used in OpenSAFT. We do intend to provide the option to switch between these kernels.","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"As it uses a Mie potential is characterised by two shape parameters, lambda_mathrma (characterising the attractive part) and lambda_mathrmr (characterising the repulsive part), both of these have become parameters for each species (although lambda_mathrma is usually set to 6). An interesting aesthetic change is with the number of segments where this is now separated into the shape factor, S, and the number of segments v^*. The latter must now be an integer and the former is a direct measure of how 'fused' the segments are. As we have different association terms, we also have different sets of parameters where the only difference is the length-scale. In the Lennard-Jones and Mie kernels, K_ijab is the 'bonding volume', whereas, in the hard-sphere kernel, it is a 'bonding length', r_ijab^c.","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"The SAFT-VR Mie does not have a significantly large repository of parameters (compensated by its group-contribution variant) and has only been extended to electrolytes (SAFT-VRE Mie and eSAFT-VR Mie). ","category":"page"},{"location":"theory/background/#SAFT-VRQ-Mie","page":"Background","title":"SAFT-VRQ Mie","text":"","category":"section"},{"location":"theory/background/","page":"Background","title":"Background","text":"A very recent extension of the SAFT-VR Mie equation is the SAFT-VRQ Mie equation developed by Aasen et al. (2019) which modifies the underlying Mie potential using a Feynman-Hibbs potential, which means that a single species is represented by a sum of three Mie potentials. This method attempts to classically account for quantum effects present in small species such as helium, hydrogen and neon. Unfortunately, this equation is limited to just the monomer term and, even then, it is very computationally intensive. We do note that the current implementation in OpenSAFT can only model pure-component properties, but we will extend this to mixture in future versions.","category":"page"},{"location":"theory/background/#SAFT-\\gamma-Mie","page":"Background","title":"SAFT-gamma Mie","text":"","category":"section"},{"location":"theory/background/","page":"Background","title":"Background","text":"The group-contribution version of SAFT-VR Mie, developed by Papaioannou et al. (2014), the SAFT-gamma Mie equation uses the same general framework as SAFT-VR Mie, although, as it is a group-contribution method, we are able to model heterogenous chains (in previous SAFT equations, all segments in a chain were the same size). The group-contribution methodology is based on that developed by Lymperiadis et al. (2008). 37 groups are currently available for this equation. A noteworthy advantage of using groups is that unlike parameters between groups can be estimated from pure-component data; these can then be readily extended to mixtures without further regression. ","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"This equation has also been extended to electrolytes through SAFT-gammaE Mie.","category":"page"},{"location":"theory/background/#Methods","page":"Background","title":"Methods","text":"","category":"section"},{"location":"theory/background/#The-problem","page":"Background","title":"The problem","text":"","category":"section"},{"location":"theory/background/","page":"Background","title":"Background","text":"This document aims to outline all of the various tools used to obtain the relevant properties from a SAFT-type equation of state. In short, SAFT equations of state provide the Helmholtz free energy of a system at a given composition mathbfz, volume V and temperature T:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"A=A(mathbfzVT)","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"Taking derivatives of this function (within the OpenSAFT module, this is done using automatic differentiation) can give us a wide range of properties which are given in the appendix. However, it is more common that we are interested in the state of a system at certain conditions (mathbfz_0, p_0 , T_0). The answer to this can be determined from the following, deceptively simple, minimisation of the Gibbs free energy:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"min G(mathbfz_0p_0T_0)","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"In the case of SAFT-type equations of state, this can be expressed as:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"min A(mathbfz_0VT_0)+p_0V","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"What isn't obvious in this formulation of the problem is what the variables to be optimised are. Re-expressing this problem in greater detail:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"min sum_i=1^n_mathrmphasephi_i(A(mathbfz_iV_iT_0)+p_0V_i)","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"mathrmst left(sum_i=1^n_mathrmphasesphi_iz_jiright)-z_j0=0quadforall j in 1n_mathrmspecies","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"where the subscript i denotes properties related to a phase i and phi_i is the molar fraction of phase i. One can already see the difficulties behind solving such a problem as we do not often know before-hand how many phases there may be at the conditions (mathbfz_0, p_0 , T_0) and thus, we won't know what variables to optimise for. In addition, we will want the global minimum and, particularly in systems with many components, there may be many local minima which we will need to eliminate.","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"Nevertheless, if we know certain things about the system before-hand, we can reduce the problem to one that is easier to solve.","category":"page"},{"location":"theory/background/#Pressure-solvers","page":"Background","title":"Pressure solvers","text":"","category":"section"},{"location":"theory/background/","page":"Background","title":"Background","text":"Let us make one simplifying assumption: we know that the system exists in a single phase. This greatly simplifies the problem to:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"min_V A(mathbfz_0VT_0)+p_0V","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"Where, as there is no phase split, the only variable we need to optimise is the volume. We can see that this is equivalent to solving for the volume at which the pressure predicted by the equation of state equals p_0:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"min_V A(mathbfz_0VT_0)+p_0Vrightarrowfracpartial partial V(A(mathbfz_0VT_0)+p_0V)=fracpartial Apartial V(mathbfz_0VT_0)+p_0=-p(mathbfz_0VT_0)+p_0=0","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"Effectively, we can re-word this as a root-finding problem. When using the van der Waals or engineering equations of state which are expressed as p(mathbfzVT), it is easier to solve them this way. When there is only one candidate phase, there is no significant advantage between expressing the problem as either an optimisation or root-finding problem.","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"However, there will be a range of pressures below the critical temperature where there will be more than one candidate phase (corresponding to the vapour, liquid and unstable phases). Treating this as a root-finding problem has the added difficulty of there being an additional, unstable solution. Treating this as an optimisation problem means we never need to worry about this unstable phase (it corresponds to a local maxima).","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"Actually determining the values of V that minimise this equation is quite straightforward, although, with a few subtleties. Within OpenSAFT, we have used the local, derivative-based method of moving assymptotes (MMA) algorithm as implemented in NLopt.jl module. The reason for selecting this method is because, as a local derivative-based algorithm, it will be faster than other methods. This algorithm in particular also allows us to add inequality constraints; this is particularly important as there are certain values of V which will are unphysical. These can be identified through the packing fraction:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"eta=fracN_mathrmApi6Vsum_ix_im_id_i^3","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"Without going into significant detail about the SAFT equation itself, a packing fraction greater than or equal to one results in unphysical values. As  a result, we have a lower bound for the volume:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"VgeqfracN_mathrmApi6sum_ix_im_id_i^3","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"One other issue to consider when solving this problem is that, within the liquid phase, the gradients are very large which can be difficult for algorithms to handle (even when providing the exact derivatives through automatic differentiation). There are two solutions to this:","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"Good initial guesses: We can re-express the volume of a system in dimensionless units using a variable commonly used in the SAFT equations of state, the packing fraction:\neta=fracN_mathrmApi6Vmsigma^3\nWhere, for most fluids, we expect the packing fraction to be close to 09 in the liquid phase. Thus, if we know that the system is within the liquid phase, we can use the initial guess:\nV_0 = fracN_mathrmApi msigma^36times09\nIt should also be mentioned that, if we know that the system is within the vapour phase which typically has a packing fraction of 10^-3, we can use the initial guess of:\nV_0 = fracN_mathrmApi msigma^36times10^-3\nGenerally speaking, if we know which phase our system is in, we can use the initial guesses to find the volumes V that correspond to that phase, if the phase exists at the given conditions.\nSolving for log_10V rather than V, i.e.:\nmin_x A(mathbfz_010^xT_0)+p_010^x\nThis somewhat reduces the magnitude of the gradients in the liquid phase.","category":"page"},{"location":"theory/background/","page":"Background","title":"Background","text":"Using the above tricks, one should be able to obtain the value of V that minimises the Gibbs free energy. The only question to answer now is: if there is more than one local minima, how do we identify the stable phase? In this case, we need to use a global optimisation algorithm. In the case of OpenSAFT, a tunneling algorithm has been implemented although any other such algorithms can be used; the tunneling algorithm was selected as it still relies on gradient-based methods and is generally the recommended algorithm for such problems.","category":"page"},{"location":"to-do_list/#OpenSAFT-to-do-list","page":"To-do list","title":"OpenSAFT to-do list","text":"","category":"section"},{"location":"to-do_list/","page":"To-do list","title":"To-do list","text":"The current plans of OpenSAFT are","category":"page"},{"location":"to-do_list/","page":"To-do list","title":"To-do list","text":"Support more group contribution (GC) models like SAFT-γ SW and GC versions of PC-SAFT and CK-SAFT.\nSupport for more ideal terms (NASA, Wilhoit, etc).\nSupport for flash calculations, first using Ratchford-Rice, and eventually HELD.\nImplement framework for physical units.\nSupport extensions of the SAFT model (e.g. electrolyte methods and dipole terms).\nCode optimisation by introducing more macros, and changing all string keys to more efficient symbols.","category":"page"},{"location":"user_guide/basic_usage/#OpenSAFT-User-Guide","page":"Basic Usage","title":"OpenSAFT User Guide","text":"","category":"section"},{"location":"user_guide/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"Welcome to OpenSAFT!","category":"page"},{"location":"user_guide/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"Once OpenSAFT is installed, it can be loaded using:","category":"page"},{"location":"user_guide/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"using OpenSAFT","category":"page"},{"location":"user_guide/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"We may create a model using the system(components, method; kwargs) function.","category":"page"},{"location":"user_guide/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"model = system([\"methanol\", \"ethanol\"], \"PCSAFT\")","category":"page"},{"location":"user_guide/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"OpenSAFT provides a database for a lot of paramaters that are currently publised in the literature. If you would like to use a custom database, copy the relevant files (in this case, PCSAFT) from the database directory in the package root directory to use as a template, and place it wherever you want, then create the model using","category":"page"},{"location":"user_guide/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"model = system([\"methanol\", \"ethanol\"], \"PCSAFT\";\n    customdatabase_like = \"{PATH}\",\n    customdatabase_unlike = \"{PATH}\",\n    customdatabase_assoc = \"{PATH}\")","category":"page"},{"location":"user_guide/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"You may now find physical properties for this system!","category":"page"},{"location":"user_guide/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"Note that the composition has to be defined using the NamedArray type. We currently have a function called create_z(model, composition) to do this for you, but this will be converted into a macro later.","category":"page"},{"location":"user_guide/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"For example, to find the isobaric heat capacity at equal mole fractions at a pressure of 1 bar and a temperature of 300 K, we just write","category":"page"},{"location":"user_guide/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"Cp = get_isobaric_heat_capacity(model, create_z(model, [0.5, 0.5]), 10e5, 300)","category":"page"},{"location":"user_guide/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"The functions for the physical properties that we currently support are as follows:","category":"page"},{"location":"user_guide/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"get_volume(model, z, p, T)\nget_sat_pure(model, T)\nget_crit_pure(model)\nget_enthalpy_vap(model, T)\nget_pressure(model, z, v, T)\nget_entropy(model, z, p, T)\nget_chemical_potential(model, z, p, T)\nget_internal_energy(model, z, p, T)\nget_enthalpy(model, z, p, T)\nget_Gibbs_free_energy(model, z, p, T)\nget_Helmholtz_free_energy(model, z, p, T)\nget_isochoric_heat_capacity(model, z, p, T)\nget_isobaric_heat_capacity(model, z, p, T)\nget_thermal_compressibility(model, z, p, T)\nget_isentropic_compressibility(model, z, p, T)\nget_speed_of_sound(model, z, p, T)\nget_isobaric_expansitivity(model, z, p, T)\nget_Joule_Thomson_coefficient(model, z, p, T)","category":"page"},{"location":"#OpenSAFT.jl","page":"Home","title":"OpenSAFT.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia package for the modelling of fluids using thermodynamic equations of state. These include the standard cubics (van der Waals, Redlich-Kwong, Peng-Robinson, etc.), SAFT-type equations (PC-SAFT, SAFT-VR Mie, SAFT-gamma Mie, etc.), empirical equations (GERG2008, IAWPS95) and many more.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The documentation is laid out as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Background: Find more information about the origin and differences for each equation of state provided in this package, as well as some of the methods used to obtain the various thermodynamic properties\nUser guide: Find out how to use the equations of state provided in the package, how to use your own parameters, implement your own equation of state or algorithm.\nAPI: Definitions of the various functions present in the package.","category":"page"},{"location":"#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pierre J. Walker, California Institute of Technology\nHon-Wa (Paul) Yew, Petronas\nAndrès Riedemann, University of Concepción","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OpenSAFT.jl is licensed under the MIT license.","category":"page"},{"location":"#Instillation","page":"Home","title":"Instillation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OpenSAFT.jl is not currently a registered package (will be soon!) but can be installed by running:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add git@github.com:ypaul21/OpenSAFT.jl.git ","category":"page"},{"location":"user_guide/definitions/#Developing-OpenSAFT","page":"Definitions","title":"Developing OpenSAFT","text":"","category":"section"},{"location":"user_guide/definitions/","page":"Definitions","title":"Definitions","text":"There are three components to the implementation of an equation of state (EoS):","category":"page"},{"location":"user_guide/definitions/","page":"Definitions","title":"Definitions","text":"importing parameters, and getting them to a form where they can easily be accessed\nwriting the actual EoS, and\ngenerating physical properties out of the EoS.","category":"page"},{"location":"user_guide/definitions/#.-Importing-parameters","page":"Definitions","title":"1. Importing parameters","text":"","category":"section"},{"location":"user_guide/definitions/","page":"Definitions","title":"Definitions","text":"OpenSAFT is designed such that raw data files can systematically extracted so that the developer will be able to focus on writing the EoS. The database extraction is handled by the functions in utils/extractdatabase.jl.  A full documentation of how this is set up will be written in the near future, but the details of the implementation are not necessary for the EoS developer.","category":"page"},{"location":"user_guide/definitions/","page":"Definitions","title":"Definitions","text":"Currently, the raw data files are formatted as CSVs with a semicolon delimiter (techinically DSVs), with the headers on the third row. We currently support three parameter data files for each EoS:","category":"page"},{"location":"user_guide/definitions/","page":"Definitions","title":"Definitions","text":"like parameters, for parameters that involve a single component\nunlike parameters, for parameters that involve two components, and\nassoc parameters, for parameters involved in the association term.","category":"page"},{"location":"user_guide/definitions/","page":"Definitions","title":"Definitions","text":"We may support more data files in the future, such as pure heat capacity polynomial coefficients for a more sophisticated ideal term.","category":"page"},{"location":"user_guide/definitions/","page":"Definitions","title":"Definitions","text":"Column data in the relevant rows are extracted using the function","category":"page"},{"location":"user_guide/definitions/","page":"Definitions","title":"Definitions","text":"retrieve_params(components, selected method;\n    customdatabase_like = \"None\", variant_like = \"None\", redirect_like = \"None\",\n    customdatabase_unlike = \"None\", variant_unlike = \"None\", redirect_unlike = \"None\",\n    customdatabase_assoc = \"None\", variant_assoc = \"None\", redirect_assoc = \"None\")","category":"page"},{"location":"user_guide/definitions/","page":"Definitions","title":"Definitions","text":"By default, it looks for database files for the relevant method in the database directory of the project root directory, but you may choose to redirect the search to a different directory using optional parameters. This function returns an Array of dictionaries, one for each database file.","category":"page"},{"location":"user_guide/definitions/","page":"Definitions","title":"Definitions","text":"Once the column data are extracted, parameter data can be filtered using","category":"page"},{"location":"user_guide/definitions/","page":"Definitions","title":"Definitions","text":"function filterparams(raw_params, like_params;\n    unlike_params = [], assoc_params = [])","category":"page"},{"location":"user_guide/definitions/","page":"Definitions","title":"Definitions","text":"The like_params, unlike_params, and assoc_params is a list of column headers to extract to their individidual dictionaries.","category":"page"},{"location":"user_guide/definitions/","page":"Definitions","title":"Definitions","text":"The keys for the main species are Sets, because they have the property where Set([i,j]) == Set([j,i]), and Set([i,i]) == Set([i]), which is perfect for the representation of symmetric interactions that we observe in thermodynamics, and it simplifies loops in the equations.","category":"page"},{"location":"user_guide/definitions/","page":"Definitions","title":"Definitions","text":"For interaction parameters between species i and j, they are accessed by the key Set([i,j]), while interaction parameters between the same species i are accessed by the key Set([i]).","category":"page"},{"location":"user_guide/definitions/","page":"Definitions","title":"Definitions","text":"For the association parameters, the keys are Set([(i,a),(j,b)]), where i and j are the main species, and a and b are the asociation species on species i and j respectively.","category":"page"},{"location":"user_guide/definitions/#.-Writing-the-EoS","page":"Definitions","title":"2. Writing the EoS","text":"","category":"section"},{"location":"user_guide/definitions/","page":"Definitions","title":"Definitions","text":"OpenSAFT makes use of Julia's multiple dispatch to reduce function duplication for variant SAFT models of the same family. The Structs are defined in models/model_structs.jl, where the hierachy is as follows:","category":"page"},{"location":"user_guide/definitions/","page":"Definitions","title":"Definitions","text":"{SAFT_model} <: {SAFT_family} <: SAFT <: EoS","category":"page"},{"location":"user_guide/definitions/","page":"Definitions","title":"Definitions","text":"In the future, if we ever wish to provide support for non-SAFT EoS (cubics, activity coefficient based, etc), we may add a new abstract type under EoS.","category":"page"},{"location":"user_guide/definitions/","page":"Definitions","title":"Definitions","text":"Parameters that are used by the model are defined in models/param_structs.jl.","category":"page"},{"location":"user_guide/definitions/","page":"Definitions","title":"Definitions","text":"The user will call the system(components, method; kwargs) function in models/system.jl to define their system. This function extracts the raw data using function retrieveparams, and these extracted parameters are interpreted in the function create_{model}Params in the file models/import_params.jl.","category":"page"},{"location":"user_guide/definitions/","page":"Definitions","title":"Definitions","text":"The EoS for SAFT is expressed in terms of the Helmholtz free energy, and this is defined in models/eos/eos.jl. This calls the relevant functions to generate, for example a_ideal and a_res. For SAFT, these functions will reside in the models/eos/SAFT directory.","category":"page"},{"location":"user_guide/definitions/#.-Generating-physical-properties-out-of-the-EoS","page":"Definitions","title":"3. Generating physical properties out of the EoS","text":"","category":"section"},{"location":"user_guide/definitions/","page":"Definitions","title":"Definitions","text":"All methods are stored in the methods directory. Currently, we have support for getting pure properties for SAFT. Additional methods to support mixtures, etc, will be written here. We may make use of Julia's multiple dispatch to create model-specific methods if that is necessary.","category":"page"},{"location":"user_guide/definitions/#Solvers","page":"Definitions","title":"Solvers","text":"","category":"section"},{"location":"user_guide/definitions/","page":"Definitions","title":"Definitions","text":"There may be a few solvers that are typically used in thermodynamics but are not currently readily available in the Julia community, so they will be set up ande put together here in the solvers directory in a module called Solvers.","category":"page"}]
}
