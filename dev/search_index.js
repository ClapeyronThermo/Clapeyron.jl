var documenterSearchIndex = {"docs":
[{"location":"notebook_examples/#Notebook-Examples","page":"Notebook Examples","title":"Notebook Examples","text":"","category":"section"},{"location":"notebook_examples/","page":"Notebook Examples","title":"Notebook Examples","text":"This is a list of currently available example notebooks for Clapeyron.jl:","category":"page"},{"location":"notebook_examples/","page":"Notebook Examples","title":"Notebook Examples","text":"Ideal Equations of State: Examples of how one can use ideal equations of state within Clapeyron.jl, whether it be supplementing a residual equation of state or independently.\nCubic equations of state: Examples of how one can use cubic equations of state, along with customizing those with different α‑functions, Volume translation or mixing rules.\nSAFT equations of state: Examples of how one can use SAFT-type equations.\nActivity models: Examples on how to use activity models, standalone or as a mixing rule in a cubic equation of state.\nUser defined equations of state: Example of how to implement a new equation of state within Clapeyron.jl. In this case will be the SAFT‑VR Mie+AT model developed by Walker et al. which is simply a modification of the regular SAFT‑VR Mie equation of state.\nMiscellaneous pure vapour–liquid equilibrium properties: Examples of pure component vapour–liquid equilibrium properties\nMixing functions: Examples of calculation of mixing and excess properties\nMulti-component equilibrium and critical points: Examples of the various equilibrium and critical properties. Focused on the uncommon, more-complex types of diagrams.\nDifferential Evolution Flash Algorithm in Clapeyron.jl: demonstration of a multi-component flash algorithm for use with Clapeyron.jl, which utilizes the excellent differential evolution black box optimization algorithms in BlackBoxOptim.jl.\nParameter Estimation Framework: demonstration of how the parameter estimation framework works, using BlackBoxOptim.jl as optimizer.","category":"page"},{"location":"tutorials/sle_phase_diagrams/#Solid–fluid-equilibrium","page":"SLE Phase Diagrams","title":"Solid–fluid equilibrium","text":"","category":"section"},{"location":"tutorials/sle_phase_diagrams/#Solubility-of-APIs","page":"SLE Phase Diagrams","title":"Solubility of APIs","text":"","category":"section"},{"location":"tutorials/sle_phase_diagrams/#Eutectic-mixtures","page":"SLE Phase Diagrams","title":"Eutectic mixtures","text":"","category":"section"},{"location":"tutorials/sle_phase_diagrams/#Global-phase-diagrams","page":"SLE Phase Diagrams","title":"Global phase diagrams","text":"","category":"section"},{"location":"tutorials/ternary_phase_diagrams/#Ternary-phase-diagrams","page":"Ternary Phase Diagrams","title":"Ternary phase diagrams","text":"","category":"section"},{"location":"tutorials/ternary_phase_diagrams/","page":"Ternary Phase Diagrams","title":"Ternary Phase Diagrams","text":"The notebook associated with this tutorial can be found here.","category":"page"},{"location":"tutorials/ternary_phase_diagrams/","page":"Ternary Phase Diagrams","title":"Ternary Phase Diagrams","text":"When considering three-component mixtures, it is now even more challenging to visualise large sections of the phase space on a 2D axis. Typically, ternary phase diagrams are visualised on a ternary plot, where the three axes correspond to the concentrations of the three components in equilibrium phases, at fixed temperature and pressure.","category":"page"},{"location":"tutorials/ternary_phase_diagrams/","page":"Ternary Phase Diagrams","title":"Ternary Phase Diagrams","text":"In order to actually plot these diagrams in Julia, one needs to install the ternary python package and call it from Julia:","category":"page"},{"location":"tutorials/ternary_phase_diagrams/","page":"Ternary Phase Diagrams","title":"Ternary Phase Diagrams","text":"julia> using PyCall\n\njulia> ternary = pyimport(\"ternary\")","category":"page"},{"location":"tutorials/ternary_phase_diagrams/#Liquid–Liquid-Equilibrium","page":"Ternary Phase Diagrams","title":"Liquid–Liquid Equilibrium","text":"","category":"section"},{"location":"tutorials/ternary_phase_diagrams/","page":"Ternary Phase Diagrams","title":"Ternary Phase Diagrams","text":"Ternary phase diagrams are typically used to visualise liquid–liquid equilibrium between two immiscible fluids and an entrainer. As an example, we'll consider a mixture of water, dichloromethane and acetone using UNIFAC:","category":"page"},{"location":"tutorials/ternary_phase_diagrams/","page":"Ternary Phase Diagrams","title":"Ternary Phase Diagrams","text":"julia> model = UNIFAC([\"water\",(\"dichloromethane\",[\"CH2CL2\"=>1]),(\"acetone\",[\"CH3\"=>1,\"CH3CO\"=>1])])","category":"page"},{"location":"tutorials/ternary_phase_diagrams/","page":"Ternary Phase Diagrams","title":"Ternary Phase Diagrams","text":"As we know water and dichloromethane will phase split, we can start our trace of the phase boundary on that side. To obtain the composition of the two phases, we need to use the tp_flash(model, p, T, z) method:","category":"page"},{"location":"tutorials/ternary_phase_diagrams/","page":"Ternary Phase Diagrams","title":"Ternary Phase Diagrams","text":"julia> p, T = 1e5, 298.15;\n\njulia> z0 = [0.5,0.5,1e-10];\n\njulia> (x,n,G) = tp_flash(model,p,T,z0,MichelsenTPFlash(equilibrium=:lle))\n([0.9941813349915325 0.005818664997300019 1.1167552809179326e-11; 0.009492840315784318 0.9905071594960436 1.8817198921812175e-10], [0.49523586949546133 0.0028984768852708584 5.5629416193349775e-12; 0.004764130510680909 0.49710152310858685 9.443705837956089e-11], -6.933551486428005)","category":"page"},{"location":"tutorials/ternary_phase_diagrams/","page":"Ternary Phase Diagrams","title":"Ternary Phase Diagrams","text":"The difficulty with tracing the LLE region here is that we would ideally like to follow the Plait","category":"page"},{"location":"tutorials/ternary_phase_diagrams/#Vapour–Liquid–Liquid-Equilibrium","page":"Ternary Phase Diagrams","title":"Vapour–Liquid–Liquid Equilibrium","text":"","category":"section"},{"location":"api/estimation/#Contents","page":"Parameter Estimation","title":"Contents","text":"","category":"section"},{"location":"api/estimation/","page":"Parameter Estimation","title":"Parameter Estimation","text":"Pages = [\"estimation.md\"]","category":"page"},{"location":"api/estimation/#Index","page":"Parameter Estimation","title":"Index","text":"","category":"section"},{"location":"api/estimation/","page":"Parameter Estimation","title":"Parameter Estimation","text":"Pages = [\"estimation.md\"]","category":"page"},{"location":"api/estimation/#Estimation-Tools","page":"Parameter Estimation","title":"Estimation Tools","text":"","category":"section"},{"location":"api/estimation/#Clapeyron.ToEstimate","page":"Parameter Estimation","title":"Clapeyron.ToEstimate","text":"ToEstimate\nToEstimate(params_dict)\n\nInput parameters: A dictionary with the following potential entries\n\nparams: The name of the parameter being fitted (Symbol)\nindices: The index of the parameter being fitted (Integer or Tuple{Integer,Integer})\nfactor: Factor to multiply parameter being fitted to have it in the correct units (Float64)\nsymmetric: For PairParam, if the parameter is symmetric or asymmetric (Bool)\ncross_assoc: For AssocParam, if the parameter is for cross-association (Bool)\nrecombine: For PairParam, if the combining rules must be applied for unlike interactions (Bool)\nlower: Lower bound for the parameter (Float64)\nupper: Upper bound for the parameter (Float64)\nguess: Initial guess for the parameter (Float64)\n\nOutput:\n\nA ToEstimate struct\n\nDescription\n\nTurns the input parameter dictionary into a ToEstimate struct to be used within the parameter estimation.\n\n\n\n\n\n","category":"type"},{"location":"api/estimation/#Clapeyron.Estimation","page":"Parameter Estimation","title":"Clapeyron.Estimation","text":"Estimation\nEstimation(model,toestimate,filepaths,ignorefield,objective_form)\n\nInput parameters:\n\nmodel: The initial model containing the species we wish to parameterise\ntoestimate: The dictionary of parameters being fitted\nfilepaths or filepaths_weights: The location of the data files used to fit. Can also contain the weights of each dataset\nignorefield: Specify which EoSModel fields to ignore in the main model\nobjective_form: Specify the functional form of the objective function in the form objective_form(pred,exp)\n\nOutput:\n\nEstimator object which contains the following:\n\nmodel: The model whose parameters will be varied\ninitial_model: The initial model before parameterisation\ntoestimate: ToEstimate struct which contains all the information on the parameters\ndata: Vector of EstimationData structs where all the information on the data is stored\nignorefield: Vector of fields to ignore in the parameter estimation\nobjective_form: Function to evaluate the error measure for the objective function\n\nThe following objects are also output:\n\nobjective: The objective function which is used to fit the parameters\nx0: Initial guesses for the parameters\nupper: Upper bounds for the parameters\nlower: Lower bounds for the parameters\n\nDescription\n\nProduces the estimator and other useful objects used within parameter estimation\n\n\n\n\n\n","category":"type"},{"location":"api/estimation/#Clapeyron.EstimationData","page":"Parameter Estimation","title":"Clapeyron.EstimationData","text":"EstimationData\nEstimationData(filepaths)\n\nInput parameters:\n\nfilepaths or filepaths_weights: The filepath of the data used in parameter estimation. Optionally, a tuple containing the weights of each dataset.\n\nOutput:\n\nAn EstimationData struct with the following fields:\n\nmethod: The property estimation method which is used to obtain predictions for a given input\ninputs_name: The variable names for the inputs\noutputs_name: The variable names for the outputs \ninputs: Vector for each input\noutputs: Vector for each output\nweights: The weight for this particular dataset\n\nDescription\n\nFor a given input data set, produce an EstimationData struct.\n\n\n\n\n\n","category":"type"},{"location":"api/estimation/#Clapeyron.return_model","page":"Parameter Estimation","title":"Clapeyron.return_model","text":"return_model\nreturn_model(estimation,model,params)\n\nInput parameters:\n\nestimation: The estimator object\nmodel: The model whose parameters we are varying\nparams: The new parameters which we want to change\n\nOutput:\n\nmodel: The new model with the updated parameters\n\nDescription\n\nBased on the parameters provided and the estimator, a new model is produced from the input.\n\n\n\n\n\n","category":"function"},{"location":"api/estimation/#Clapeyron.objective_function","page":"Parameter Estimation","title":"Clapeyron.objective_function","text":"objective_function\nobjective_function(estimation,params)\n\nInput parameters:\n\nestimation: The estimator object\nparams: The new parameters which we want to evaluate the objective function for\n\nOutput: The relate root mean square error given the data and parameters provided\n\nDescription\n\nThe objective function used within parameter estimation.\n\n\n\n\n\n","category":"function"},{"location":"tutorials/bulk_properties/#Bulk-Properties","page":"Bulk Properties","title":"Bulk Properties","text":"","category":"section"},{"location":"tutorials/bulk_properties/","page":"Bulk Properties","title":"Bulk Properties","text":"Bulk properties are those properties which refer to a single phase at a given set of conditions (for both pures and mixtures). A more comprehensive list of the bulk properties available in Clapeyron can be found here.","category":"page"},{"location":"tutorials/bulk_properties/","page":"Bulk Properties","title":"Bulk Properties","text":"The notebooks associated with this tutorial can be found here.","category":"page"},{"location":"tutorials/bulk_properties/#Bulk-properties-of-water","page":"Bulk Properties","title":"Bulk properties of water","text":"","category":"section"},{"location":"tutorials/bulk_properties/","page":"Bulk Properties","title":"Bulk Properties","text":"As a simple first step, let us just estimate the volume of water at 298.15 K and 1 bar using PC‑SAFT:","category":"page"},{"location":"tutorials/bulk_properties/","page":"Bulk Properties","title":"Bulk Properties","text":"julia> model = PCSAFT([\"water\"])\nPCSAFT{BasicIdeal, Float64} with 1 component:\n \"water\"\nContains parameters: Mw, segment, sigma, epsilon, epsilon_assoc, bondvol\n\njulia> volume(model,1e5,298.15)\n1.9539250955201878e-5","category":"page"},{"location":"tutorials/bulk_properties/","page":"Bulk Properties","title":"Bulk Properties","text":"And that's it! However, technically, water has two volume roots at these conditions; unless the phase is specified, Clapeyron will pick the phase with the lowest Gibbs free energy. You can force the solvers to pick the vapour root by:","category":"page"},{"location":"tutorials/bulk_properties/","page":"Bulk Properties","title":"Bulk Properties","text":"julia> volume(model,1e5,298.15;phase=:vapour)\n0.022334042473509567","category":"page"},{"location":"tutorials/bulk_properties/","page":"Bulk Properties","title":"Bulk Properties","text":"This may be of use when trying to study metastable regions or, if the users is certain of the phase type, speed up calculations. The results are visualised below. Note that this feature is available for all bulk property methods.","category":"page"},{"location":"tutorials/bulk_properties/","page":"Bulk Properties","title":"Bulk Properties","text":"(Image: water_vol)","category":"page"},{"location":"tutorials/bulk_properties/","page":"Bulk Properties","title":"Bulk Properties","text":"Let us now calculate the isobaric heat capacity of water using the same process:","category":"page"},{"location":"tutorials/bulk_properties/","page":"Bulk Properties","title":"Bulk Properties","text":"julia> isobaric_heat_capacity(model,1e5,298.15)\n42.57610895303115","category":"page"},{"location":"tutorials/bulk_properties/","page":"Bulk Properties","title":"Bulk Properties","text":"Those familiar with water will know that this value is far too small. This is because, when a model is assembled by Clapeyron, it is assumed that all species only experience translational modes of motion. This is not true in polyatomic molecules where these experience rotational and vibrational models. These can be included in the model by specifying a different ideal model:","category":"page"},{"location":"tutorials/bulk_properties/","page":"Bulk Properties","title":"Bulk Properties","text":"julia> model = PCSAFT([\"water\"]; idealmodel=ReidIdeal)\nPCSAFT{ReidIdeal, Float64} with 1 component:\n \"water\"\nContains parameters: Mw, segment, sigma, epsilon, epsilon_assoc, bondvol\n\njulia> isobaric_heat_capacity(model,1e5,298.15)\n55.44925782004192","category":"page"},{"location":"tutorials/bulk_properties/","page":"Bulk Properties","title":"Bulk Properties","text":"This is now a bit closer to the true value. The inclusion of a more accurate ideal model is required when trying to estimate temperature derivative properties (entropy, heat capacities, speed of sound, isentropic compressibility and Joule–Thomson coefficient). This is visualised below: (Image: water_cp)","category":"page"},{"location":"tutorials/bulk_properties/#Bulk-properties-of-water-and-carbon-dioxide","page":"Bulk Properties","title":"Bulk properties of water and carbon dioxide","text":"","category":"section"},{"location":"tutorials/bulk_properties/","page":"Bulk Properties","title":"Bulk Properties","text":"One can obtain bulk properties of mixtures by simply specifying the molar amount of each component. Here, let us consider a mixture of water and carbon dioxide:","category":"page"},{"location":"tutorials/bulk_properties/","page":"Bulk Properties","title":"Bulk Properties","text":"julia> model = PCSAFT([\"water\",\"carbon dioxide\"])\nPCSAFT{BasicIdeal, Float64} with 2 components:\n \"water\"\n \"hexane\"\nContains parameters: Mw, segment, sigma, epsilon, epsilon_assoc, bondvol\n\njulia> volume(model,1e5,298.15,[0.5,0.5])\n0.0240608293527103","category":"page"},{"location":"tutorials/bulk_properties/","page":"Bulk Properties","title":"Bulk Properties","text":"Everything that was true in the case of pure water will also hold here. However, there is one limitation: by default, Clapeyron does not check whether or not the mixture is stable at a given set of conditions. In the case of water and carbon dioxide at these conditions, we would expect a phase split between a vapour and liquid. As such, there technically no single-phase volume at these conditions. To determine the composition of each phase at these conditions, one would need to use a flash algorithm. The difference between these results in shown below: (Image: water_co2_vol)","category":"page"},{"location":"tutorials/pure_saturation_curves/#Pure-Saturation-Properties","page":"Pure Saturation Properties","title":"Pure Saturation Properties","text":"","category":"section"},{"location":"tutorials/pure_saturation_curves/","page":"Pure Saturation Properties","title":"Pure Saturation Properties","text":"Saturation properties are often vital when understanding the global phase behaviour of a pure component. Such properties can be obtained in Clapeyron.jl.","category":"page"},{"location":"tutorials/pure_saturation_curves/","page":"Pure Saturation Properties","title":"Pure Saturation Properties","text":"The notebooks associated with this tutorial can be found here.","category":"page"},{"location":"tutorials/pure_saturation_curves/#Saturation-curve-of-water","page":"Pure Saturation Properties","title":"Saturation curve of water","text":"","category":"section"},{"location":"tutorials/pure_saturation_curves/","page":"Pure Saturation Properties","title":"Pure Saturation Properties","text":"Let us take the case of obtaining the boiling point of water at atmospheric pressure using Peng–Robinson. This can be obtained using the saturation_temperature(model,p) function as shown below:","category":"page"},{"location":"tutorials/pure_saturation_curves/","page":"Pure Saturation Properties","title":"Pure Saturation Properties","text":"julia> model = PR([\"water\"])\nPR{BasicIdeal, PRAlpha, NoTranslation, vdW1fRule} with 1 component:\n \"water\"\nContains parameters: a, b, Tc, Pc, Mw\n\njulia> (Tsat, vl, vv) = saturation_temperature(model, 1e5)\n(374.24014010712983, 2.26976016480195e-5, 0.03084938795573781)","category":"page"},{"location":"tutorials/pure_saturation_curves/","page":"Pure Saturation Properties","title":"Pure Saturation Properties","text":"Note that the outputs of this function are the saturation temperature, saturated liquid volume and saturated vapour volume. The predicted saturation temperature is pretty spot-on for a cubic although the liquid volume is a bit off (see documentation related to model construction to see how cubics can be improved to better model complex systems).","category":"page"},{"location":"tutorials/pure_saturation_curves/","page":"Pure Saturation Properties","title":"Pure Saturation Properties","text":"If we wished to do the reverse operation, obtain the saturation pressure at a given temperature, this can be done using the saturation_pressure(model, T) function:","category":"page"},{"location":"tutorials/pure_saturation_curves/","page":"Pure Saturation Properties","title":"Pure Saturation Properties","text":"julia> (psat, vl, vv) = saturation_pressure(model,298.15)\n(2686.6049469327368, 2.1391026105178707e-5, 0.9223293617932997)","category":"page"},{"location":"tutorials/pure_saturation_curves/","page":"Pure Saturation Properties","title":"Pure Saturation Properties","text":"In fact, if one wishes to trace the full saturation curve of a component, it is recommended to use this function instead. The primary reason for this is because, as one approaches the critical point, our solvers will become more unstable (just the nature of the critical region). As such, to obtain a smooth curve, it is often best to solve for the saturation conditions far from the critical point first, and then slowly approach the critical point, reusing values from lower temperatures as initial guesses for the next step. Consider an example for-loop below:","category":"page"},{"location":"tutorials/pure_saturation_curves/","page":"Pure Saturation Properties","title":"Pure Saturation Properties","text":"N    = 100\n\nT    = LinRange(298.15, Tc, N)\npsat = zeros(N)\nvl   = zeros(N)\nvv   = zeros(N)\n\nfor i in 1:N\n    if i==1\n        sat = saturation_pressure(model, T[i])\n        psat[i] = sat[1]\n        vl[i] = sat[2]\n        vv[i] = sat[3]\n        v0 = [vl[i],vv[i]]\n    else\n        sat = saturation_pressure(model, T[i]; v0=v0)\n        psat[i] = sat[1]\n        vl[i] = sat[2]\n        vv[i] = sat[3]\n        v0 = [vl[i],vv[i]]\n    end\nend","category":"page"},{"location":"tutorials/pure_saturation_curves/","page":"Pure Saturation Properties","title":"Pure Saturation Properties","text":"The resulting pT curve is shown below:","category":"page"},{"location":"tutorials/pure_saturation_curves/","page":"Pure Saturation Properties","title":"Pure Saturation Properties","text":"(Image: pT_water)","category":"page"},{"location":"tutorials/pure_saturation_curves/","page":"Pure Saturation Properties","title":"Pure Saturation Properties","text":"As well as the rho T envelope:","category":"page"},{"location":"tutorials/pure_saturation_curves/","page":"Pure Saturation Properties","title":"Pure Saturation Properties","text":"(Image: rhoT_water)","category":"page"},{"location":"tutorials/pure_saturation_curves/#Using-alternative-methods","page":"Pure Saturation Properties","title":"Using alternative methods","text":"","category":"section"},{"location":"tutorials/pure_saturation_curves/","page":"Pure Saturation Properties","title":"Pure Saturation Properties","text":"The default methods in Clapeyron.jl are generally intended for speed, with sacrifices to robustness. As such there will probably be a few cases where our default methods fail. While this could be remedied by the user providing their own initial guesses, an alternative would be to use a different method. In the case of the saturation solvers, we have a few alternatives listed elsewhere. This switch can be done as follows:","category":"page"},{"location":"tutorials/pure_saturation_curves/","page":"Pure Saturation Properties","title":"Pure Saturation Properties","text":"julia> @time saturation_pressure(model, 298.15)\n  0.000024 seconds (11 allocations: 432 bytes)\n(2686.6049469327368, 2.1391026105178707e-5, 0.9223293617932997)\n\njulia> @time saturation_pressure(model, 298.15, IsoFugacitySaturation())\n  0.000026 seconds (8 allocations: 480 bytes)\n(2686.6049471489205, 2.139102610517806e-5, 0.9223293617190517)\n\njulia> @time saturation_pressure(model, 298.15, SuperAncSaturation())\n  0.000006 seconds (1 allocation: 32 bytes)\n(2686.604947149002, 2.13910261051781e-5, 0.922329361719024)","category":"page"},{"location":"tutorials/pure_saturation_curves/","page":"Pure Saturation Properties","title":"Pure Saturation Properties","text":"The list of available saturation methods are the following:","category":"page"},{"location":"tutorials/pure_saturation_curves/","page":"Pure Saturation Properties","title":"Pure Saturation Properties","text":"ChemPotVSaturation: Default method, solves simultaneously both liquid and vapour volumes as a non linear system of equations. Fastest, but could have some problems too close to the critical point.\nIsoFugacitySaturation: Solves a univariate Root-finding problem with pressure as main variable. For each iteration calculates a liquid and vapour volume, It is more stable in some cases.\nCritExtrapolationSaturation: Returns a critical extrapolation approximation of the saturation conditions. Really accurate for TT_mathrmc  0999. It is used as initial point for the other saturation methods when a critical point is available.\nSuperAncSaturation: The method just evaluates a highly regressed Chebyshev polynomial for pressure and saturation volumes, by far the fastest method, but it's only available for vdW, RK and PR equations of state.","category":"page"},{"location":"tutorials/pure_saturation_curves/","page":"Pure Saturation Properties","title":"Pure Saturation Properties","text":"note: External Packages: EoSSuperancillaries.jl\nBy default, Clapeyron.jl only provides superancillaries for the aforementioned cubics. EoSSuperancillaries.jl provides an additional superancillary for the PCSAFT equation of state (without association). In addition to the PCSAFT superancillary, loading the package switches the initial points for the saturation methods to use the superancillaries themselves, resulting in additional speedups. This behaviour can be switched off by setting Clapeyron.SUPERANC_ENABLED[] = false, after loading EoSSuperancillaries.","category":"page"},{"location":"tutorials/pure_saturation_curves/#Critical-points","page":"Pure Saturation Properties","title":"Critical points","text":"","category":"section"},{"location":"tutorials/pure_saturation_curves/","page":"Pure Saturation Properties","title":"Pure Saturation Properties","text":"Omitted from the example we gave earlier, one can also solve for the critical point of a pure component in Clapeyron.jl directly. This is done simply using the crit_pure(model) function:","category":"page"},{"location":"tutorials/pure_saturation_curves/","page":"Pure Saturation Properties","title":"Pure Saturation Properties","text":"julia> (Tc, pc, vc) = crit_pure(model)\n(647.13, 2.19e7, 7.644674198270991e-5)","category":"page"},{"location":"tutorials/pure_saturation_curves/","page":"Pure Saturation Properties","title":"Pure Saturation Properties","text":"While, in the case of cubics, the critical point is an input, for equations of state such as SAFT, the critical point needs to be determined when trying to trace the saturation region.","category":"page"},{"location":"tutorials/pure_saturation_curves/#Obtaining-properties-along-the-saturation-curve","page":"Pure Saturation Properties","title":"Obtaining properties along the saturation curve","text":"","category":"section"},{"location":"tutorials/pure_saturation_curves/","page":"Pure Saturation Properties","title":"Pure Saturation Properties","text":"Properties such as the enthalpy of vaporisation or saturated heat capacities can be quite important to determine. Ideally, once the saturation pressure and temperature is determined, one should be able to input those values into the bulk property calculators, specifying the respective phases. While this does work generally, this approach begins to fail at conditions approaching the critical point (unsurprisingly). In this case, we recommend using hidden functions in Clapeyron.jl, the Clapeyron.VT_property(model, V, T, n) functions. Rather than taking the pressure as an input, these functions take the system volume. As we have obtained these volumes from the saturation solvers, it ensures that we obtain the property related to the correct phase. This is shown below for the enthalpy of vaporisation saturated heat capacities:","category":"page"},{"location":"tutorials/pure_saturation_curves/","page":"Pure Saturation Properties","title":"Pure Saturation Properties","text":"N    = 100\n\nT    = LinRange(298.15, Tc, N)\npsat = zeros(N)\nvl   = zeros(N)\nvv   = zeros(N)\n\nhL   = zeros(N)\nhV   = zeros(N)\ncpL  = zeros(N)\ncpV  = zeros(N)\n\nfor i in 1:N\n    if i==1\n        sat = saturation_pressure(model, T[i])\n        psat[i] = sat[1]\n        vl[i] = sat[2]\n        vv[i] = sat[3]\n        v0 = [vl[i],vv[i]]\n    else\n        sat = saturation_pressure(model, T[i]; v0=v0)\n        psat[i] = sat[1]\n        vl[i] = sat[2]\n        vv[i] = sat[3]\n        v0 = [vl[i],vv[i]]\n    end\n    hL[i]  = Clapeyron.VT_enthalpy(model,vl[i],T[i],[1.])\n    hV[i]  = Clapeyron.VT_enthalpy(model,vv[i],T[i],[1.])\n    cpL[i] = Clapeyron.VT_isobaric_heat_capacity(model,vl[i],T[i],[1.])\n    cpV[i] = Clapeyron.VT_isobaric_heat_capacity(model,vv[i],T[i],[1.])\nend","category":"page"},{"location":"tutorials/pure_saturation_curves/","page":"Pure Saturation Properties","title":"Pure Saturation Properties","text":"The resulting plots are shown below:","category":"page"},{"location":"tutorials/pure_saturation_curves/","page":"Pure Saturation Properties","title":"Pure Saturation Properties","text":"(Image: hvap_water)","category":"page"},{"location":"tutorials/pure_saturation_curves/","page":"Pure Saturation Properties","title":"Pure Saturation Properties","text":"As well as the saturated isobaric heat capacities:","category":"page"},{"location":"tutorials/pure_saturation_curves/","page":"Pure Saturation Properties","title":"Pure Saturation Properties","text":"(Image: cpsat_water)","category":"page"},{"location":"eos/misc/#Index","page":"Other Models","title":"Index","text":"","category":"section"},{"location":"eos/misc/","page":"Other Models","title":"Other Models","text":"Pages = [\"misc.md\"]","category":"page"},{"location":"eos/misc/#Extended-Corresponding-states-Model","page":"Other Models","title":"Extended Corresponding states Model","text":"","category":"section"},{"location":"eos/misc/#Clapeyron.ECS","page":"Other Models","title":"Clapeyron.ECS","text":"ExtendedCorrespondingStates <: EoSModel\n\nfunction ECS(components,\n    refmodel=PropaneRef(),\n    shapemodel=SRK(components),\n    shaperef = SRK(refmodel.components))\n\nInput Models\n\nshape_model: shape model\nshape_ref:  shape reference. is the same type of EoS that shape_model\nmodel_ref: Reference model\n\nDescription\n\nA Extended Corresponding states method.\n\nThe idea is to use a \"shape model\" that provides a corresponding states parameters and a \"reference model\" that implements a helmholtz energy function, so that:\n\neos(shape_model,v,T,x)/RT = eos(model_ref,v₀,T₀)/RT₀\n\nwhere:\n\nT₀ = T/f\nv₀ = v/h\nf,h = shape_factors(model::ECS,shape_ref::EoSModel,V,T,z)\n\nshape_factors can be used to create custom Extended Corresponding state models.\n\nReferences\n\n.1 Mollerup, J. (1998). Unification of the two-parameter equation of state and the principle of corresponding states. Fluid Phase Equilibria, 148(1–2), 1–19. doi:10.1016/s0378-3812(98)00230-1\n\n\n\n\n\n","category":"type"},{"location":"eos/misc/#Clapeyron.shape_factors","page":"Other Models","title":"Clapeyron.shape_factors","text":"shape_factors(model::ECS,V,T,z=SA[1.0])\nshape_factors(model::ECS,shape_ref::ABCubicModel,V,T,z=SA[1.0])\nshape_factors(model::ECS,shape_ref::EoSModel,V,T,z=SA[1.0])\n\nReturns f and h scaling factors, used by the ECS Equation of state.\n\neos(shape_model,v,T,x)/RT = eos(model_ref,v₀,T₀)/RT₀\n\nwhere:\n\nT₀ = T/f\nv₀ = v/h\n\nFor cubics, a general procedure is defined in [1]:\n\nh = b/b₀\nfh = a(T)/a₀(T₀)\n\n\ninfo: General Shape Factors?\nFor general EoS, there is no existent publications on how to obtain shape factors. However, we can \"map\" any EoS to a cubic with:b ≈ lb_volume(model,z)\na ≈ RT*(b - B)\nB = second_virial_coefficient(model,T)This is not tested extensively and it is considered an Experimental feature, subject to future changes.\n\nReferences\n\nMollerup, J. (1998). Unification of the two-parameter equation of state and the principle of corresponding states. Fluid Phase Equilibria, 148(1–2), 1–19. doi:10.1016/s0378-3812(98)00230-1\n\n\n\n\n\n","category":"function"},{"location":"eos/misc/#Clapeyron.SPUNG","page":"Other Models","title":"Clapeyron.SPUNG","text":"function function SPUNG(components,\n    refmodel=PropaneRef(),\n    shapemodel=SRK(components),\n    shaperef = SRK(refmodel.components))\n\nDescription\n\nSPUNG: State Research Program for Utilization of Natural Gas\n\nECS method. It uses SRK as the shape model and PropaneRef as the reference model.\n\nReferences\n\nWilhelmsen, Ø., Skaugen, G., Jørstad, O., & Li, H. (2012). Evaluation of SPUNG* and other equations of state for use in carbon capture and storage modelling. Energy Procedia, 23, 236–245. doi:10.1016/j.egypro.2012.06.024\n\n\n\n\n\n","category":"function"},{"location":"eos/misc/#Clapeyron.LKP","page":"Other Models","title":"Clapeyron.LKP","text":"LKP <: EmpiricHelmholtzModel\nLKP(components;\n    idealmodel=BasicIdeal,\n    verbose=false)\n\nInput parameters\n\nTc: Single Parameter (Float64) - Critical Temperature [K]\nPc: Single Parameter (Float64) - Critical Pressure [Pa]\nVc: Single Parameter (Float64) (optional) - Critical Volume [m^3]\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nacentricfactor: Single Parameter (Float64) - Acentric Factor (no units)\nk: Pair Parameter (Float64) (optional) - binary interaction parameter (no units)\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\nLee-Kesler-Plöker equation of state. corresponding states using interpolation between a simple, spherical fluid (methane, ∅)  and a reference fluid (n-octane, ref):\n\nαᵣ = (1 - ωᵣ)*αᵣ(δr,τ,params(∅)) + ωᵣ*αᵣ(δr,τ,params(ref))\nτ = Tr/T\nδr = Vr/V/Zr\nZr = Pr*Vr/(R*Tr)\nPr = (0.2905 - 0.085*ω̄)*R*Tr/Vr\nωᵣ = (ω̄ - ω(∅))/(ω(ref) - ω(∅))\nω̄ = ∑xᵢωᵢ\nTr = ∑xᵢ*xⱼ*Tcᵢⱼ*Vcᵢⱼ^η * (1-kᵢⱼ)\nVr = ∑xᵢ*xⱼ*Tcᵢⱼ*Vcᵢⱼ\nTcᵢⱼ = √Tcᵢ*Tcⱼ\nVcᵢⱼ = 0.125*(∛Vcᵢ + ∛Vcⱼ)^3\nη = 0.25\n\nModel Construction Examples\n\n# Using the default database\nmodel = LKP(\"water\") #single input\nmodel = LKP([\"water\",\"ethanol\"]) #multiple components\nmodel = LKP([\"water\",\"ethanol\"], idealmodel = ReidIdeal) #modifying ideal model\n\n# Passing a prebuilt model\n\nmy_idealmodel = MonomerIdeal([\"neon\",\"hydrogen\"];userlocations = (;Mw = [20.17, 2.]))\nmodel =  LKP([\"neon\",\"hydrogen\"],idealmodel = my_idealmodel)\n\n# User-provided parameters, passing files or folders\nmodel = LKP([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"lkp/my_k_values.csv\"])\n\n# User-provided parameters, passing parameters directly\n\nmodel = LKP([\"neon\",\"hydrogen\"];\n        userlocations = (;Tc = [44.492,33.19],\n                        Pc = [2679000, 1296400],\n                        Vc = [4.25e-5, 6.43e-5],\n                        Mw = [20.17, 2.],\n                        acentricfactor = [-0.03,-0.21]\n                        k = [0. 0.18; 0.18 0.]) #k,l can be ommited in single-component models.\n                    )\n\nReferences\n\nPlöcker, U., Knapp, H., & Prausnitz, J. (1978). Calculation of high-pressure vapor-liquid equilibria from a corresponding-states correlation with emphasis on asymmetric mixtures. Industrial & Engineering Chemistry Process Design and Development, 17(3), 324–332. doi:10.1021/i260067a020\n\n\n\n\n\n","category":"type"},{"location":"eos/misc/#Sanchez–Lacombe-Model","page":"Other Models","title":"Sanchez–Lacombe Model","text":"","category":"section"},{"location":"eos/misc/#Clapeyron.SanchezLacombe","page":"Other Models","title":"Clapeyron.SanchezLacombe","text":"SanchezLacombe(components;\nidealmodel = BasicIdeal,\nmixing = SLk0k1lMixingRule,\nuserlocations = String[],\nideal_userlocations = String[],\nmixing_userlocations = String[],\nreference_state = false,\nverbose = false)\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nepsilon: Single Parameter (Float64) - Nonbonded interaction energy per monomer [J/mol]\nvol: Single Parameter (Float64) - Closed Packed Specific volume [m^3/mol]\n\nModel Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nepsilon: Pair Parameter (Float64) - Nonbonded interaction energy per monomer [J/mol]\nvol: Pair Parameter (Float64) - Closed Packed Specific volume [m^3/mol]\n\nInput models\n\nidealmodel: Ideal Model\nmixing: Mixing model\n\nDescription\n\nSanchez-Lacombe Lattice Fluid Equation of State.\n\nxᵢ = zᵢ/∑zᵢ\nr̄ = ∑xᵢrᵢ\nvᵣ,εᵣ = mix_vε(model,V,T,z,model.mixing,r̄,∑zᵢ)\nρ̃ = r̄*vᵣ/v\nT̃ = R̄*T/εᵣ\naᵣ = r̄*(- ρ̃ /T̃ + (1/ρ̃  - 1)*log(1 - ρ̃ ) + 1)\n\nReferences\n\nNeau, E. (2002). A consistent method for phase equilibrium calculation using the Sanchez–Lacombe lattice–fluid equation-of-state. Fluid Phase Equilibria, 203(1–2), 133–140. doi:10.1016/s0378-3812(02)00176-0\n\n\n\n\n\n","category":"type"},{"location":"eos/misc/#Clapeyron.mix_vε","page":"Other Models","title":"Clapeyron.mix_vε","text":"mix_vε(model::SanchezLacombeModel,V,T,z,mix::SLMixingRule,r̄ = @f(rmix),∑z = sum(z))\n\nFunction used to dispatch on the different mixing rules available for Sanchez-Lacombe.\n\nExample:\n\nfunction mix_vε(model::SanchezLacombe,V,T,z,mix::SLKRule,r̄,Σz = sum(z))\n    v = model.params.vol.values\n    ε = model.params.epsilon.values\n    r = model.params.segment.values\n    k = mix.k.values\n    x = z ./ Σz\n    ϕ = @. r * x / r̄\n    εᵣ = sum(ε[i,j]*(1-k[i,j])*ϕ[i]*ϕ[j] for i ∈ @comps for j ∈ @comps)\n    vᵣ = sum(v[i,j]*ϕ[i]*ϕ[j] for i ∈ @comps for j ∈ @comps)\n    return vᵣ,εᵣ\n\n\n\n\n\n","category":"function"},{"location":"eos/misc/#Clapeyron.SLKRule","page":"Other Models","title":"Clapeyron.SLKRule","text":"SLKRule(components; userlocations = String[], verbose = false)\n\nInput parameters\n\nk: Pair Parameter (Float64) (optional) - Binary Interaction Parameter (no units)\n\nConstant Kᵢⱼ mixing rule for Sanchez-Lacombe:\n\nεᵢⱼ = √εᵢεⱼ*(1-kᵢⱼ)\nvᵢⱼ = (vᵢ + vⱼ)/2\nϕᵢ = rᵢ*xᵢ/r̄\nεᵣ = ΣΣϕᵢϕⱼεᵢⱼ\nvᵣ = ΣΣϕᵢϕⱼvᵢⱼ\n\n\n\n\n\n","category":"type"},{"location":"eos/misc/#Clapeyron.SLk0k1lMixingRule","page":"Other Models","title":"Clapeyron.SLk0k1lMixingRule","text":"SLKRule(components; userlocations = String[], verbose = false)\n\nInput parameters\n\nk0,k: Pair Parameter (Float64, optional) - Binary Interaction Parameter (no units)\nk1: Pair Parameter (Float64, optional) - Binary Interaction Parameter (no units)\nl: Pair Parameter (Float64,optional) - Binary Interaction Parameter (no units)\n\nNeau's Consistent k₀,k₁,l mixing rule for Sanchez-Lacombe:\n\nεᵢⱼ = √εᵢεⱼ\nvᵢⱼ = (1 - lᵢⱼ)(vᵢ + vⱼ)/2\nϕᵢ = rᵢ*xᵢ/r̄\nεᵣ = ΣΣϕᵢϕⱼεᵢⱼ*(1 - k₀ᵢⱼ + (1 - δᵢⱼ)(Σϕₖk₁ᵢₖ + Σϕₖk₁ₖⱼ))\nvᵣ = ΣΣϕᵢϕⱼvᵢⱼ\n\nWhere δᵢⱼ is i == j ? 1 : 0\n\nReferences\n\nNeau, E. (2002). A consistent method for phase equilibrium calculation using the Sanchez–Lacombe lattice–fluid equation-of-state. Fluid Phase Equilibria, 203(1–2), 133–140. doi:10.1016/s0378-3812(02)00176-0\n\n\n\n\n\n","category":"type"},{"location":"eos/misc/#Other-molecular-Models","page":"Other Models","title":"Other molecular Models","text":"","category":"section"},{"location":"eos/misc/#Clapeyron.PeTS","page":"Other Models","title":"Clapeyron.PeTS","text":"PeTSModel <: EoSModel\n\nPeTS(components; \nidealmodel = BasicIdeal,\nuserlocations = String[],\nideal_userlocations = String[],\nreference_state = nothing,\nverbose = false)\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Single Parameter (Float64) - Segment Diameter [A°]\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K]\nk: Pair Parameter (Float64) (optional) - Binary Interaction Paramater (no units)\n\nModel Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Pair Parameter (Float64) - Mixed segment Diameter [m]\nepsilon: Pair Parameter (Float64) - Mixed reduced dispersion energy[K]\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\nPerturbed, Truncated and Shifted (PeTS) Equation of State.\n\nReferences\n\nHeier, M., Stephan, S., Liu, J., Chapman, W. G., Hasse, H., & Langenbach, K. (2018). Equation of state for the Lennard-Jones truncated and shifted fluid with a cut-off radius of 2.5 σ based on perturbation theory and its applications to interfacial thermodynamics. Molecular Physics, 116(15–16), 2083–2094. doi:10.1080/00268976.2018.1447153\n\n\n\n\n\n","category":"type"},{"location":"installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"This section provides instruction on installing the Julia language and Clapeyron, and provides recommendations on packages users might need to use in conjunction with Clapeyron.","category":"page"},{"location":"installation/#Installing-Julia","page":"Installation","title":"Installing Julia","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"The latest version of Julia can be downloaded here, with additional instructions specific to the OS used provided here. Clapeyron should function on all OS.","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"If users are unfamiliar with Julia, we recommend some helpful guides to become familiar:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"For novice programmers, there is a short introduction to Julia available here. A longer list of tutorials is available on the Julia website itself.\nIf users are already familiar with MATLAB or Python, there is a great guide available listing the differences between the two here.","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"For basic usage of Clapeyron, one does not need an in-depth knowledge of Julia. However, if one wishes to implement their own methods or model, it might be worth familiarising oneself with concepts such as multiple dispatch and broadcasting.","category":"page"},{"location":"installation/#Installing-Clapeyron","page":"Installation","title":"Installing Clapeyron","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Clapeyron.jl is a registered package on JuliaHub. Installing it can be done with a simple command within the Julia REPL:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"julia> using Pkg\n\njulia> Pkg.add(\"Clapeyron\")","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"If a new version of Clapeyron.jl is released, one can update the package using:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"julia> using Pkg\n\njulia> Pkg.update(\"Clapeyron\")","category":"page"},{"location":"installation/#Recommended-packages","page":"Installation","title":"Recommended packages","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"In order to fully utilise Clapeyron, users may need certain features not included in the package. Here is a list of packages the developers of Clapeyron recommend using:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Plotting: The default package for plotting in Julia is Plots.jl and can be installed the same way as Clapeyron. However, if users are more-familiar with matplotlib, PyPlot.jl is also available but is trickier to install.\nData storage and manipulation: The default packages in Julia are DataFrames.jl and Tables.jl. Both of these make it easy to store values and then export them into various data types.","category":"page"},{"location":"tutorials/xy_flash/#Other-Flash-Computations","page":"Other Flash Computations","title":"Other Flash Computations","text":"","category":"section"},{"location":"tutorials/xy_flash/","page":"Other Flash Computations","title":"Other Flash Computations","text":"As seen before, the default inputs to compute any bulk property using any EoSModel are pressure, temperature, and moles. However, there is also an option to use alternative inputs. The specific combinations are as follows:","category":"page"},{"location":"tutorials/xy_flash/","page":"Other Flash Computations","title":"Other Flash Computations","text":"Pressure and enthalpy ph_flash (PH module)\nPressure and entropy ps_flash (PS module)\nVapour fraction and pressure qp_flash (QP module)\nVapour fraction and temperature qt_flash (QT module)\nTemperature and entropy ts_flash (TS module)\nVolume and temperature vt_flash (VT module)","category":"page"},{"location":"tutorials/xy_flash/#Using-P-H-flash","page":"Other Flash Computations","title":"Using P-H flash","text":"","category":"section"},{"location":"tutorials/xy_flash/","page":"Other Flash Computations","title":"Other Flash Computations","text":"The following example demonstrates the use of ph_flash, but the same procedure applies to all flash functions:","category":"page"},{"location":"tutorials/xy_flash/","page":"Other Flash Computations","title":"Other Flash Computations","text":"julia> model = cPR([\"ethane\",\"methane\"],idealmodel = ReidIdeal);\njulia> z = [1.0,1.0]; p = 101325; h = 100;\njulia> flash_result = ph_flash(model,p,h,z)\nFlash result at T = 299.938, p = 101325.0 with 1 phase:\n (x = [0.5, 0.5], β = 2.0, v = 0.0244958)","category":"page"},{"location":"tutorials/xy_flash/","page":"Other Flash Computations","title":"Other Flash Computations","text":"Once the flash_result is computed, other bulk properties can be determined as follows:","category":"page"},{"location":"tutorials/xy_flash/","page":"Other Flash Computations","title":"Other Flash Computations","text":"julia> s = entropy(model,flash_result)\n-66.39869200962218\n\njulia> mass_density(model,flash_result)\n0.941244521997331","category":"page"},{"location":"tutorials/xy_flash/","page":"Other Flash Computations","title":"Other Flash Computations","text":"Additionally, there are convenient modules that can be used to bypass the manual computation of the flash result. Example:","category":"page"},{"location":"tutorials/xy_flash/","page":"Other Flash Computations","title":"Other Flash Computations","text":"julia> using Clapeyron\n\njulia> import Clapeyron: PH\n\njulia> model = cPR([\"ethane\",\"methane\"],idealmodel = ReidIdeal);\n\njulia> z = [1.0,1.0]; p = 101325; h = 100;\n\njulia> PH.entropy(model,p,h,z)\n-66.39869200962218","category":"page"},{"location":"tutorials/xy_flash/","page":"Other Flash Computations","title":"Other Flash Computations","text":"An example of each remaining flash computation will be done with a a 1:1 molar mixture of isopentane and isobutane, using the Peng-Robinson equation of state with a constistent Twu alpha (cPR):","category":"page"},{"location":"tutorials/xy_flash/","page":"Other Flash Computations","title":"Other Flash Computations","text":"julia> model = cPR([\"isopentane\",\"isobutane\"],idealmodel = ReidIdeal)                                                    \nPR{ReidIdeal, TwuAlpha, NoTranslation, vdW1fRule} with 2 components:\n \"isopentane\"\n \"isobutane\"\nContains parameters: a, b, Tc, Pc, Mw","category":"page"},{"location":"tutorials/xy_flash/#P-S-flash","page":"Other Flash Computations","title":"P-S flash","text":"","category":"section"},{"location":"tutorials/xy_flash/","page":"Other Flash Computations","title":"Other Flash Computations","text":"Using the PS module:","category":"page"},{"location":"tutorials/xy_flash/","page":"Other Flash Computations","title":"Other Flash Computations","text":"julia> z = [1.0,1.0]; p = 101325; s = 100;\n\njulia> import Clapeyron: PS\n\njulia> PS.temperature(model,p,s,z)\n541.1993196556604\n\njulia> PS.enthalpy(model,p,s,z)\n69569.1104222583","category":"page"},{"location":"tutorials/xy_flash/#Q-P-flash","page":"Other Flash Computations","title":"Q-P flash","text":"","category":"section"},{"location":"tutorials/xy_flash/","page":"Other Flash Computations","title":"Other Flash Computations","text":"Compute the entropy at vapour fraction 0.5 and pressure 101 325 Pa:","category":"page"},{"location":"tutorials/xy_flash/","page":"Other Flash Computations","title":"Other Flash Computations","text":"julia> z = [1.0,1.0]; p = 101325; q = 0.5;\n\njulia> flash_result = qp_flash(model,q,p,z)\nFlash result at T = 280.803, p = 101325.0 with 2 phases:\n (x = [0.667227, 0.332773], β = 1.0, v = 0.000105263)\n (x = [0.332773, 0.667227], β = 1.0, v = 0.0222189)\n\njulia> entropy(model,flash_result)\n-164.74025465755165","category":"page"},{"location":"tutorials/xy_flash/","page":"Other Flash Computations","title":"Other Flash Computations","text":"Using the QP module:","category":"page"},{"location":"tutorials/xy_flash/","page":"Other Flash Computations","title":"Other Flash Computations","text":"julia> import Clapeyron: QP\n\njulia> QT.entropy(model,q,p,z)\n-164.74025465755165","category":"page"},{"location":"tutorials/xy_flash/#Q-T-flash","page":"Other Flash Computations","title":"Q-T flash","text":"","category":"section"},{"location":"tutorials/xy_flash/","page":"Other Flash Computations","title":"Other Flash Computations","text":"Entropy at vapour fraction 0.5 and temperature 300 K:","category":"page"},{"location":"tutorials/xy_flash/","page":"Other Flash Computations","title":"Other Flash Computations","text":"julia> z = [1.0,1.0]; T = 300; q = 0.5;\n\njulia> flash_result = qt_flash(model,q,T,z)\nFlash result at T = 300.0, p = 1.94999e5 with 2 phases:\n (x = [0.649352, 0.350648], β = 1.0, v = 0.000108864)\n (x = [0.350648, 0.649352], β = 1.0, v = 0.0120351)\n\njulia> entropy(model,flash_result)\n-153.12015827330828\n\njulia> pressure(model,flash_result)\n194998.54983747654","category":"page"},{"location":"tutorials/xy_flash/","page":"Other Flash Computations","title":"Other Flash Computations","text":"Using the QT module:","category":"page"},{"location":"tutorials/xy_flash/","page":"Other Flash Computations","title":"Other Flash Computations","text":"julia> import Clapeyron: QT\n\njulia> QT.entropy(model,q,T,z)\n-153.12015827330828","category":"page"},{"location":"tutorials/xy_flash/#T-S-flash","page":"Other Flash Computations","title":"T-S flash","text":"","category":"section"},{"location":"tutorials/xy_flash/","page":"Other Flash Computations","title":"Other Flash Computations","text":"Enthalpy and pressure at entropy –215 J/K and temperature 310 K:","category":"page"},{"location":"tutorials/xy_flash/","page":"Other Flash Computations","title":"Other Flash Computations","text":"julia> z = [1.0,1.0]; T = 310; s = -215;\n\njulia> flash_result = ts_flash(model,T,s,z)\nFlash result at T = 310.0, p = 1.87265e6 with 1 phase:\n (x = [0.5, 0.5], β = 2.0, v = 0.000108424)\n\n julia> enthalpy(model,flash_result)\n-41092.06962844136\n\njulia> pressure(model,flash_result)\n1.8726539417569228e6","category":"page"},{"location":"tutorials/xy_flash/","page":"Other Flash Computations","title":"Other Flash Computations","text":"Using the TS module:","category":"page"},{"location":"tutorials/xy_flash/","page":"Other Flash Computations","title":"Other Flash Computations","text":"julia> import Clapeyron: TS\n\njulia> TS.enthalpy(model,T,s,z)\n-41092.06962844136","category":"page"},{"location":"tutorials/xy_flash/#V-T-flash","page":"Other Flash Computations","title":"V-T flash","text":"","category":"section"},{"location":"tutorials/xy_flash/","page":"Other Flash Computations","title":"Other Flash Computations","text":"Enthalpy and pressure at volume 0.04 m³ and temperature 300 K:","category":"page"},{"location":"tutorials/xy_flash/","page":"Other Flash Computations","title":"Other Flash Computations","text":"julia> z = [1.0,1.0]; T = 300; v = 0.04;\n\njulia> flash_result = vt_flash(model,v,T,z)\nFlash result at T = 300.0, p = 1.19954e5 with 1 phase:\n (x = [0.5, 0.5], β = 2.0, v = 0.02)\n\njulia> pressure(model,flash_result)\n119953.80563632645\n\njulia> enthalpy(model,flash_result)\n-78.48634320658675","category":"page"},{"location":"tutorials/xy_flash/","page":"Other Flash Computations","title":"Other Flash Computations","text":"Using the VT module:","category":"page"},{"location":"tutorials/xy_flash/","page":"Other Flash Computations","title":"Other Flash Computations","text":"julia> import Clapeyron: VT\n\njulia> VT.enthalpy(model,v,T,z)\n-78.48634320658675","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"Once Clapeyron is installed, it can be loaded using:","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"using Clapeyron","category":"page"},{"location":"user_guide/basic_usage/#Creating-a-thermodynamic-model","page":"-","title":"Creating a thermodynamic model","text":"","category":"section"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"We may create a model object by calling the constructor of the respective equation of state. For example,","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"model1 = PCSAFT([\"methanol\"])\nmodel2 = PR([\"ethane\", \"water\"])\nmodel3 = GERG2008([\"propane\",\"pentane\"])","category":"page"},{"location":"user_guide/basic_usage/#Group-contribution-Models","page":"-","title":"Group-contribution Models","text":"","category":"section"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"We also support group-contribution models like SAFT‑gamma Mie. We have a database of species with the number of each group associated with it for easy lookup, but you may also use your own combinations. We use a tuple of the name of the molecule and an array of the group-multiplicity mappings. For example","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"model4 = SAFTgammaMie([\n        \"ethanol\",\n        (\"ibuprofen\", [\"CH3\"=>3, \"COOH\"=>1, \"aCCH\"=>1, \"aCCH2\"=>1, \"aCH\"=>4])])","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"In some group-contribution approaches, one may need to specify some structural information (such as gc‑PC‑SAFT), such as the number of bonds between groups. This can be done as follows:","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"model5 = gcPCSAFT([\n        (\"ethanol\", [\"CH3\" => 1, \"CH2OH\" => 1], [(\"CH3\", \"CH2OH\") => 1])\n        (\"octane\", [\"CH3\" => 2, \"CH2\" => 6], [(\"CH3\", \"CH2\") => 2, (\"CH2\", \"CH2\") => 5])])","category":"page"},{"location":"user_guide/basic_usage/#Available-models","page":"-","title":"Available models","text":"","category":"section"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"One can find out more about the information stored within these model objects in the API documentation. In terms of equations of state available, we have the following default models:","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"Cubics:","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"van der Waals (vdW)\nClausius (Clausius)\nBerthelot (Berthelot)\nRedlich–Kwong (RK)\nSoave–Redlich–Kwong (SRK)\nPredictive Soave–Redlich–Kwong (PSRK)\nTranslated-and-Consistent Redlich–Kwong (tcRK)\nPeng–Robinson (PR)\nPeng–Robinson (1978) (PR78)\n\"Universal Mixing Rule\" Peng–Robinson (UMRPR)\nVolume-Translated Peng–Robinson (VTPR)\nTranslated-and-Consistent Peng–Robinson (tcPR)\nConsistent Peng–Robinson + Twu (cPR)\nQuantum Corrected Peng–Robinson (QCPR)\nEnhanced Predictive Peng–Robinson (1978) (EPPR78)\nPatel–Teja (PatelTeja)\nPatel–Teja–Valderrama (PTV)\nKumar–Upadhyay (KU)\nRedlich–Kwong–Peng–Robinson (RKPR)","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"SAFT:","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"SAFT (ogSAFT)\nCK (Chen and Kreglewski) SAFT (CKSAFT)\nSimplified CK‑SAFT (sCKSAFT)\nBACKSAFT\nLennard-Jones SAFT (LJSAFT)\nSAFT, Variable Range (VR), Square Well (SW) (SAFTVRSW)\nCubic plus Association (CPA)\nSimplified CPA (sCPA)\nSoft SAFT, with Lennard-Jones function from Johnson et al. (1993) (softSAFT)\nSoft SAFT, with Lennard-Jones function from Thol et al. (2016) (softSAFT2016)\nPerturbed-Chain SAFT (PCSAFT)\nSimplified PC‑SAFT (sPCSAFT)\nPC‑SAFT with T-dependent kᵢⱼ and special correlation for water (pharmaPCSAFT)\nHeterogeneous GC‑PC‑SAFT (gcPCSAFT)\nPC‑SAFT with Gᴱ mixing rule (GEPCSAFT)\nSAFT‑VR with Mie potential (SAFTVRMie)\nSAFT‑VR with quantum corrected Mie potential (SAFTVRQMie)\nSAFT‑gamma Mie (SAFTgammaMie)\nStructural SAFT‑gamma Mie (structSAFTgammaMie)","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"Activity coefficient (N.B. these models only provide VLE properties for mixtures):","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"Wilson\nNon-random two-liquid (NRTL)\nNRTL, temperature-dependent interaction (aspenNRTL)\nUniversal quasichemical Activity Coefficients (UNIQUAC): (UNIQUAC)\nUNIQUAC Functional-group Activity Coefficients (UNIFAC): (UNIFAC)\nUNIFAC‑FV (UNIFACFV)\nUNIFAC‑FV (polymer blends) (UNIFACFVPoly)\nConductor-like Screening Model Segment Activity Model (COSMO‑SAC)\nCOSMO‑SAC (2002 version) (COSMOSAC02)\nCOSMO‑SAC (2010 version) (COSMOSAC10)\nCOSMO‑SAC with dispersive interactions (COSMOSACdsp)","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"Empirical:","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"General MultiParameter Empiric model (MultiFluid)\nGERG‑2008 EoS for Natural Gas (GERG2008)\nEOS‑LNG for Liquefied Natural Gas (EOS_LNG)\nIAPWS‑95 Water reference (IAPWS95)\nPropane Reference (PropaneRef)\nLennard-Jones Reference from Thol et al. (2016) (LJRef)\nAmmonia Reference (2023) (Ammonia2023)\nMultiparameter EoS + Activity (HelmAct)","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"Extended Corresponding States (ECS):","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"SPUNG (SPUNG)","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"One can find out more about each of these equations of state within our background documentation. Nevertheless, all of these equations are compatible with all methods available in our package.","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"There a few optional arguments available for these equations which will be explained below. One of these is specifying the location of the parameter databases, the details of which can be found in our Custom databases documentation.","category":"page"},{"location":"user_guide/basic_usage/#Specifying-an-ideal-term","page":"-","title":"Specifying an ideal term","text":"","category":"section"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"Both SAFT and cubic-type equations of state rely upon an ideal model. By default, Clapeyron uses what we refer to as the BasicIdeal model to account for the ideal contribution which does not require any parameters. For properties which only have derivatives with respect to volume or composition (e.g. volume, isothermal compressibility, critical points, saturation points), or monoatomic species (e.g. noble gases), this is perfectly fine. However, for any other properties or species, the results obtained will most likely be quite poor. This is because this model does not account for the rotational and vibrational modes of the species. To amend this, we provide three additional ideal models to be used instead:","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"Monomer ideal correlation (MonomerIdeal)\nWalker and Haslam's ideal correlation (WalkerIdeal)\nJoback's ideal correlation (JobackIdeal)\nReid's polynomial correlation (ReidIdeal)\nAly-Lee's correlation (AlyLeeIdeal)\nPPDS correlation (PPDSIdeal)\nMultiParameter Empiric Ideal correlations (EmpiricIdeal)","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"These can be specified for any of the SAFT or cubic-type equations of state using:","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"model5 = PCSAFT([\"carbon dioxide\"]; idealmodel = WalkerIdeal)","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"Everything else will work as normal.","category":"page"},{"location":"user_guide/basic_usage/#Specifying-an-alpha-function","page":"-","title":"Specifying an alpha function","text":"","category":"section"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"vdW, RK and PR cubic equations rely on an alpha function (SRK is technically just RK but with a different alpha function). Whilst we use the defaults for both RK and PR, it is possible to toggle between them. For example:","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"model6 = RK([\"ethane\",\"propane\"];alpha=SoaveAlpha)","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"The above model would be equivalent to a model built by SRK directly. We support the following alpha functions:","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"RKAlpha: This is the default alpha function for regular RK.\nSoaveAlpha: This is the default alpha function for SRK.\nPRAlpha: This is the default alpha function for regular PR.\nPR78Alpha: This is the default alpha function for PR78.\nKUAlpha: This is the default alpha function for KU\nRKPRAlpha: This is the default alpha function for RKPR\nBMAlpha: This is the modified alpha function proposed by Boston and Mathias designed to improve estimates above the critical point. This works for both PR and RK.\nTwuAlpha: Proposed by Twu et al., this alpha function uses species-specific parameters rather than correlation and, thus, is slightly more accurate than regular alpha functions. It was intended to be used with PR and is used in VTPR, tcPR, cPR and tcRK.\nTwu88Alpha: An earlier version of TwuAlpha, that uses 2 parameters instead of 3.\nMTAlpha: Proposed by Magoulas and Tassios, this alpha function is essentially like the regular PR alpha function only to a higher order. It is used within UMRPR.\nSoave2019Alpha: Updated soave correlations for PR and (s)RK models.","category":"page"},{"location":"user_guide/basic_usage/#Specifying-a-mixing-rule","page":"-","title":"Specifying a mixing rule","text":"","category":"section"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"Only relevant to cubic equations of state and mixtures, we can alternate between different mixing rules in case these may result in better predictions. We can toggle between these mixing rules:","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"model7 = RK([\"ethane\",\"propane\"];mixing=KayRule)","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"We currently support:","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"vdW1fRule: The standard van der Waals one-fluid mixing rule which is the default in all cubics.\nKayRule: Takes an approach closer to the mixing rules used in SAFT.\nHVRule: The Huron–Vidal mixing rule with uses information from activity coefficient models to form the mixing rule. It is meant to be more accurate than regular mixing rules. As it requires an activity coefficient model, this must be specified:\nmodel7 = RK([\"methanol\",\"benzene\"];mixing=HVRule,activity=Wilson)\nMHV1Rule: The modified Huron–Vidal mixing rule proposed by Michelsen to first order. This has rather significant improvements over the regular mixing rule. Also needs an activity model to be specified.\nMHV2Rule: The modified Huron–Vidal mixing rule proposed by Michelsen to second order. This is meant to be an improvement over the first order rule. Also needs an activity model to be specified.\nWSRule: The Wong–Sandler mixing rule which also relies on an activity model. The equations are slightly more complicated but it is meant to be an improvement compared to HVRule. Also needs an activity model to be specified.\nmodWSRule: A modified Wong–Sandler mixing rule, that reduces to vdW1fRule when there is no nonideal mixtures.\nLCVMRule: The Linear Combination of Vidal and Michelsen mixing rules is designed for asymmetric mixtures. Also needs an activity model to be specified.","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"If one goes looking within the source code, they will also find VTPRRule, PSRKRule,PPR78Rule, QCPRRule and UMRRule; these are only intended for use in their respective models and shouldn't be used otherwise. However, it is still possible to toggle between them.","category":"page"},{"location":"user_guide/basic_usage/#Specifying-a-volume-translation-method","page":"-","title":"Specifying a volume translation method","text":"","category":"section"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"In order to improve the predictions of bulk properties in cubics, without affecting VLE properties, a volume translation method can be used which simply shifts the volume within the cubics by c. The default for all cubics is NoTranslation, however, we can toggle between the methods:","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"model7 = RK([\"ethane\",\"propane\"];translation=PenelouxTranslation)","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"We support the following methods:","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"PenelouxTranslation: Used in PSRK.\nRackettTranslation: Used in VTPR.\nMTTranslation: Used in UMRPR.\nConstantTranslation","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"Note that not all these methods will be compatible with all species as they require the critical volume of the species.","category":"page"},{"location":"user_guide/basic_usage/#Using-an-Activity-coefficient-model","page":"-","title":"Using an Activity coefficient model","text":"","category":"section"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"Activity coefficient models are primarily designed to obtain accurate estimate of mixture VLE properties below the critical point of all species. Whilst not as flexible as other equations of state, they are computationally cheaper and, generally, more accurate. The activity coefficients are obtained as only a function of temperature and composition (gamma (Tmathbfx)), meaning we can simply use modified Raoult's law to obtain the bubble (and dew) point:","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"y_ip= x_igamma_ip_mathrmsati","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"The only problem here is that another model must provide the saturation pressure p_mathrmsati. By default, this is chosen to be PR; however, one can toggle this setting as well:","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"model3 = UNIFAC([\"methanol\",\"benzene\"];puremodel=PCSAFT)","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"Everything else will work as normal (so long as the species are also available within the specified pure model).","category":"page"},{"location":"user_guide/basic_usage/#Available-properties","page":"-","title":"Available properties","text":"","category":"section"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"Once we have our model object, we will be able to call the respective thermodynamic methods to obtain the properties that we are looking for. For example, to find the isobaric heat capacity of a 0.5 mol methanol and 0.5 mol ethanol mixture using PC‑SAFT at a pressure of 10 bar and a temperature of 300 K, we just call the isobaric_heat_capacity(model, p, T, z) function with the desired model and conditions as parameters.","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"Cp = isobaric_heat_capacity(model1, 10e5, 300, [0.5, 0.5])","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"The functions for the physical properties that we currently support are as follows:","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"Bulk properties:\nV = volume(model, p, T, z)\np = pressure(model, V, T, z)\nS = entropy(model, p, T, z)\nmu = chemical_potential(model, p, T, z)\nU = internal_energy(model, p, T, z)\nH = enthalpy(model, p, T, z)\nG = Gibbs_free_energy(model, p, T, z)\nA = Helmholtz_free_energy(model, p, T, z)\nCv = isochoric_heat_capacity(model, p, T, z)\nCp = isobaric_heat_capacity(model, p, T, z)\nbetaT = thermal_compressibility(model, p, T, z)\nbetaS = isentropic_compressibility(model, p, T, z)\nu = speed_of_sound(model, p, T, z)\nalphaV = isobaric_expansivity(model, p, T, z)\nmuJT = joule_thomson_coefficient(model, p, T, z)\nZ = compressibility_factor(model, p, T, z)\ngamma = activity_coefficients(model, p, T, z)\nAll the above functions have two optional arguments (although, technically, z is an optional argument if you're only obtaining properties for a pure species):\nphase: If you already know the phase of the species and want a (minor) speed-up, you can specify it. For example:\nV = volume(model, p, T, z; phase=:liquid)\nThe default value is :unknown where it will find both the vapour and liquid roots first and determine which has the lowest Gibbs free energy.\nthreaded: This determines whether or not to run the vapour and liquid calculations in parallel or not and is only relevant for when the phases are unknown and non-cubic models.\nV = volume(model, p, T, z; threaded=false)\nThe default value is true. This shouldn't change the results.\nMost of the above functions also accept the vol0 optional keyword argument, which specifies an initial guess for the Clapeyron.volume solver.\nNote that all of the above functions can be broadcast i.e. if T is an array, instead of a for loop, we can simply:\nCp = isobaric_heat_capacity.(model, p, T, z)\nVapour–liquid, liquid–liquid and vapour–liquid–liquid equilibrium properties:\nFor pure species:\n(p_sat, V_l_sat, V_v_sat) = saturation_pressure(model, T)\n(T_sat, V_l_sat, V_v_sat) = saturation_temperature(model, p)\nH_vap = enthalpy_vap(model, T)\nFor mixtures:\n(p_bub, V_l_bub, V_v_bub, y) = bubble_pressure(model, T, x)\n(T_bub, V_l_bub, V_v_bub, y) = bubble_temperature(model, p, x)\n(p_dew, V_l_dew, V_v_dew, x) = dew_pressure(model, T, y)\n(T_dew, V_l_dew, V_v_dew, x) = dew_temperature(model, p, y)\n(p_LLE, V_l_LLE, V_ll_LLE, xx) = LLE_pressure(model, T, x)\n(T_LLE, V_l_LLE, V_ll_LLE, xx) = LLE_temperature(model, p, x)\n(p_az, V_l_az, V_v_az, x) = azeotrope_pressure(model, T)\n(T_az, V_l_az, V_v_az, x) = azeotrope_temperature(model, p)\n(p_VLLE,V_l_sat, V_ll_sat, V_v_sat, x, xx, y) = VLLE_pressure(model, T)\n(T_VLLE,V_l_sat, V_ll_sat, V_v_sat, x, xx, y) = VLLE_temperature(model, p)\nAll the above arguments take in an optional argument for the initial guess:\n(p_sat, V_l_sat, V_v_sat) = saturation_pressure(model, T;v0=log10.([V_l0,V_v0]))\nAlthough our calculations tend to be quite robust, this argument is generally useful for when one wants to obtain smooth VLE envelopes quickly when making figures Here, you'd use a for loop where each iteration uses the previous' iteration value as an initial guess (except the first iteration). For example:\n(p_sat, V_l_sat, V_v_sat) = saturation_pressure(model, T[1])\nfor i in 2:length(T)\n  A = saturation_pressure(model,T[i];v0=log10.([V_l_sat[i-1],V_v_sat[i-1]]))\n  append!(p_sat,A[1])\n  append!(V_l_sat,A[2])\n  append!(V_v_sat,A[3])\nend\nCritical properties:\nFor pure species:\n(T_c, p_c, V_c) = crit_pure(model)\nFor mixtures:\n(T_c, p_c, V_c) = crit_mix(model, z)\n(p_UCST, V_UCST, x_UCST) = UCST_mix(model, T)\n(T_UCEP, p_UCEP, V_l_UCEP, V_v_UCEP, x, y) = UCEP_mix(model)\nLike the above functions, for crit_mix, you can also specify initial guesses to produce smooth critical curves.\nMiscellaneous:\nT = inversion_temperature(model, p, z)\nB = second_virial_coefficient(model, T, z)","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"Clapeyron also supports physical units through the use of Unitful.jl.","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"using Unitful\nimport Unitful: bar, °C, mol, kg, l\nmodel_unit = PCSAFT([\"methanol\",\"water\"])\nCp2 = isobaric_heat_capacity(model_unit, 5bar, 25°C, [0.5kg, 0.5kg])  # isobaric heat capacity of 1 mol of mixture, at a pressure of 5 bar\nCp2 = isobaric_heat_capacity(model_unit, 1.0l/kg, 25°C, [0.4kg, 0.6kg])  # isobaric heat capacity of 1 kg of mixture, at a volume of 1 L/kg","category":"page"},{"location":"user_guide/basic_usage/","page":"-","title":"-","text":"Note that if you do not wish to import specific units, you may also just use a Unitful string, pressure = 20u\"psi\". This is only supported for bulk properties.","category":"page"},{"location":"api/association/#Contents","page":"Association","title":"Contents","text":"","category":"section"},{"location":"api/association/","page":"Association","title":"Association","text":"Pages = [\"association.md\"]","category":"page"},{"location":"api/association/#Index","page":"Association","title":"Index","text":"","category":"section"},{"location":"api/association/","page":"Association","title":"Association","text":"Pages = [\"association.md\"]","category":"page"},{"location":"api/association/#Association-types-and-methods","page":"Association","title":"Association types and methods","text":"","category":"section"},{"location":"api/association/#Clapeyron.Compressed4DMatrix","page":"Association","title":"Clapeyron.Compressed4DMatrix","text":"Compressed4DMatrix{T,V<:AbstractVector{T}}\nCompressed4DMatrix(vals::AbstractVector,ijab::AbstractVector)\nCompressed4DMatrix(vals,ij,ab,unsafe::Bool = false)\n\nStruct used to hold association data. as its name says, it is a compressed 4D matrix containing all the non-zero combinations of component-site pairs. The component-site pairs (i,j,a,b) are sorted lexicographically. the (i,j) pairs are stored in the outer_indices field, whereas the (a,b) pairs are stored in the inner_indices field.  Let's see an associating model:\n\njulia> model = PCSAFT([\"water\",\"methanol\",\"ethane\"],assoc_options = AssocOptions(combining = :esd))\nPCSAFT{BasicIdeal} with 3 components:\n \"water\"\n \"methanol\"\n \"ethane\"\nContains parameters: Mw, segment, sigma, epsilon, epsilon_assoc, bondvol\n\nWe check out the bondvol parameter. note how ethane does not appear in the list:\n\njulia> model.params.bondvol\nAssocParam{Float64}[\"water\", \"methanol\", \"ethane\"]) with 4 values:\n(\"water\", \"e\") >=< (\"water\", \"H\"): 0.034868\n(\"methanol\", \"e\") >=< (\"water\", \"H\"): 0.03495053755004983\n(\"methanol\", \"H\") >=< (\"water\", \"e\"): 0.03495053755004983\n(\"methanol\", \"e\") >=< (\"methanol\", \"H\"): 0.035176\n\nThe underlying structure used to store AssocParam values is a Compressed4DMatrix:\n\njulia> vals = model.params.bondvol.values\nClapeyron.Compressed4DMatrix{Float64, Vector{Float64}} with 4 entries:\n (1, 1) >=< (1, 2): 0.034868\n (2, 1) >=< (1, 2): 0.03495053755004983\n (2, 2) >=< (1, 1): 0.03495053755004983\n (2, 1) >=< (2, 2): 0.035176\njulia> vals.values\n4-element Vector{Float64}:\n 0.034868\n 0.03495053755004983\n 0.03495053755004983\n 0.035176\njulia> vals.outer_indices\n4-element Vector{Tuple{Int64, Int64}}:\n (1, 1)\n (2, 1)\n (2, 1)\n (2, 2)\njulia> vals.inner_indices\n4-element Vector{Tuple{Int64, Int64}}:\n (1, 2)\n (1, 2)\n (2, 1)\n (1, 2)\n\nIf we check the indices:\n\njulia> idxs = [(ij...,ab...) for (ij,ab) in zip(vals.outer_indices,vals.inner_indices)]\n4-element Vector{NTuple{4, Int64}}:\n (1, 1, 1, 2)\n (2, 1, 1, 2)\n (2, 1, 2, 1)\n (2, 2, 1, 2)\njulia> issorted(idxs)\ntrue\n\nYou can build a Compressed4DMatrix in two ways:\n\nyou can pass values and a list of (i,j,a,b)::NTuple{4,Int} indices:\n\njulia> ijab, vals = [(1,1,1,2)], [3.0]\n([(1, 1, 1, 2)], [3.0])\njulia> Clapeyron.Compressed4DMatrix(vals,ijab)\nClapeyron.Compressed4DMatrix{Float64, Vector{Float64}} with 1 entry:\n (1, 1) >=< (1, 2): 3.0\n\nUsing a list of values, a list of ij:Tuple{Int,Int} outer indices and a list of ab:Tuple{Int,Int} inner indices. this last form accepts the optional argument unsafe::Bool.\n\nIf unsafe is true, ij and ab will be considered sorted, and will build a Compressed4DMatrix directly, using the same reference to vals, ij and ab:\n\njulia> ij, ab, vals = [(1,1)], [(1,2)], [3.0]\n([(1, 1)], [(1, 2)], [3.0])\njulia> assoc1,assoc2 = Clapeyron.Compressed4DMatrix(vals,ij,ab),Clapeyron.Compressed4DMatrix(vals,ij,ab,true)\n(Clapeyron.Compressed4DMatrix{Float64, Vector{Float64}}[3.0], Clapeyron.Compressed4DMatrix{Float64, Vector{Float64}}[3.0])\njulia> assoc1.values[1] = 100; (vals,assoc1.values[1])\n([3.0], 100.0)\njulia> assoc2.values[1] = 100; (vals,assoc2.values[1])\n([100.0], 100.0)\n\n\n\n\n\n","category":"type"},{"location":"api/association/#Clapeyron.assoc_pair_length","page":"Association","title":"Clapeyron.assoc_pair_length","text":"assoc_pair_length(model::EoSModel)\n\nIndicates the number of pair combinations between the different sites in an association model. By default uses length(assoc_shape(model).values)\n\nExample:\n\njulia> model = PCSAFT([\"water\"])\nPCSAFT{BasicIdeal} with 1 component:\n \"water\"\nContains parameters: Mw, segment, sigma, epsilon, epsilon_assoc, bondvol\n\njulia> model.params.bondvol\nAssocParam{Float64}[\"water\"]) with 1 value:\n(\"water\", \"e\") >=< (\"water\", \"H\"): 0.034868\n\njulia> Clapeyron.assoc_pair_length(model)\n1\n\n\n\n\n\n","category":"function"},{"location":"api/association/#Clapeyron.assoc_similar","page":"Association","title":"Clapeyron.assoc_similar","text":"assoc_similar(mat::Compressed4DMatrix)\nassoc_similar(mat::Compressed4DMatrix,::Type{𝕋}) where 𝕋 <:Number)\n\nreturns a Clapeyron.Compressed4DMatrix of the same shape as the input, with the same element type as 𝕋\n\n\n\n\n\nassoc_similar(param::SiteParam)\nassoc_similar(param::SiteParam,::Type{𝕋}) where 𝕋 <:Number)\n\nreturns a Clapeyron.Compressed4DMatrix with the smae number of components as the input AssocParam, with the same element type as 𝕋. All site combinations are filled.\n\n\n\n\n\n","category":"function"},{"location":"api/association/#Clapeyron.assoc_options","page":"Association","title":"Clapeyron.assoc_options","text":"assoc_options(model::EoSModel)\n\nReturns association options used in the association solver.\n\n\n\n\n\n","category":"function"},{"location":"api/association/#Clapeyron.assoc_strength","page":"Association","title":"Clapeyron.assoc_strength","text":"assoc_strength(model::EoSModel,V,T,z,i,j,a,b,data = Clapeyron.data(Model,V,T,z))\nΔ(model::EoSModel,V,T,z,i,j,a,b,data = Clapeyron.data(Model,V,T,z))\n\nCalculates the asssociation strength between component i at site a and component j at site b.\n\nAny precomputed values can be passed along by calling Clapeyron.data.\n\nExample\n\njulia> model = PCSAFT([\"water\"])\nPCSAFT{BasicIdeal} with 1 component:\n \"water\"\nContains parameters: Mw, segment, sigma, epsilon, epsilon_assoc, bondvol\n\njulia> model.params.bondvol.values\nClapeyron.Compressed4DMatrix{Float64, Vector{Float64}} with 1 entry:\n (1, 1) >=< (1, 2): 0.034868\n\njulia> Clapeyron.assoc_strength(model,2.5e-5,298.15,[1.0],1,1,1,2) #you can also use Clapeyron.Δ\n1.293144062056963e-26\n\n#PCSAFT precomputed data: (d,ζ₀,ζ₁,ζ₂,ζ₃,m̄)\njulia> _data = Clapeyron.data(model,2.5e-5,298.15,[1.0])\n([2.991688553098391e-10], 1.3440137996322956e28, 4.020870699566213e18, 1.2029192845380957e9, 0.3598759853853927, 1.0656)\n\njulia> Clapeyron.Δ(model,2.5e-5,298.15,[1.0],1,1,1,2,_data)\n1.293144062056963e-26\n\n\n\n\n\n","category":"function"},{"location":"api/association/#Clapeyron.assoc_fractions","page":"Association","title":"Clapeyron.assoc_fractions","text":"assoc_fractions(model::EoSModel, V, T, z,data = nothing)\n\nReturns the solution for the association site fractions. used internally by all models that require association. The result is of type PackedVectorsOfVectors.PackedVectorOfVectors, with length = length(model), and x[i][a] representing the empty fraction of the site a at component i\n\nExample:\n\njulia> model = PCSAFT([\"water\",\"methanol\",\"ethane\"],assoc_options = AssocOptions(combining = :esd))\nPCSAFT{BasicIdeal} with 3 components:\n \"water\"\n \"methanol\"\n \"ethane\"\nContains parameters: Mw, segment, sigma, epsilon, epsilon_assoc, bondvol\n\njulia> x = Clapeyron.assoc_fractions(model,2.6e-5,300.15,[0.3,0.3,0.4]) #you can also use `Clapeyron.X`\n3-element pack(::Vector{Vector{Float64}}):\n [0.041396427041509046, 0.041396427041509046]\n [0.018874664357682362, 0.018874664357682362]\n 0-element view(::Vector{Float64}, 5:4) with eltype Float64\n\n\n\n\n\n","category":"function"},{"location":"tutorials/binary_phase_diagrams/#Binary-phase-diagrams","page":"Binary Phase Diagrams","title":"Binary phase diagrams","text":"","category":"section"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"The notebook associated with this tutorial can be found here.","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"When handling two components, we introduce an additional variable to our parameter space: composition. Typically, when visualising the phase space, we would like to visualise it on the temperature, pressure and/or composition axes. However, to do so on a 2D figure will require us to fix one of these variables while varying the other two. In this tutorial, we'll go over how to obtain the varying types of binary phase diagrams using Clapeyron.","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"Note that this tutorial will focus on 'conventional' binary fluid-phase diagrams (i.e. mixtures of small molecules). Other tutorials will go over other types of systems (such as polymer mixtures, solid-fluid equilibrium and electrolytes).","category":"page"},{"location":"tutorials/binary_phase_diagrams/#Simple-binary-phase-diagrams","page":"Binary Phase Diagrams","title":"Simple binary phase diagrams","text":"","category":"section"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"As a first step, we'll consider what we refer to as simple binary phase diagrams. Here, we'll vary the composition of the two components but fix either temperature or pressure, also known as pxy and Txy binary phase diagrams, respectively. Consider a binary mixture of n-butane and n-hexane:","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"julia> model = PR([\"hexane\",\"butane\"])\nPR{BasicIdeal, PRAlpha, NoTranslation, vdW1fRule} with 2 components:\n \"hexane\"\n \"butane\"\nContains parameters: a, b, Tc, Pc, Mw","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"Let us imagine that we have a 50/50 mixture and we want to know its bubble point at T=298.15 K (the pressure at which it will just start to boil), as well as the corresponding composition in the gas phase. For this, we can use the bubble_pressure(model, T, x) function:","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"julia> (p, vl, vv, y) = bubble_pressure(model, 298.15, [0.5,0.5])\n(128247.2211869368, 0.00011306249539081021, 0.018576689885080235, [0.08390499267853593, 0.9160950073214641])","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"And it is as simple as that! There will also be the corresponding dew_pressure(model, T, x) function to obtain the dew point at a given temperature (the pressure at which the mixture just start to condense):","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"julia> (p, vl, vv, x) = dew_pressure(model, 298.15, y)\n(128247.22118805244, 0.00011306249539065818, 0.018576689884889263, [0.4999999999953279, 0.500000000004672])","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"As well as the equivalent bubble_temperature(model, p, x) and dew_temperature(model, p, y) to obtain the bubble/dew points at a given pressure:","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"julia> (T, vl, vv, y) = bubble_temperature(model, p, x)\n(298.1500000000996, 0.00011306249539067619, 0.01857668988489819, [0.08390499267605682, 0.9160950073239432])\n\njulia> (T, vl, vv, x) = dew_temperature(model, p, y)\n(298.1499999996214, 0.00011306249539036688, 0.01857668988486471, [0.4999999999884703, 0.5000000000115297])","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"!!! tip Alternative methods     Much like our pure-component saturation functions, we provide alternative methods for the functions lists above.     A comprehensive list of these can be found in our API docs.     Note that not all of these methods are compatible with all equations of state as approaches like activity coefficient models require different algorithms.","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"With these four functions, it is now possible to trace the complete phase diagram of n-butane and n-hexane: First, we'll plot the constant temperature, pxy phase diagram:","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"N    = 201\nT    = 298.15\n\nx    = LinRange(0., 1.,  N)\np    = zeros(N)\ny    = zeros(N)\n\nv0 = nothing\nfor i in 1:N\n    bub = bubble_pressure(model, T, [x[i], 1-x[i]])\n    p[i] = bub[1]\n    y[i] = bub[4][1]\nend","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"With the final diagram being: (Image: but_hex_pxy)","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"Very little needs to be changed to obtain the corresponding constant pressure, Txy diagram:","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"N    = 201\np    = 1e5\n\nx    = LinRange(0., 1.,  N)\nT    = zeros(N)\ny    = zeros(N)\n\nv0 = nothing\nfor i in 1:N\n    bub = bubble_temperature(model, p, [x[i], 1-x[i]])\n    T[i] = bub[1]\n    y[i] = bub[4][1]\nend","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"With the final diagram being: (Image: but_hex_Txy)","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"Naturally, binary mixtures of linear alkanes are as simple as the diagrams can be (what would normally be referred to as a type-I mixture). In introducing non-idealities, the binary phase diagrams, and how they are drawn, becomes more complicated.","category":"page"},{"location":"tutorials/binary_phase_diagrams/#Azeotropic-binary-phase-diagrams","page":"Binary Phase Diagrams","title":"Azeotropic binary phase diagrams","text":"","category":"section"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"If we now consider a non-ideal mixture of cyclohexane and methanol:","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"julia> model = PCSAFT([\"cyclohexane\", \"methanol\"])\nPCSAFT{BasicIdeal, Float64} with 2 components:\n \"cyclohexane\"\n \"methanol\"\nContains parameters: Mw, segment, sigma, epsilon, epsilon_assoc, bondvol","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"This mixture will exhibit an azeotrope (a set of conditions where the dew and bubble point occur at the same composition). In this case, one can't just blindly trace the phase diagram. This is primarily because our initial guesses assume that the mixture obeys Raoult's law. As such, these initial guesses won't be suitable for azeotropic mixtures. Much like the pure-component saturation properties, it is best to use the solution of the previous iteration as the initial guess for the next iteration. Consider the constant temperature, pxy phase diagram:","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"N    = 401\nT    = 343.15\n\nx    = LinRange(0., 1.,  N)\np    = zeros(N)\ny    = zeros(N)\n\nv0 = nothing\nfor i in 1:N\n    if i==1\n        bub = bubble_pressure(model, T, [x[i], 1-x[i]])\n        p[i] = bub[1]\n        y[i] = bub[4][1]\n        v0   = vcat(log10.([bub[2],bub[3]]),[x[i+1],1-x[i+1]])\n    else\n        bub = bubble_pressure(model, T, [x[i], 1-x[i]]; v0 = v0)\n        p[i] = bub[1]\n        y[i] = bub[4][1]\n        v0   = vcat(log10.([bub[2],bub[3]]),bub[4])\n    end\nend","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"The corresponding phase diagram is: (Image: etoh_hex_pxy)","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"Much like the simple case, very little needs to change to handle the corresponding constant pressure, Txy phase diagram:","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"N    = 201\np    = 1e5\n\nx    = LinRange(0., 1.,  N)\nT    = zeros(N)\ny    = zeros(N)\n\nv0 = nothing\nfor i in 1:N\n    if i==1\n        bub = bubble_temperature(model, p, [x[i], 1-x[i]])\n        T[i] = bub[1]\n        y[i] = bub[4][1]\n        v0   = vcat(bub[1],log10.([bub[2],bub[3]]),[x[i+1],1-x[i+1]])\n    else\n        bub = bubble_temperature(model, p, [x[i], 1-x[i]]; v0 = v0)\n        T[i] = bub[1]\n        y[i] = bub[4][1]\n        v0   = vcat(bub[1],log10.([bub[2],bub[3]]),bub[4])\n    end\nend","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"With the corresponding phase diagram being: (Image: etoh_hex_Txy)","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"!!! tip azeotrope_X function     Looking through our API docs, one can find the azeotrope_pressure(model, T) and azeotrope_temperature(model, p) functions.     These can obtain the exact conditions at which the azeotrope occurs at a given temperature or pressure.     They are perhaps more useful in the context of pT-projections rather than pxy and Txy diagrams.","category":"page"},{"location":"tutorials/binary_phase_diagrams/#Binary-phase-diagrams-with-one-supercritical-component","page":"Binary Phase Diagrams","title":"Binary phase diagrams with one supercritical component","text":"","category":"section"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"Consider a mixture of carbon dioxide and n-hexane:","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"julia> model = SRK([\"carbon dioxide\",\"hexane\"])\nRK{BasicIdeal, SoaveAlpha, NoTranslation, vdW1fRule} with 2 components:\n \"carbon dioxide\"\n \"hexane\"\nContains parameters: a, b, Tc, Pc, Mw","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"Thus far, we have only considered conditions where both components are sub-critical (i.e. the phase diagram start and ends at compositions of 0 and 1, respectively). However, when we reach conditions above the critical point of one component, the diagram will end at a critical point rather than at a pure component. It is difficult to predict the exact composition of the critical point ahead of time. As such, one needs to gradually approach the critical point until the dew and bubble curves eventually match (to within a certain tolerance), noting the iteration at which the diagram closed (idxend):","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"N    = 401\nidxend = N\nT    = 353.15\n\nx    = LinRange(0., 1.,  N)\np    = zeros(N)\ny    = zeros(N)\n\nv0 = nothing\nfor i in 1:N\n    if i==1\n        bub = bubble_pressure(model, T, [x[i], 1-x[i]])\n        p[i] = bub[1]\n        y[i] = bub[4][1]\n        v0   = vcat(log10.([bub[2],bub[3]]),[x[i+1],1-x[i+1]])\n    else\n        bub = bubble_pressure(model, T, [x[i], 1-x[i]]; v0 = v0)\n        p[i] = bub[1]\n        y[i] = bub[4][1]\n        v0   = vcat(log10.([bub[2],bub[3]]),bub[4])\n        if abs(y[i] - x[i])/x[i] < 1e-3 || isnan(p[i])\n            idxend = i-1\n            break\n        end\n    end\nend\n\nx = vcat(y[1:idxend],reverse(x[1:idxend]))\np = vcat(p[1:idxend],reverse(p[1:idxend]));","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"Resulting in the following phase diagram: (Image: co2_hex_pxy)","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"Note that, as you approach the critical point, our solvers will become less stable due to the nature of derivatives near the critical point. You may need a larger number of points than shown above.","category":"page"},{"location":"tutorials/binary_phase_diagrams/#Waterlight-gases","page":"Binary Phase Diagrams","title":"Water+light gases","text":"","category":"section"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"In some cases, the volatility of the two components is so different, it is not relevant / possible to plot the full phase diagram up to the critical point. This includes systems like water+light gases. In these cases, it is more relevant to plot up to compositions where the predicted pressures are still within a reasonable range. Consider an example of water+carbon dioxide:","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"julia> model = SAFTVRMie([\"carbon dioxide\",\"water\"])\nSAFTVRMie{BasicIdeal, Float64} with 2 components:\n \"carbon dioxide\"\n \"water\"\nContains parameters: Mw, segment, sigma, lambda_a, lambda_r, epsilon, epsilon_assoc, bondvol","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"For this system, the only interesting composition range is up to 3\\% mole fraction of carbon dioxide in the liquid phase: (Image: co2_h2o_pxy)","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"Going much beyond this composition range, particularly when one reaches pressures in GPa, will typically encounter numerical issues. As such, when modelling in these conditions, it is better to use methods that are more-numerically stable (such as the FugBubblePressure methods).","category":"page"},{"location":"tutorials/binary_phase_diagrams/#Binary-phase-diagrams-with-LLE","page":"Binary Phase Diagrams","title":"Binary phase diagrams with LLE","text":"","category":"section"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"Thus far, we have only considered vapour–liquid equilibrium. However, in some mixtures, one can also obtain liquid–liquid equilibrium (LLE). As an example of this, the Txy diagram for the methanol+cyclohexane mixture considered earlier will exhibit LLE at slightly lower temperatures. To obtain the composition of each phase, one needs to perform a flash calculation at constant temperature and pressure, remembering to specify that we are search for LLE:","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"julia> (n,ϕ,G) = tp_flash(model,1e5,288.15,[0.5,0.5],MichelsenTPFlash(equilibrium=:lle));\n\njulia> n\n2×2 Matrix{Float64}:\n 0.161483  0.838517\n 0.93219   0.0678104","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"A few things to note:","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"In the above, we set the system composition to 50/50.  However, there is no guarantee the phase split will occur exactly there (especially in size asymmetric systems).  One easy way to check if a phase split occurs is to use the Clapeyron.isstable(model, p, T, z) function.  If this function returns false, then we know the system is unstable as a single phase and must phase split:\njulia  julia> Clapeyron.isstable(model, 1e5, 298.15, [0.5,0.5])  false\nAlthough we have a more-detailed tutorial going over flash algorithms, one way to quickly speed up the calculations is to specify an initial guess for the partition coefficient of each species.  So long as the magnitude of each coefficient is large enough, the flash algorithm should work:\njulia  julia> tp_flash(model,1e5,288.15,[0.5,0.5],MichelsenTPFlash(equilibrium=:lle,K0=[1e5,1e-4]));","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"To trace the full LLE region, we simply need to iterate in temperature (or pressure) until the LLE region closes at the UCST (or LCST). Much like the earlier system with one supercritical component, we don't necessarily know ahead of time where the region closes. As such, we need to verify the difference in composition between each phase. Further, unless the critical point is at exactly 50/50, we will typically need to modify the value of the system composition to ensure it lies perfectly in the middle of the phase diagram. Below we show a complete example to trace the LLE region:","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"N    = 200\nTlle = LinRange(300.,minimum(T),N)\nx1   = zeros(N)\nx2   = zeros(N)\n\nK0 = [1e5, 1e-4]\nz  = [0.5,0.5]\n\nidxend = N\nfor i in 1:N\n    (n,_,_) = tp_flash(model, p, Tlle[i], z, MichelsenTPFlash(equilibrium=:lle, K0=K0))\n    K0 = n[2,:]./n[1,:]\n    z = (n[1,:]+n[2,:])/2\n    x1[i] = n[1,1]\n    x2[i] = n[2,1]\n    if abs(x1[i]-x2[i])<1e-3\n        idxend = i\n        break\n    end\nend","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"The resulting phase diagram then looks like: (Image: meoh_hex_Txy_lle)","category":"page"},{"location":"tutorials/binary_phase_diagrams/#Binary-phase-diagrams-with-VLLE","page":"Binary Phase Diagrams","title":"Binary phase diagrams with VLLE","text":"","category":"section"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"In some mixtures, it is also possible for the VLE and LLE mixtures to meet and form vapour–liquid–liquid equilibrium (VLLE). While this might sound more challenging to detect than LLE, there are actually ways to identify VLLE from a VLE curve. For this example, we'll consider 1-pentanol+water, using a combining rule to obtain the cross-association:","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"julia> model = PCSAFT([\"1-pentanol\", \"water\"]; assoc_options=AssocOptions(combining=:elliott))\nPCSAFT{BasicIdeal, Float64} with 2 components:\n \"1-pentanol\"\n \"water\"\nContains parameters: Mw, segment, sigma, epsilon, epsilon_assoc, bondvol","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"If we just blindly plot the pxy (or Txy) diagram, we will see some unphysical behaviour: (Image: water_pentoh_pxy_wrong) One can see the presence of an unphysical crossover in the dew curve, as well as a maxima in the bubble curve. These are the tell-tale signs of the presence of VLLE at these conditions. Something similar also occurs in the Txy diagram: (Image: water_pentoh_Txy_wrong) Once VLLE has been identified, to solve for its exact state, we can use the VLLE_pressure(model, T) / VLLE_temperature(model, p) functions. Unfortunately, generating good initial guesses automatically is very challenging. As such, users will need to provide decent initial guesses. With the diagram above, we can tell that VLLE will be located right where the dew curve crosses itself, allowing us to identify the composition of the three phases. The initial guesses for the volume can then be obtained just using the volume function at the pressure, temperature and composition identified. Remembering to provide the log10 of the volume, we can obtain the VLLE point:","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"julia> (p, vl, vll, vv, x, xx, y) = VLLE_pressure(model, 343.15; v0 = [-4.6,-4.06,-0.1,0.01,0.8,0.15])\n(35079.35262083988, 2.0290656644114528e-5, 7.440520356496663e-5, 0.08041940114970583, [0.0020208017777866936, 0.9979791982222133], [0.5829926745371229, 0.4170073254628771], [0.11016762215206487, 0.8898323778479351])","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"With this point identified, we can obtain the LLE region just using tp_flash function as we did previously (one can imagine something very similar for the isobaric phase diagram):","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"T    = 343.15\n\n# Obtain VLLE\n(p3, vl, vll, vv, x3, xx3, y3) = VLLE_pressure(model,\nT; v0 = [-4.6,-4.06,-0.1,0.01,0.8,0.15])\n\n# Obtain VLE\nN    = 201\n\nx1    = LinRange(0., x3[1],  N)\np1    = zeros(N)\ny1    = zeros(N)\n\nx2    = LinRange(1., xx3[1],  N)\np2    = zeros(N)\ny2    = zeros(N)\n\nv01 = nothing\nv02 = nothing\n\n# Use code described earlier for each side of the VLE region\n\n# Obtain LLE\nN    = 200\nplle = LinRange(p3, 2*p3, N)\nxx1   = zeros(N)\nxx2   = zeros(N)\n\nK0 = x3 ./ xx3\nz  = (x3 .+ xx3)./2\n# Use code described earlier for the LLE region","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"The resulting phase diagrams (both pxy and Txy) will look something like this:","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"Isothermal:","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"(Image: water_pentoh_pxy)","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"Isobaric:","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"(Image: water_pentoh_Txy)","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"This covers most binary phase diagrams one might be interested in when holding either temperature or pressure fixed.","category":"page"},{"location":"tutorials/binary_phase_diagrams/#*pT*-isopleths","page":"Binary Phase Diagrams","title":"pT isopleths","text":"","category":"section"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"The next class of phase diagram we'll consider is when we project the diagram onto the pressure and temperature axis, holding composition constant (known at pT isopleths). These diagrams can be applied to any number of components but, for the time being, we'll only consider a binary mixture. For these particular diagrams, it is recommended that users familiarise themselves with the concept of critical points of mixtures, cricondentherms and cricondenbars. These diagrams can become quite complex and, in this tutorial, we'll only go over how to obtain the simplest form for pT isopleths (for type-I mixtures) using an ethane+decane mixture:","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"julia> model = PR([\"ethane\",\"decane\"])\n\njulia> z = [0.95,0.05];","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"As a starting point, similar the saturation curve of a pure component, we'll obtain the critical point of the mixture using crit_mix(model, z):","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"julia> (Tc, pc, vc) = crit_mix(model,z)\n(352.7590586411515, 8.711875761029465e6, 0.00012655401697374196)","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"To trace the pT isopleth, we need to obtain the bubble and dew curves up to this critical point. However, there will be a few caveats. We'll use almost the same code as we used in all other phase diagrams:","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"N = 300\nT1, T2 = LinRange(220., Tc, N), LinRange(220., Tc, N)\np1, p2 = zeros(N), zeros(N)\nv01 = nothing\nv02 = nothing\n\nfor i in 1:N\n    if i == 1\n        bub = bubble_pressure(model, T1[i], z)\n        p1[i] = bub[1]\n        v01   = vcat(log10.([bub[2],bub[3]]),bub[4])\n\n        bub = dew_pressure(model, T2[i], z)\n        p2[i] = bub[1]\n        v02   = vcat(log10.([bub[2],bub[3]]),bub[4])\n    else\n        bub = bubble_pressure(model, T1[i], z; v0 = v01)\n        p1[i] = bub[1]\n        v01   = vcat(log10.([bub[2],bub[3]]),bub[4])\n\n        bub = dew_pressure(model, T2[i], z; v0 = v02)\n        p2[i] = bub[1]\n        v02   = vcat(log10.([bub[2],bub[3]]),bub[4])\n    end\nend","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"However, if we plot these two curves, we can see that the diagram isn't complete: (Image: eth_dec_pT_1)","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"In this case, the cricondentherm and cricondenbar are both above the critical point of the mixture. To close the pT isopleths, we need to add 1-2 more sections to the plot:","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"Tracing the dew point from the end of p2 to pc (using dew_temperature):","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"p3 = LinRange(p2[end], pc, N)\nT3 = zeros(N)\n\nv03 = append!([Tc],v02)\n\nfor i in 1:N\n    dew = dew_temperature(model, p3[i], z; v0 = v03)\n    T3[i] = dew[1]\n    v03   = vcat(dew[1],log10.([dew[2],dew[3]]),dew[4])\nend","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"Tracing the dew point from the end of T2 to Tc (using dew_pressure).","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"This part may not be needed for all pT isopleths if the cricondenbar is below Tc:","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"T4 = LinRange(T3[end], Tc, N)\np4 = zeros(N)\n\nv04 = v03[2:end]\n\nfor i in 1:N\n    dew = dew_pressure(model, T4[i], z; v0 = v04)\n    p4[i] = dew[1]\n    v04 = vcat(log10.([dew[2],dew[3]]),dew[4])\nend","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"And with that, we can trace the full pT isopleth: (Image: eth_dec_pT)","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"This approach is generalised for any number of components. Where it will begin to fail is more-complex phase diagrams beyond type-I, where LLE and VLLE regions begin to appear. These will typically be at low temperature and high pressures. It is possible to trace these types of diagrams using Clapeyron; however, it will involve a lot more manual specification of initial guesses and is very difficult to do so without knowing ahead of time where these regions occur.","category":"page"},{"location":"tutorials/binary_phase_diagrams/#*pT*-projections","page":"Binary Phase Diagrams","title":"pT projections","text":"","category":"section"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"Thus far, all the phase diagrams we've considered have been slices of the global binary phase diagram. This is convenient when we want to obtain the exact conditions at which phase equilibrium will occur. However, if we want to get a better idea of the global phase behaviour of the mixture, it is possible to project the global phase diagram onto a pressure-temperature plot. Here, we are only concerned with tracing the region in which the mixture could experience phase equilibrium.","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"Note that, at this stage, there is no automatic way to determine whether a mixture is a certain type ahead of time. Thus, to make these figures, you must know that the mixture is a particular type.","category":"page"},{"location":"tutorials/binary_phase_diagrams/#Type-I-mixture","page":"Binary Phase Diagrams","title":"Type-I mixture","text":"","category":"section"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"Initially, we will continue to consider the ethane+decane binary mixture. The first curves we need to draw are the saturation curves of the pure components (which we know how to obtain from an earlier tutorial): (Image: eth_dec_pT_pure)","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"To connect both curves of this mixture, we need to include the critical curve. To do this, as introduced earlier, we have the crit_mix(model, z) function:","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"x = LinRange(0., 1., N)\nT3, p3 = zeros(N), zeros(N)\n\nfor i in 1:N\n    (T3[i], p3[i], vc) = crit_mix(model, [x[i], 1-x[i]])\nend","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"For simple mixtures, one doesn't need to update the initial guesses. And with that, we have now drawn the pT projection for this mixture: (Image: eth_dec_pT_mix) Unfortunately, this is the simplest type of pT projection one can draw.","category":"page"},{"location":"tutorials/binary_phase_diagrams/#Type-II-mixture","page":"Binary Phase Diagrams","title":"Type-II mixture","text":"","category":"section"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"For the type-II mixture, we'll consider cyclohexane and methanol using PC-SAFT:","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"julia> model = PCSAFT([\"cyclohexane\",\"methanol\"])\nPCSAFT{BasicIdeal, Float64} with 2 components:\n \"cyclohexane\"\n \"methanol\"\nContains parameters: Mw, segment, sigma, epsilon, epsilon_assoc, bondvol","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"We can obtain the saturation and critical curves of this system using the same approach as the type-I system, although it may now be a good idea to re-use initial guesses:","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"x = LinRange(0., 1., N)\nT3, p3 = zeros(N), zeros(N)\n\nv0 = nothing\nfor i in 1:N\n    if i == 1\n        (T3[i], p3[i], vc) = crit_mix(model, [x[i], 1-x[i]])\n    else\n        (T3[i], p3[i], vc) = crit_mix(model, [x[i], 1-x[i]]; v0 = v0)\n    end\n    v0 = [log10(vc), T3[i]]\nend","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"With this, the plot looks like: (Image: cyhex_meoh_pT_mix) The critical curve may look a bit odd but it is physical (as a challenge, try to draw the pxy phase diagram around 500K).","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"What makes type-II mixtures unique is the fact that these system exhibit VLLE behaviour, typically at low temperatures. Due to the Gibbs Phase Rule, there is only a single pressure at a given temperature that VLLE occurs. As such, we can trace the VLLE region using a curve. Similarly, an LLE region will also be present which terminates at an upper-critical solution temperature (UCST). The VLLE and UCST curve eventually meet at what is referred to as the upper-critical end point (UCEP) which is where a critical 'liquid' phase is in equilibrium with a vapour phase. As it acts as the end point, it is convenient to obtain the UCEP first before tracing the VLLE and UCST curves. This can be done using the UCEP_mix(model) function. Note that this function is highly sensitive to initial guesses and is not very generalised:","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"julia> (T_ucep, p_ucep, vl_ucep, vv_ucep, x_ucep, y_ucep) = UCEP_mix(model)\n(319.36877456440527, 70531.68542869389, 7.883409544452988e-5, 0.03532019955594743, [0.5054291106815579, 0.49457088931844206], [0.4121361614832596, 0.5878638385167404])","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"With this point obtained, we can trace the VLLE curve:","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"T4 = LinRange(295., T_ucep, N)\np4 = zeros(N)\n\nvl = volume(model,70531.,T4[1],[0.99,0.01]; phase=:l)\nvll = volume(model,70531.,T4[1],[0.01,0.99]; phase=:l)\nvv = volume(model,70531.,T4[1],[0.5,0.5]; phase = :v)\n\nv0 = [log10(vl), log10(vll), log10(vv), 0.99, 0.01, 0.5]\n\nfor i in 1:N\n    p4[i], vl, vll, vv, x, xx, y = VLLE_pressure(model,T4[i]; v0 = v0)\n    v0 = [log10(vl), log10(vll), log10(vv), x[1], xx[1], y[1]]\nend","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"And the UCST curve (using UCST_mix(model, T)):","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"T5 = LinRange(T_ucep, 330, N)\np5 = zeros(N)\n\nv0 = [log10(vl_ucep), x_ucep]\nfor i in 1:N\n    p5[i], vc, x_c = UCST_mix(model, T5[i]; v0 = v0)\n    v0 = [log10(vc), x_c]\nend","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"While these represent all the characteristic curves of interest for this mixture, as this mixture exhibits azeotropic behaviour starting from the UCEP and meeting the critical curve, it is possible to also trace this curve using azeotrope_pressure(model,T):","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"T6 = LinRange(T_ucep, minimum(T3), N)\np6 = zeros(N)\n\nv0 = y_ucep\nfor i in 1:N\n    p6[i], vla, vva, x_a = azeotrope_pressure(model, T6[i]; v0 = v0)\n    v0 = x_a\nend","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"And with this, we can complete the phase diagram: (Image: cyhex_meoh_pT_full) Note that there is no formal definition for where the azeotrope meets the critical curve. Thus the end point must be determined ahead of time.","category":"page"},{"location":"tutorials/binary_phase_diagrams/#Type-III-mixture","page":"Binary Phase Diagrams","title":"Type-III mixture","text":"","category":"section"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"The type-III mixture we will be considering is methane+heptane using GERG-2008:","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"julia> model = GERG2008([\"heptane\",\"methane\"])","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"Type-III mixtures are unique as the critical curve is broken into two. If one starts from the less volatile component, we find that the curve does not reconnect with the critical point of the more volatile component: (Image: me_hept_pT_1) Eventually, this curve becomes the UCST curve. However, there is a critical curve originating from the more volatile component However, this time, it terminates at the UCEP. We can repeat the same steps as above to obtain the UCEP: (Image: me_hept_pT) Especially in cases with very different volatilities, it will be very difficult to see the separation between the VLLE, critical and saturation curve as shown above. However, if one zooms in, we can see the three independent curves: (Image: me_hept_pT_zoom)","category":"page"},{"location":"tutorials/binary_phase_diagrams/#Type-IV/V-mixture","page":"Binary Phase Diagrams","title":"Type-IV/V mixture","text":"","category":"section"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"The final class of binary mixture we'll consider is type-IV/V. In these mixtures, we have more than one UCEP. Once again, the critical curve is  broken up into two. However, this time, both of them reconnect on a UCEP. The only difference between type-IV and type-V is that the former has an additional UCEP due to the presence of a UCST curve. As we have already shown how to trace this curve in type-II mixtures, we'll focus on type-V mixtures. In this case, we'll be looking at a mixture of methane and hexane:","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"julia> model = PR([\"hexane\",\"methane\"])","category":"page"},{"location":"tutorials/binary_phase_diagrams/","page":"Binary Phase Diagrams","title":"Binary Phase Diagrams","text":"Examining the critical curve originating from the less-volatile component: (Image: me_hex_pT_1) As we can see, the critical curve overshoots the critical point of the more volatile component. This critical curve will terminate at the first UCEP. The critical curve originating from the more volatile component will terminate at a second UCEP. Connecting the two UCEPs will be the VLLE curve. We have described all the tools needed to trace these curves in earlier section. The result should look like: (Image: me_hex_pT_full) Zooming in to the UCEPs, we see that, much like the previous example, the VLLE curve is very close to the saturation curve of the less-volatile component: (Image: me_hex_pT_zoom)","category":"page"},{"location":"dev/#Developer's-Guide","page":"Developer's Guide","title":"Developer's Guide","text":"","category":"section"},{"location":"dev/#A-deep-dive-on-Clapeyron.jl-property-evaluation","page":"Developer's Guide","title":"A deep dive on Clapeyron.jl property evaluation","text":"","category":"section"},{"location":"dev/#Bulk-properties","page":"Developer's Guide","title":"Bulk properties","text":"","category":"section"},{"location":"dev/#Volume","page":"Developer's Guide","title":"Volume","text":"","category":"section"},{"location":"dev/#Equilibria-properties","page":"Developer's Guide","title":"Equilibria properties","text":"","category":"section"},{"location":"dev/#Clapeyron.jl-database-search-and-instantiation","page":"Developer's Guide","title":"Clapeyron.jl database search and instantiation","text":"","category":"section"},{"location":"dev/#Single-Parameters","page":"Developer's Guide","title":"Single Parameters","text":"","category":"section"},{"location":"dev/#Pair-Parameters","page":"Developer's Guide","title":"Pair Parameters","text":"","category":"section"},{"location":"dev/#Association-Parameters","page":"Developer's Guide","title":"Association Parameters","text":"","category":"section"},{"location":"dev/#Group-Parameters","page":"Developer's Guide","title":"Group Parameters","text":"","category":"section"},{"location":"dev/#split_model-and-index_reduction","page":"Developer's Guide","title":"split_model and index_reduction","text":"","category":"section"},{"location":"to-do_list/#Clapeyron-to-do-list","page":"To-do list","title":"Clapeyron to-do list","text":"","category":"section"},{"location":"to-do_list/","page":"To-do list","title":"To-do list","text":"Clapeyron is developed entirely by three recently graduated chemical engineers in our free time; none of us are experts in writing algorithms but we decided to build this package due to our experience with commercial thermodynamic modelling tools. We will continue developing Clapeyron in our free time but we welcome any contributions you might be willing to make!","category":"page"},{"location":"to-do_list/","page":"To-do list","title":"To-do list","text":"The current plans of Clapeyron are:","category":"page"},{"location":"to-do_list/","page":"To-do list","title":"To-do list","text":"Support more group-contribution (GC) models like SAFT‑gamma SW and GC versions of PC‑SAFT and CK‑SAFT.\nSupport for more ideal terms (NASA, Wilhoit, etc.).\nSupport for flash calculations, first using Rachford–Rice, and eventually HELD and RAND.\nSupport extensions of the SAFT model (e.g. electrolyte methods and dipole terms).\nMake our code the fastest available. Julia makes this easy.","category":"page"},{"location":"api/macros/#Contents","page":"Macros","title":"Contents","text":"","category":"section"},{"location":"api/macros/","page":"Macros","title":"Macros","text":"Pages = [\"macros.md\"]","category":"page"},{"location":"api/macros/#Index","page":"Macros","title":"Index","text":"","category":"section"},{"location":"api/macros/","page":"Macros","title":"Macros","text":"Pages = [\"macros.md\"]","category":"page"},{"location":"api/macros/#Model-Macros","page":"Macros","title":"Model Macros","text":"","category":"section"},{"location":"api/macros/#Clapeyron.@newmodelgc","page":"Macros","title":"Clapeyron.@newmodelgc","text":"@newmodelgc modelname parent paramstype [sitemodel = true, use_struct_param = false]\n\nThis is a data type that contains all the information needed to use an EoS model. It also functions as an identifier to ensure that the right functions are called.\n\nYou can pass an optional 4th Bool argument  indicating if you want to use sites with this model or not. defaults to true\n\nYou can also pass another optional 5th Bool argument indicating if a second order GroupParam (StructGroupParam) is used or not. defaults to false\n\n= Fields = The Struct consists of the following fields:\n\ncomponents: a string lists of components\ngroups: a GroupParam\nsites: a SiteParam (optional)\nparams: the Struct paramstype that contains all parameters in the model\nidealmodel: the IdealModel struct that determines which ideal model to use\nassoc_options: struct containing options for the association solver. see AssocOptions\nreferences: reference for this EoS\n\nSee the tutorial or browse the implementations to see how this is used.\n\n\n\n\n\n","category":"macro"},{"location":"api/macros/#Clapeyron.@newmodel","page":"Macros","title":"Clapeyron.@newmodel","text":"@newmodel name parent paramstype [sitemodel = true]\n\nThis is exactly the same as the above but for non-GC models. All group parameters are absent in this struct. The sites are associated to the main component rather than the groups, and the respective fieldnames are named correspondingly.\n\nYou can pass an optional bool indicating if you want to use sites with this model or not. defaults to true\n\nExample\n\nstruct MySAFTParam\n    a::SingleParam{Float64}\n    b::SingleParam{Float64}\n    epsilon_assoc::AssocParam{Float64}\n    bondvol::AssocParam{Float64}\nend\n\n@newmodel MySAFT SAFTModel MySAFTParam #defines a model, with association sites\n\nstruct MyModelParam\n    a::SingleParam{Float64}\n    b::SingleParam{Float64}\nend\n\n@newmodel MyModel EoSModel MyModelParam false #defines a model without sites\n\n\n\n\n\n","category":"macro"},{"location":"api/macros/#Clapeyron.@newmodelsimple","page":"Macros","title":"Clapeyron.@newmodelsimple","text":"@newmodelsimple name parent paramstype\n\nEven simpler model, primarily for the ideal models. Contains neither sites nor ideal models.\n\n\n\n\n\n","category":"macro"},{"location":"api/macros/#Clapeyron.@newmodelsingleton","page":"Macros","title":"Clapeyron.@newmodelsingleton","text":"@newmodelsingleton name parent\n\nA macro that defines an EoSModel without any fields (\"singleton\" struct.). useful for defining EoS that don't use any parameters, while being composable with other EoSModels.\n\n\n\n\n\n","category":"macro"},{"location":"api/macros/#Clapeyron.@registermodel","page":"Macros","title":"Clapeyron.@registermodel","text":"@registermodel(model)\n\ngiven an existing model, composed of Clapeyron EoS models, ClapeyronParams or EoSParams, it will generate the necessary traits to make the model compatible with Clapeyron routines.\n\ninfo: Info\nThis macro is a no-op from Clapeyron 0.5 onwards.\n\n\n\n\n\n","category":"macro"},{"location":"api/macros/#Functions-used-by-the-Model-Macros","page":"Macros","title":"Functions used by the Model Macros","text":"","category":"section"},{"location":"api/macros/#Clapeyron.default_references","page":"Macros","title":"Clapeyron.default_references","text":"default_references(::Type{<:EoSModel})::Vector{String}\n\nReturn the default references of a model. If you are using the @newmodel, @newmodelsimple or @newmodelgc macros, define this function to set the references for the defined EoS.\n\n\n\n\n\n","category":"function"},{"location":"api/macros/#Clapeyron.default_locations","page":"Macros","title":"Clapeyron.default_locations","text":"default_locations(::Type{T}) where T <: EoSModel\n\nUsed for models defined via the @newmodel, @newmodelsimple or @newmodelgc macros.\n\nDefines the default locations used for parsing the parameters for the input EoSModel type, relative to the database location.\n\n\n\n\n\n","category":"function"},{"location":"api/macros/#Clapeyron.default_gclocations","page":"Macros","title":"Clapeyron.default_gclocations","text":"default_gclocations(::Type{T}) where T <: EoSModel\n\nUsed for models defined via the @newmodel, @newmodelsimple or @newmodelgc macros.\n\nDefines the default locations used for parsing groups for the input EoSModel type, relative to the database location.\n\n\n\n\n\n","category":"function"},{"location":"api/macros/#Clapeyron.default_getparams_arguments","page":"Macros","title":"Clapeyron.default_getparams_arguments","text":"default_getparams_arguments(::Type{T},userlocations,verbose) where T <: EoSModel\n\nUsed for models defined via the @newmodel, @newmodelsimple or @newmodelgc macros.\n\nDefines the ParamsOptions object that is passed as arguments to getparams, when building the input EoSModel.\n\n\n\n\n\n","category":"function"},{"location":"api/macros/#Clapeyron.transform_params","page":"Macros","title":"Clapeyron.transform_params","text":"transform_params(::Type{T},params) where T <: EoSModel\ntransform_params(::Type{T},params,components_or_groups) where T <: EoSModel\ntransform_params(::Type{T},params,components_or_groups,verbose) where T <: EoSModel\n\nUsed for models defined via the @newmodel, @newmodelsimple or @newmodelgc macros.\n\nGiven a collection of params, with (keytype(params)) isa String, returns a modified collection with all the parameters necessary to build the params field contained in the EoSModel.\n\nYou can overload the 2, 3 or 4-argument version, depending on the need of a components vector (or GroupParam in a GC model), or if you want to customize the verbose message.\n\nExample\n\nFor the PC-SAFT equation of state, we perform Lorentz-Berthelot mixing of epsilon and sigma, and we scale the sigma parameters:\n\nfunction transform_params(::Type{PCSAFT},params)\n    segment = params[\"segment\"]\n        k = get(params,\"k\",nothing)\n        params[\"sigma\"].values .*= 1E-10\n        sigma = sigma_LorentzBerthelot(params[\"sigma\"])\n        epsilon = epsilon_LorentzBerthelot(params[\"epsilon\"], k)\n        params[\"sigma\"] = sigma\n        params[\"epsilon\"] = epsilon\n        return params\n    end\n\n\n\n\n\n","category":"function"},{"location":"api/macros/#Utility-Macros","page":"Macros","title":"Utility Macros","text":"","category":"section"},{"location":"api/macros/#Clapeyron.@comps","page":"Macros","title":"Clapeyron.@comps","text":"@comps\n\nThis macro is an alias to 1:length(model) The caveat is that model has to exist in the local namespace. model is expected to any struct that has length defined in terms of the amount of components.\n\n\n\n\n\n","category":"macro"},{"location":"api/macros/#Clapeyron.@groups","page":"Macros","title":"Clapeyron.@groups","text":"@groups\n\nThis macro is an alias to\n\n1:length(model.groups.flattenedgroups)\n\n\n\n\n\n@groups(component)\n\nThis macro is an alias to\n\nmodel.groups.i_groups[component]\n\ni_groups[component] is an iterator that goes through all groups in relevent to a given component.\n\n\n\n\n\n","category":"macro"},{"location":"api/macros/#Clapeyron.@sites","page":"Macros","title":"Clapeyron.@sites","text":"@sites(component)\n\nThis macro is an alias to\n\nmodel.sites.i_sites[component]\n\ni_sites[component] is an iterator that goes through all sites relevant to each group in a GC model, and to each main component in a non-GC model.\n\n\n\n\n\n","category":"macro"},{"location":"api/macros/#Clapeyron.@f","page":"Macros","title":"Clapeyron.@f","text":"@f(func,a,b,c,...)\n\nThis macro is an alias to\n\nfunc(model, V, T, z, a, b, c, ...)\n\nwhere func is the name of the function, model is the model struct, V is the volume, T is the absolute temperature, z is an array of number of moles of each component, and a, b, c, ... are arbitrary parameters that get passed to func.\n\nIt is very common for functions that are involved in the models to contain the model, V, T and z parameters, so this macro helps reduce code repetition as long as the first four parameters in the function are written exactly as above.\n\n\n\n\n\n","category":"macro"},{"location":"api/macros/#Clapeyron.@nan","page":"Macros","title":"Clapeyron.@nan","text":"@nan(function_call,default=NaN)\n\nWraps the function in a try-catch block, and if a DomainError or DivideError is raised, then returns default. for better results, its best to generate the default result beforehand\n\n\n\n\n\n","category":"macro"},{"location":"tutorials/mixing_functions/#Mixing-and-excess-functions","page":"Mixing and Excess Functions","title":"Mixing and excess functions","text":"","category":"section"},{"location":"tutorials/mixing_functions/","page":"Mixing and Excess Functions","title":"Mixing and Excess Functions","text":"The notebooks associated with this tutorial can be found here.","category":"page"},{"location":"tutorials/mixing_functions/","page":"Mixing and Excess Functions","title":"Mixing and Excess Functions","text":"While we showed how one can obtain bulk properties for both pure and multi-component systems, in the case of mixtures specifically, it is often the case that we wish to obtain the mixing function of a property. For a given property, Z. This is defined as:","category":"page"},{"location":"tutorials/mixing_functions/","page":"Mixing and Excess Functions","title":"Mixing and Excess Functions","text":"Delta Z_textmixing = Z_textmixing-sum_i x_iZ_i","category":"page"},{"location":"tutorials/mixing_functions/","page":"Mixing and Excess Functions","title":"Mixing and Excess Functions","text":"where variables denoted by the index refer to properties relating to component i (with x_i being the molar composition of i within the mixture). Due to this easily generalisable definition, rather than defining many mixing_X(model, p, T, n) functions, a single mixing(model, p, T, n, property) function is defined where the property input refers to the property which we wish to obtain the mixing function of. For example, consider the mixing volume of ethanol and water:","category":"page"},{"location":"tutorials/mixing_functions/","page":"Mixing and Excess Functions","title":"Mixing and Excess Functions","text":"julia> model = PCSAFT([\"water\",\"ethanol\"])\nPCSAFT{BasicIdeal, Float64} with 2 components:\n \"water\"\n \"ethanol\"\nContains parameters: Mw, segment, sigma, epsilon, epsilon_assoc, bondvol\n\njulia> mixing(model, 1e5, 298.15, [0.5,0.5], volume)\n-6.762389732537035e-7","category":"page"},{"location":"tutorials/mixing_functions/","page":"Mixing and Excess Functions","title":"Mixing and Excess Functions","text":"The above should hold true for all other bulk properties as well. The results are visualised below: (Image: VE_etoh_water)","category":"page"},{"location":"tutorials/mixing_functions/","page":"Mixing and Excess Functions","title":"Mixing and Excess Functions","text":"Furthermore, another similar property users might be interested is excess functions, which are slightly different than mixing functions:","category":"page"},{"location":"tutorials/mixing_functions/","page":"Mixing and Excess Functions","title":"Mixing and Excess Functions","text":"Delta Z_textexcess = Delta Z_textmixing-Delta Z_textmixing id","category":"page"},{"location":"tutorials/mixing_functions/","page":"Mixing and Excess Functions","title":"Mixing and Excess Functions","text":"where we are now interested in deviations of mixing functions from ideal mixing functions. This is only really relevant in the case of excess Gibbs free energies or excess entropies as, for most other properties, the excess function is identical to the mixing function. The process to obtain these functions is identical to the mixing function mentioned previously where we now have an excess(model, p, T, n, property) function, as demonstrated below for the excess Gibbs free energy (also in the case of water and ethanol):","category":"page"},{"location":"tutorials/mixing_functions/","page":"Mixing and Excess Functions","title":"Mixing and Excess Functions","text":"julia> excess(model, 1e5, 298.15, [0.5,0.5], gibbs_free_energy)\n1100.6568199629164","category":"page"},{"location":"tutorials/mixing_functions/","page":"Mixing and Excess Functions","title":"Mixing and Excess Functions","text":"This is also visualised below: (Image: gE_etoh_water)","category":"page"},{"location":"tutorials/mixing_functions/","page":"Mixing and Excess Functions","title":"Mixing and Excess Functions","text":"tip: Optional Arguments\nAny optional arguments which can be passed to the bulk property functions can also be passed to the mixing and excess functions. See the documentations relating to bulk properties for more details.","category":"page"},{"location":"eos/ideal/#Index","page":"Ideal Models","title":"Index","text":"","category":"section"},{"location":"eos/ideal/","page":"Ideal Models","title":"Ideal Models","text":"Pages = [\"ideal.md\"]","category":"page"},{"location":"eos/ideal/#Ideal-Models","page":"Ideal Models","title":"Ideal Models","text":"","category":"section"},{"location":"eos/ideal/","page":"Ideal Models","title":"Ideal Models","text":"All Clapeyron.jl models can be separated between an ideal and a residual contribution. The ideal contribution can be obtained via integration of the ideal isobaric heat capacity:","category":"page"},{"location":"eos/ideal/","page":"Ideal Models","title":"Ideal Models","text":"fracA_mathrmidealNk_mathrmBT = sum_i=1^N_mathrmComponent x_ileftlnfracrho_irho_0     + frac1Nk_mathrmBT int_T_0^T C_pi^0 dT + fracH_0iNk_mathrmBT- frac1Nk_Bint_T_0^T fracC_pi^0T dT -lnfracTT_0-fracS_0iNk_mathrmB - 1right","category":"page"},{"location":"eos/ideal/","page":"Ideal Models","title":"Ideal Models","text":"Normally, EoS models contain an ideal model. This model can be accessed by using Clapeyron.idealmodel.","category":"page"},{"location":"eos/ideal/#Clapeyron.BasicIdeal","page":"Ideal Models","title":"Clapeyron.BasicIdeal","text":"BasicIdeal <: IdealModel\n\nBasicIdeal(components;\nuserlocations = String[],\nreference_state = nothing,\nverbose = false)\n\nInput parameters\n\nNone\n\nDescription\n\nDefault Ideal Model. Constant specific heat capacity equal to 5R/2. it's Helmholtz energy is equal to:\n\n    a₀ = A₀/nRT = ∑(xᵢlog(nxᵢ/V)) - 1 - 1.5log(T)\n\nModel Construction Examples\n\n# Because this model does not have parameters, all those constructors are equivalent:\nidealmodel = BasicIdeal()\nidealmodel = BasicIdeal(\"water\")\nidealmodel = BasicIdeal([\"water\",\"carbon dioxide\"])\n\n\n\n\n\n","category":"type"},{"location":"eos/ideal/#Clapeyron.ReidIdeal","page":"Ideal Models","title":"Clapeyron.ReidIdeal","text":"ReidIdeal <: IdealModel\n\nReidIdeal(components; \nuserlocations = String[],\nreference_state = nothing,\nverbose = false)\n\nInput parameters\n\na: Single Parameter (Float64) - polynomial coefficient\nb: Single Parameter (Float64) - polynomial coefficient\nc: Single Parameter (Float64) - polynomial coefficient\nd: Single Parameter (Float64) - polynomial coefficient\ne: Single Parameter (optional) (Float64)  - polynomial coefficient\nMw: Single Parameter (Float64) (Optional) - Molecular Weight [g/mol]\n\nModel parameters\n\na: Single Parameter (Float64) - polynomial coefficient\nb: Single Parameter (Float64) - polynomial coefficient\nc: Single Parameter (Float64) - polynomial coefficient\nd: Single Parameter (Float64) - polynomial coefficient\ne: Single Parameter (optional) (Float64)  - polynomial coefficient for 1/T^2\ncoeffs: Single Parameter (NTuple{5,Float64})\nMw: Single Parameter (Float64) (Optional) - Molecular Weight [g/mol]\n\nDescription\n\nReid Ideal Model. Helmholtz energy obtained via integration of specific heat capacity:\n\nCpᵢ(T) = aᵢ  + bᵢT + cᵢT^2 + dᵢT^3 + eᵢT^4\nCp(T) = ∑Cpᵢxᵢ\n\nModel Construction Examples\n\n# Using the default database\nidealmodel = ReidIdeal(\"water\") #single input\nidealmodel = ReidIdeal([\"water\",\"ethanol\"]) #multiple components\n\n# Using user-provided parameters\n\n# Passing files or folders\nidealmodel = ReidIdeal([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"reid.csv\"])\n\n# Passing parameters directly\nidealmodel = ReidIdeal([\"water\",\"butane\"];\n            userlocations = (a = [32.24, 9.487], \n                        b = [0.00192, 0.3313], \n                        c = [1.06e-5, -0.0001108],\n                        d = [-3.6e-9, -2.822e-9],\n                        Mw = [18.01, 58.12])\n                        ) #e is not used\n\n\n\n\n\n","category":"type"},{"location":"eos/ideal/#Clapeyron.JobackIdeal","page":"Ideal Models","title":"Clapeyron.JobackIdeal","text":"JobackIdeal <: JobackIdealModel\n\nJobackIdeal(components; \nuserlocations = String[],\nreference_state = nothing,\nverbose = false)\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nN_a: Single Parameter (Float64)\nT_c: Single Parameter (Float64)\nP_c: Single Parameter (Float64)\nV_c: Single Parameter (Float64)\nT_b: Single Parameter (Float64)\nT_m: Single Parameter (Float64)\nH_form: Single Parameter (Float64)\nG_form: Single Parameter (Float64)\na: Single Parameter (Float64)\nb: Single Parameter (Float64)\nc: Single Parameter (Float64)\nd: Single Parameter (Float64)\nH_fusion: Single Parameter (Float64)\nH_vap: Single Parameter (Float64)\neta_a: Single Parameter (Float64)\neta_b: Single Parameter (Float64)\n\nDescription\n\nJoback Group Contribution Ideal Model. GC version of ReidIdeal. Helmholtz energy obtained via integration of specific heat capacity:\n\naᵢ = ∑(νᵢₖbₖ) - 37.93\nbᵢ = ∑(νᵢₖbₖ) + 0.210\ncᵢ = ∑(νᵢₖcₖ) - 3.91e-4\ndᵢ = ∑(νᵢₖbₖ) + 2.06e-7\nCpᵢ(T) = aᵢ  + bᵢT + cᵢT^2 + dᵢT^3\n\nThe GC-averaged Reid Model is available by using ReidIdeal(model::JobackIdeal).\n\nThe estimated critical point of a single component can be obtained via crit_pure(model::JobackIdeal)\n\nReferences\n\nJoback, K. G., & Reid, R. C. (1987). Estimation of pure-component properties from group-contributions. Chemical Engineering Communications, 57(1–6), 233–243. doi:10.1080/00986448708960487\n\nList of available groups\n\nName Description\n-CH3 Methyl\n-CH2- Methylene\n>CH- \n>C< \nCH2=CH- \n-CH=CH- \n=C< \n=C= \nCH \nC \nring-CH2- Cyclic alkane\nring>CH- \nring>C< \nring=CH- Aromatic group\nring=C< \n-F Fluoride\n-Cl Chloride\n-Br Bromide\n-I Iodide\n-OH (alcohol) Hydroxyl group\n-OH (phenol) \n-O- (non-ring) \n-O- (ring) \n>C=O (non-ring) Ketone\n>C=O (ring) \nO=CH- (aldehyde) Aldehyde\n-COOH (acid) Carboxylic acid\n-COO- (ester) Ester\nO (other than above) Ketone\n-NH2 Amine\n>NH (non-ring) \n>NH (ring) \n>N- (non-ring) \n-N= (non-ring) \n-N= (ring) \n=NH \n-CN Nitrile\n-NO3 Nitroxide\n-SH \n-S- (non-ring) \n-S- (ring) \n\n\n\n\n\n","category":"type"},{"location":"eos/ideal/#Clapeyron.MonomerIdeal","page":"Ideal Models","title":"Clapeyron.MonomerIdeal","text":"MonomerIdeal <: MonomerIdealModel\n\nMonomerIdeal(components; \nuserlocations = String[],\nreference_state = nothing,\nverbose = false)\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\n\nModel Parameters\n\nNone\n\nDescription\n\nMonomer Ideal Model, result obtained from statistical mechanics Λ\n\n    Λᵢ = h/√(kᵦTMwᵢ/Nₐ)    \n    a₀ = A₀/nRT = ∑xᵢlog(ρᵢΛᵢ^3)\n\nModel Construction Examples\n\n# Using the default database\nidealmodel = MonomerIdeal(\"water\") #single input\nidealmodel = MonomerIdeal([\"water\",\"ethanol\"]) #multiple components\n\n# Using user-provided parameters\n\n# Passing files or folders\nidealmodel = MonomerIdeal([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"mw.csv\"])\n\n# Passing parameters directly\nidealmodel = MonomerIdeal([\"neon\",\"hydrogen\"];userlocations = (;Mw = [20.17, 2.]))\n\n\n\n\n\n","category":"type"},{"location":"eos/ideal/#Clapeyron.WalkerIdeal","page":"Ideal Models","title":"Clapeyron.WalkerIdeal","text":"WalkerIdeal <: WalkerIdealModel\n\nWalkerIdeal(components; \nuserlocations = String[],\ngroup_userlocations = String[]\nverbose = false)\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nNrot: Single Parameter (Int)\ntheta1: Single Parameter (Float64)\ntheta2: Single Parameter (Float64)\ntheta3: Single Parameter (Float64)\ntheta4: Single Parameter (Float64)\ndeg1: Single Parameter (Int)\ndeg2: Single Parameter (Int)\ndeg3: Single Parameter (Int)\ndeg4: Single Parameter (Int)\n\nDescription\n\nWalker [1] Group Contribution Ideal Model.\n\nCpᵢ(T)/R = (5+NRot)/2 ∑νᵢₖ∑gₖᵥ(θₖᵥ/T)^2*exp(θₖᵥ/T)/(1-exp(θₖᵥ/T)) , v ∈ 1:4 \n\nReferences\n\nWalker, P. J., & Haslam, A. J. (2020). A new predictive group-contribution ideal-heat-capacity model and its influence on second-derivative properties calculated using a free-energy equation of state. Journal of Chemical and Engineering Data, 65(12), 5809–5829. doi:10.1021/acs.jced.0c00723\n\n\n\n\n\n","category":"type"},{"location":"eos/ideal/#Clapeyron.LJRefIdeal","page":"Ideal Models","title":"Clapeyron.LJRefIdeal","text":"LJRefIdeal <: IdealModel\nLJRef(components;\nuserlocations = String[],\nverbose = false)\n\nInput parameters\n\nsigma: Single Parameter (Float64) - particle size [Å]\nepsilon: Single Parameter (Float64) - dispersion energy [K]\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\n\nDescription\n\nLennard-Jones Reference equation of state. Ideal Part. valid from 0.5 < T/Tc < 7 and pressures up to p/pc = 500.\n\nτᵢ = 1.32ϵᵢ/T\nδᵢ = n(Nₐσᵢ^3)/0.31V\na⁰ᵢ(δ,τ) = log(δᵢ) + 1.5log(τᵢ) - 1.515151515τᵢ + 6.262265814\na⁰(δ,τ,z) = ∑xᵢ(a⁰ᵢ + log(xᵢ))\n\n\nLJRefIdeal acts as a wrapper of LJRef model, you can access it with LJRef(model::LJRefIdeal).\n\nwarning: Mutiple component warning\nThe original model was done with only one component in mind. to support multiple components, a VDW 1-fluid mixing rule (shown above) is implemented, but it is not tested.\n\nReferences\n\nThol, M., Rutkai, G., Köster, A., Lustig, R., Span, R., & Vrabec, J. (2016). Equation of state for the Lennard-Jones fluid. Journal of physical and chemical reference data, 45(2), 023101. doi:10.1063/1.4945000\n\n\n\n\n\n","category":"type"},{"location":"eos/ideal/#Clapeyron.AlyLeeIdeal","page":"Ideal Models","title":"Clapeyron.AlyLeeIdeal","text":"AlyLeeIdeal <: AlyLeeIdealModel\n\nAlyLeeIdeal(components; \nuserlocations = String[],\nreference_state = nothing,\nverbose = false)\n\nInput parameters\n\nA: Single Parameter (Float64) - Model Coefficient\nB: Single Parameter (Float64) - Model Coefficient\nC: Single Parameter (Float64) - Model Coefficient\nD: Single Parameter (Float64) - Model Coefficient\nE: Single Parameter (Float64) - Model Coefficient\nF: Single Parameter (Float64) - Model Coefficient\nG: Single Parameter (Float64) - Model Coefficient\nH: Single Parameter (Float64) - Model Coefficient\nI: Single Parameter (Float64) - Model Coefficient\nMw: Single Parameter (Float64) (Optional) - Molecular Weight [g/mol]\n\nDescription\n\nAly-Lee Ideal Model (extended):\n\nCpᵢ(T)/R = A + B(CT⁻¹/sinh(CT⁻¹))² + D(ET⁻¹/cosh(ET⁻¹))² + F(GT⁻¹/sinh(GT⁻¹))² + H(IT⁻¹/cosh(IT⁻¹))²\n\nModel Construction Examples\n\n# Using the default database\nidealmodel = AlyLeeIdeal(\"water\") #single input\nidealmodel = AlyLeeIdeal([\"water\",\"ethanol\"]) #multiple components\n\n# Using user-provided parameters\n\n# Passing files or folders\nidealmodel = AlyLeeIdeal([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"alylee.csv\"])\n\n# Passing parameters directly\nidealmodel = AlyLeeIdeal([\"water\",\"carbon dioxide\"];\n                        userlocations = (A = [4.004, 3.5],\n                        B = [0.01, 2.044],\n                        C = [268.8, 919.3],\n                        D = [0.99, -1.06],\n                        E = [1141.4, -865.1],\n                        F = [3.07, 2.034],\n                        G = [2507.37, 483.55],\n                        H = [0.0, 0.0139],\n                        I = [0.0, 341.11])\n                        )\n\nReferences\n\nAly, F. A., & Lee, L. L. (1981). Self-consistent equations for calculating the ideal gas heat capacity, enthalpy, and entropy. Fluid Phase Equilibria, 6(3–4), 169–179. doi:10.1016/0378-3812(81)85002-9\n\n\n\n\n\n","category":"type"},{"location":"eos/ideal/#Clapeyron.PPDSIdeal","page":"Ideal Models","title":"Clapeyron.PPDSIdeal","text":"PPDSIdeal <: PPDSIdealModel\n\nPPDSIdeal(components;\nuserlocations = String[],\nreference_state = nothing,\nverbose = false)\n\nInput parameters\n\nA: Single Parameter (Float64) - Model Coefficient\nB: Single Parameter (Float64) - Model Coefficient\nC: Single Parameter (Float64) - Model Coefficient\nD: Single Parameter (Float64) - Model Coefficient\nE: Single Parameter (Float64) - Model Coefficient\nF: Single Parameter (Float64) - Model Coefficient\nG: Single Parameter (Float64) - Model Coefficient\nMw: Single Parameter (Float64) (Optional) - Molecular Weight [g/mol]\n\nDescription\n\nPPDS Ideal Model:\n\nCpᵢ(T)/R = B + (C - B)y²[1 + (y − 1)(D + Ey + Fy² + Gy³)]\ny = T/(A + T)\n\nModel Construction Examples\n\n# Using the default database\nidealmodel = PPDSIdeal(\"water\") #single input\nidealmodel = PPDSIdeal([\"water\",\"ethanol\"]) #multiple components\n\n# Using user-provided parameters\n\n# Passing files or folders\nidealmodel = PPDSIdeal([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"alylee.csv\"])\n\n# Passing parameters directly\nidealmodel = PPDSIdeal([\"water\",\"carbon dioxide\"];\n                        userlocations = (A = [4.004, 3.5],\n                        B = [0.01, 2.044],\n                        C = [268.8, 919.3],\n                        D = [0.99, -1.06],\n                        E = [1141.4, -865.1],\n                        F = [3.07, 2.034],\n                        G = [2507.37, 483.55],\n                        H = [0.0, 0.0139],\n                        I = [0.0, 341.11])\n                        )\n\nReferences\n\nGmehling, J., Kleiber, M., Kolbe, B., & Rarey, J. (2019). Chemical thermodynamics for process simulation (2nd ed.). Berlin, Germany: Blackwell Verlag.\n\n\n\n\n\n","category":"type"},{"location":"eos/electrolytes/#Index","page":"-","title":"Index","text":"","category":"section"},{"location":"eos/electrolytes/","page":"-","title":"-","text":"Pages = [\"electrolytes.md\"]","category":"page"},{"location":"eos/electrolytes/#Main-model","page":"-","title":"Main model","text":"","category":"section"},{"location":"eos/electrolytes/#Clapeyron.ESElectrolyte","page":"-","title":"Clapeyron.ESElectrolyte","text":"ESElectrolyte(solvents::Array{String,1}, \n    ions::Array{String,1}; \n    idealmodel::IdealModel = BasicIdeal,\n    neutralmodel::EoSModel = pharmaPCSAFT,\n    ionmodel::IonModel = DH,\n    RSPmodel::RSPModel = ConstRSP,\n    userlocations::Vector{String}=[],\n    ideal_userlocations::Vector{String}=[],\n    verbose::Bool=false)\n\nDescription\n\nThis function provides the necessary framework to create an electrolyte model by combining ideal, neutral and ion models:\n\nmodel = ESElectrolyte([\"water\"],[\"sodium\",\"chloride\"];\n            idealmodel = BasicIdeal,\n            neutralmodel = pharmaPCSAFT,\n            ionmodel = DH,\n            RSPmodel = ConstRSP)  \n\nAny of the available models in Clapeyron can be combined in the above. Note that neutral (solvent) species and ions are defined separately. Within Clapeyron, we will only support ion-based electrolyte models; as such, any salt-based approach (i.e. where the salt is treated as a separate species) will not be supported. \n\n\n\n\n\n","category":"type"},{"location":"eos/electrolytes/#Ion-Models","page":"-","title":"Ion Models","text":"","category":"section"},{"location":"eos/electrolytes/#Clapeyron.Born","page":"-","title":"Clapeyron.Born","text":"Born(solvents::Array{String,1},\n    salts::Array{String,1};\n    RSPmodel = ConstRSP,\n    userlocations = String[],\n    RSPmodel_userlocations = String[],\n    verbose = false)\n\nInput parameters\n\nsigma_born: Single Parameter (Float64) - Born Diameter [m]\ncharge: Single Parameter (Float64) - Charge [-]\n\nInput models\n\nRSPmodel: Relative Static Permittivity Model\n\nDescription\n\nThis function is used to create a Born model. The Born term gives the excess Helmholtz energy to account for the electrostatic interactions between ions in solution.\n\nReferences\n\nBorn, M. (1920). Z. Phys. 1, 45.\n\n\n\n\n\n","category":"type"},{"location":"eos/electrolytes/#Clapeyron.DH","page":"-","title":"Clapeyron.DH","text":"DH(solvents::Array{String,1},\n    ions::Array{String,1};\n    RSPmodel = ConstRSP,\n    userlocations = String[],\n    RSPmodel_userlocations = String[],\n    verbose = false)\n\nInput parameters\n\nsigma: Single Parameter (Float64) - Diameter of closest approach [m]\ncharge: Single Parameter (Float64) - Charge [-]\n\nInput models\n\nRSPmodel: Relative Static Permittivity Model\n\nDescription\n\nThis function is used to create a Debye-Hückel model. The Debye-Hückel term gives the excess Helmholtz energy to account for the electrostatic interactions between ions in solution.\n\nReferences\n\nDebye, P., Huckel, E. (1923). Phys. Z. 24, 185.\n\n\n\n\n\n","category":"type"},{"location":"eos/electrolytes/#Clapeyron.MSA","page":"-","title":"Clapeyron.MSA","text":"MSA(solvents::Array{String,1},\n    ions::Array{String,1};\n    RSPmodel = ConstRSP,\n    userlocations = String[],\n    RSPmodel_userlocations = String[],\n    verbose = false)\n\nInput parameters\n\nsigma: Single Parameter (Float64) - Hard-sphere diameter [m]\ncharge: Single Parameter (Float64) - Charge [-]\n\nInput models\n\nRSPmodel: Relative Static Permittivity Model\n\nDescription\n\nThis function is used to create a Mean Spherical Approximation model. The MSA term gives the excess Helmholtz energy to account for the electrostatic interactions between ions in solution.\n\nReferences\n\nBlum, L. (1974). Solution of a model for the solvent‐electrolyte interactions in the mean spherical approximation, 61, 2129–2133.\n\n\n\n\n\n","category":"type"},{"location":"eos/electrolytes/#Clapeyron.DHBorn","page":"-","title":"Clapeyron.DHBorn","text":"DHBorn(solvents::Array{String,1},\n    ions::Array{String,1};\n    RSPmodel = ConstRSP,\n    userlocations = String[],\n    RSPmodel_userlocations = String[],\n    verbose = false)\n\nInput parameters\n\nsigma: Single Parameter (Float64) - Diameter of closest approach [m]\nsigma_born: Single Parameter (Float64) - Born Diameter [m]\ncharge: Single Parameter (Float64) - Charge [-]\n\nInput models\n\nRSPmodel: Relative Static Permittivity Model\n\nDescription\n\nThis function is used to create a Debye-Hückel-Born model. The Debye-Hückel-Born term gives the excess Helmholtz energy to account for the electrostatic interactions between ions in solution.\n\nReferences\n\nDebye, P., Huckel, E. (1923). Phys. Z. 24, 185.\nBorn, M. (1920). Z. Phys. 1, 45.\n\n\n\n\n\n","category":"type"},{"location":"eos/electrolytes/#Clapeyron.MSABorn","page":"-","title":"Clapeyron.MSABorn","text":"MSABorn(solvents::Array{String,1},\n    ions::Array{String,1};\n    RSPmodel = ConstRSP,\n    userlocations = String[],\n    RSPmodel_userlocations = String[],\n    verbose = false)\n\nInput parameters\n\nsigma: Single Parameter (Float64) - Hard-sphere diameter [m]\nsigma_born: Single Parameter (Float64) - Born Diameter [m]\ncharge: Single Parameter (Float64) - Charge [-]\n\nInput models\n\nRSPmodel: Relative Static Permittivity Model\n\nDescription\n\nThis function is used to create a Mean Spherical Approximation-Born model. The MSA-Born term gives the excess Helmholtz energy to account for the electrostatic interactions between ions in solution.\n\nReferences\n\nBlum, L. (1974). Solution of a model for the solvent‐electrolyte interactions in the mean spherical approximation, 61, 2129–2133.\nBorn, M. (1920). Z. Phys. 1, 45.\n\n\n\n\n\n","category":"type"},{"location":"eos/electrolytes/#Clapeyron.GCMSABorn","page":"-","title":"Clapeyron.GCMSABorn","text":"GCMSABorn(solvents::Array{String,1},\n     ions::Array{String,1};\n     RSPmodel=ConstRSP,\n     SAFTlocations=String[],\n     userlocations=String[],\n     verbose=false)\n\nInput parameters\n\nsigma: Single Parameter (Float64) - Hard-sphere diameter [m]\nsigma_born: Single Parameter (Float64) - Born Diameter [m]\ncharge: Single Parameter (Float64) - Charge [-]\n\nInput models\n\nRSPmodel: Relative Static Permittivity Model\n\nDescription\n\nThis function is used to create a group-contribution Mean Spherical Approximation-Born model used in SAFT-gamma E Mie\n\n\n\n\n\n","category":"type"},{"location":"eos/electrolytes/#Electrolyte-Models","page":"-","title":"Electrolyte Models","text":"","category":"section"},{"location":"eos/electrolytes/#Clapeyron.ePCSAFT","page":"-","title":"Clapeyron.ePCSAFT","text":"ePCSAFT(solvents::Array{String,1}, \n    ions::Array{String,1}; \n    idealmodel::IdealModel = BasicIdeal,\n    neutralmodel::EoSModel = pharmaPCSAFT,\n    ionmodel::IonModel = DH,\n    RSPmodel::RSPModel = ConstRSP,\n    userlocations::Vector{String} = [],\n    ideal_userlocations::Vector{String} = [],\n    assoc_options::AssocOptions = AssocOptions(),\n    verbose::Bool = false,\n    reference_state = nothing)\n\nDescription\n\nThis function is used to create an ePCSAFT model which is a combination of the PC-SAFT and Debye-Hückel model. It is based on the ePC-SAFT Revised variant.\n\nInput parameters\n\nPC-SAFT Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Single Parameter (Float64) - Segment Diameter [A°]\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K]\nk: Pair Parameter (Float64) (optional) - Binary Interaction Paramater (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume [m^3]\n\nDebye-Hückel Parameters\n\nsigma: Single Parameter (Float64) - Diameter of closest approach [m]\ncharge: Single Parameter (Float64) - Charge [-]\n\nInput models\n\nidealmodel: Ideal Model\nneutralmodel: Neutral EoS Model\nionmodel: Ion Model\n\nReferences\n\nHeld, C., Reschke, T., Mohammad, S., Luza, A., Sadowski, G. (2014). ePC-SAFT Revised. Chemical Engineering Research and Design, 92(12), 2884-2897.\n\n\n\n\n\n","category":"type"},{"location":"eos/electrolytes/#Clapeyron.eSAFTVRMie","page":"-","title":"Clapeyron.eSAFTVRMie","text":"eSAFTVRMie(solvents::Array{String,1}, \n    ions::Array{String,1}; \n    idealmodel::IdealModel = BasicIdeal,\n    neutralmodel::EoSModel = SAFTVRMie15,\n    ionmodel::IonModel = DHBorn,\n    RSPmodel::RSPModel = ZuoFurst,\n    userlocations::Vector{String} = [],\n    ideal_userlocations::Vector{String} = [],\n    assoc_options::AssocOptions = AssocOptions(),\n    verbose::Bool = false,\n    reference_state = nothing)\n\nDescription\n\nThis function is used to create an eSAFTVRMie model which is a combination of the SAFTVR-Mie, Debye-Hückel and Born models.\n\nInput parameters\n\nSAFT-VR Mie Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Single Parameter (Float64) - Segment Diameter [A°]\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K]\nlambda_a: Pair Parameter (Float64) - Atractive range parameter (no units)\nlambda_r: Pair Parameter (Float64) - Repulsive range parameter (no units)\nk: Pair Parameter (Float64) (optional) - Binary Interaction Paramater (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume [m^3]\n\nDebye-Hückel Parameters\n\nsigma: Single Parameter (Float64) - Diameter of closest approach [m]\ncharge: Single Parameter (Float64) - Charge [-]\n\nBorn Parameters\n\nsigma_born: Single Parameter (Float64) - Born Diameter [m]\ncharge: Single Parameter (Float64) - Charge [-]\n\nInput models\n\nidealmodel: Ideal Model\nneutralmodel: Neutral EoS Model\nionmodel: Ion Model\n\nReferences\n\nSelam, M., Economou, I., Castier, M. (2018). A thermodynamic model for strong aqueous electrolytes based on the eSAFT-VR Mie equation of state. Fluid Phase Equilibria, 464, 47-63.\n\n\n\n\n\n","category":"type"},{"location":"eos/electrolytes/#Clapeyron.SAFTVREMie","page":"-","title":"Clapeyron.SAFTVREMie","text":"SAFTVREMie(solvents::Array{String,1}, \n    ions::Array{String,1}; \n    idealmodel::IdealModel = BasicIdeal,\n    neutralmodel::EoSModel = SAFTVRMie,\n    ionmodel::IonModel = MSABorn,\n    RSPmodel::RSPModel = Schreckenberg,\n    userlocations::Vector{String} = [],\n    ideal_userlocations::Vector{String} = [],\n    assoc_options::AssocOptions = AssocOptions(),\n    verbose::Bool = false,\n    reference_state = nothing)\n\nDescription\n\nThis function is used to create an SAFT-VRE Mie model which is a combination of the SAFT-VR Mie, MSA and Born models.\n\nInput parameters\n\nSAFT-VR Mie Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Single Parameter (Float64) - Segment Diameter [A°]\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K]\nlambda_a: Pair Parameter (Float64) - Atractive range parameter (no units)\nlambda_r: Pair Parameter (Float64) - Repulsive range parameter (no units)\nk: Pair Parameter (Float64) (optional) - Binary Interaction Paramater (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume [m^3]\n\nMSA Parameters\n\nsigma: Single Parameter (Float64) - Diameter of closest approach [m]\ncharge: Single Parameter (Float64) - Charge [-]\n\nBorn Parameters\n\nsigma_born: Single Parameter (Float64) - Born Diameter [m]\ncharge: Single Parameter (Float64) - Charge [-]\n\nInput models\n\nidealmodel: Ideal Model\nneutralmodel: Neutral EoS Model\nionmodel: Ion Model\n\nReferences\n\nEriksen, D.K., Lazarou, G., Galindo, A., Jackson, G., Adjiman, C.S., & Haslam, A.J. (2016). Development of intermolecular potential models for electrolyte solutions using an electrolyte SAFT-VR Mie equation of state. Molecular Physics, 114(18), 2724-2749.\n\n\n\n\n\n","category":"function"},{"location":"eos/electrolytes/#Clapeyron.SAFTgammaEMie","page":"-","title":"Clapeyron.SAFTgammaEMie","text":"SAFTgammaEMie(solvents::Array{String,1}, \n    ions::Array{String,1}; \n    idealmodel::IdealModel = BasicIdeal,\n    neutralmodel::EoSModel = SAFTgammaMie,\n    ionmodel::IonModel = GCMSABorn,\n    RSPmodel::RSPModel = Schreckenberg,\n    userlocations::Vector{String} = [],\n    ideal_userlocations::Vector{String} = [],\n    assoc_options::AssocOptions = AssocOptions(),\n    verbose::Bool = false)\n\nDescription\n\nThis function is used to create an SAFT-gammaE Mie model which is a combination of the SAFT-gamma Mie, MSA and Born models.\n\nInput parameters\n\nSAFT-VR Mie Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nvst: Single Parameter (Float64) - Number of segments (no units)\nS: Single Parameter (Float64) - Shape factor for segment (no units)\nsigma: Single Parameter (Float64) - Segment Diameter [A°]\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K]\nlambda_a: Pair Parameter (Float64) - Atractive range parameter (no units)\nlambda_r: Pair Parameter (Float64) - Repulsive range parameter (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume\n\nMSA Parameters\n\nsigma: Single Parameter (Float64) - Diameter of closest approach [m]\ncharge: Single Parameter (Float64) - Charge [-]\n\nBorn Parameters\n\nsigma_born: Single Parameter (Float64) - Born Diameter [m]\ncharge: Single Parameter (Float64) - Charge [-]\n\nInput models\n\nidealmodel: Ideal Model\nneutralmodel: Neutral EoS Model\nionmodel: Ion Model\n\nReferences\n\nHaslam, A.J., González-Pérez, A., Di Lecce, S., Khalit, S.H., Perdomo, F.A., Kournopoulos, S., Kohns, M., Lindeboom, T., Wehbe, M., Febra, S., Jackson, G., Adjiman, C.S. & Galind, A. (2020). Expanding the Applications of the SAFT-γ Mie Group-Contribution Equation of State: Prediction of Thermodynamic Properties and Phase Behavior of Mixtures. Journal of Chemical Engineering Data, 65(12), 5862–5890\n\n\n\n\n\n","category":"function"},{"location":"eos/electrolytes/#Relative-Static-Permittivity-Models","page":"-","title":"Relative Static Permittivity Models","text":"","category":"section"},{"location":"eos/electrolytes/#Clapeyron.ConstRSP","page":"-","title":"Clapeyron.ConstRSP","text":"ConstRSP(solvents::Array{String,1},\n    ions::Array{String,1};\n    userlocations::Vector{String}=[],\n    value::Float64 = 78.38484961,\n    verbose::Bool=false)\n\nConstRSP(val::Float64)\n\nInput parameters\n\nvalue::Float64: Constant Relative Static Permittivity [-]\n\nDescription\n\nThis function is used to create a constant Relative Static Permittivity model, given by value.\n\n\n\n\n\n","category":"type"},{"location":"eos/electrolytes/#Clapeyron.LinMixRSP","page":"-","title":"Clapeyron.LinMixRSP","text":"LinMixRSP(solvents::Array{String,1},\n     ions::Array{String,1};\n     userlocations::Vector{String}=[],\n     verbose::Bool=false)\n\nInput parameters\n\ndielectric_constant::Float64: Constant Relative Static Permittivity [-]\n\nDescription\n\nThis function is used to create a Linear Mixing-Rule Relative Static Permittivity model, for a mixture of solvents, where each solvent has a dielectric_constant.\n\n\n\n\n\n","category":"type"},{"location":"eos/electrolytes/#Clapeyron.Schreckenberg","page":"-","title":"Clapeyron.Schreckenberg","text":"Schreckenberg(solvents::Array{String,1},\n     ions::Array{String,1};\n     userlocations::Vector{String}=[],\n     verbose::Bool=false)\n\nInput parameters\n\nd_T::Float64: Single Parameter - Temperature dependent dielectric constant [-]\nd_V::Float64: Single Parameter - Volume dependent dielectric constant [-]\ncharge::Float64: Single Parameter - Charge [-]\n\nDescription\n\nThis function is used to create a Schreckenberg model. The Schreckenberg term estimates the dielectric constant for a mixture of solvents.\n\nReferences\n\nSchreckenberg, J., Dufal, S., Haslam, A.J., Adjiman, C.S., Jackson, G., Galindo, A. (2014). Modelling of the thermodynamic and solvation properties of electrolyte solutions with the statistical associating fluid theory for potentials of variable range. Molecular Physics, 112(17), 2339-2364.\n\n\n\n\n\n","category":"type"},{"location":"eos/electrolytes/#Clapeyron.ZuoFurst","page":"-","title":"Clapeyron.ZuoFurst","text":"ZuoFurst(solvents::Array{String,1},\n     ions::Array{String,1};\n     userlocations::Vector{String}=[],\n     verbose::Bool=false)\n\nDescription\n\nThis function is used to create a Zuo-First model. The Zuo-First expression estimates the dielectric constant of water for a range of temperatures.\n\nReferences\n\nZuo, Y-X., Fürst, W. (1997). Prediction of vapor pressure for nonaqueous electrolyte solutions using an electrolyte equation of state, Fluid Phase Equilibria, 138(1-2), 87-104.\n\n\n\n\n\n","category":"type"},{"location":"properties/bulk/#Contents","page":"Bulk Properties","title":"Contents","text":"","category":"section"},{"location":"properties/bulk/","page":"Bulk Properties","title":"Bulk Properties","text":"Pages = [\"bulk.md\"]","category":"page"},{"location":"properties/bulk/#Index","page":"Bulk Properties","title":"Index","text":"","category":"section"},{"location":"properties/bulk/","page":"Bulk Properties","title":"Bulk Properties","text":"Pages = [\"bulk.md\"]","category":"page"},{"location":"properties/bulk/#Volume–Temperature-Based-Properties","page":"Bulk Properties","title":"Volume–Temperature Based Properties","text":"","category":"section"},{"location":"properties/bulk/#Clapeyron.pressure","page":"Bulk Properties","title":"Clapeyron.pressure","text":"pressure(model::EoSModel, V, T, z=SA[1.])\n\ndefault units: [Pa]\n\nReturns the pressure of the model at a given volume, temperature and composition, defined as:\n\np = -∂A/∂V\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.second_virial_coefficient","page":"Bulk Properties","title":"Clapeyron.second_virial_coefficient","text":"second_virial_coefficient(model::EoSModel, T, z=SA[1.])\n\nDefault units: [m^3]\n\nCalculates the second virial coefficient B, defined as:\n\nB = lim(ρ->0)[∂Aᵣ/∂ρ]\n\nwhere Aᵣ is the residual helmholtz energy.\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.pip","page":"Bulk Properties","title":"Clapeyron.pip","text":"pip(model::EoSModel,V,T,z=[1.0])\n\nPhase identification parameter Π. as described in 1. If Π > 1, then the phase is clasified as a liquid or a liquid-like vapor, being a vapor or vapor-like liquid otherwise.\n\nThis identification parameter fails at temperatures and pressures well aboVe the critical point.\n\nCalculated as:\n\nΠ = V*((∂²p/∂V∂T)/(∂p/∂T) - (∂²p/∂V²)/(∂p/∂V))\n\nG. Venkatarathnama, L.R. Oellrich, Identification of the phase of a fluid using partial derivatives of pressure, volume,and temperature without reference to saturation properties: Applications in phase equilibria calculations, Fluid Phase Equilibria 301 (2011) 225–233\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Pressure–Temperature-Based-Bulk-Properties","page":"Bulk Properties","title":"Pressure–Temperature Based Bulk Properties","text":"","category":"section"},{"location":"properties/bulk/","page":"Bulk Properties","title":"Bulk Properties","text":"In general almost all bulk properties follow the pattern:","category":"page"},{"location":"properties/bulk/","page":"Bulk Properties","title":"Bulk Properties","text":"function property(model::EoSModel, p, T, z=SA[1.]; phase=:unknown, threaded=true, vol0=nothing)\n    V = volume(model, p, T, z; phase, threaded, vol0)\n    return VT_property(model,V,T,z)\nend","category":"page"},{"location":"properties/bulk/","page":"Bulk Properties","title":"Bulk Properties","text":"So, you can calculate the property with Volume–Temperature variables by calling VT_property(model,V,T,z). Another way to do this is by using units, provided by Unitful.jl:","category":"page"},{"location":"properties/bulk/","page":"Bulk Properties","title":"Bulk Properties","text":"using Unitful\nr = 18u\"kg/m^3\"\nT = 373.15\"K\"\nprop = helmholtz_free_energy(model,r,T,z,output = u\"kJ\")","category":"page"},{"location":"properties/bulk/","page":"Bulk Properties","title":"Bulk Properties","text":"Where r could be any molar or mass density, molar or mass volume, total volume or pressure. It also supports mass and mol amounts defined as units for the composition (z). If no units are provided for the composition, they will be considered moles.","category":"page"},{"location":"properties/bulk/#Methods-that-require-first-order-VT-derivatives","page":"Bulk Properties","title":"Methods that require first order VT derivatives","text":"","category":"section"},{"location":"properties/bulk/#Clapeyron.volume","page":"Bulk Properties","title":"Clapeyron.volume","text":"volume(model::EoSModel, p, T, z=SA[1.0]; phase=:unknown, threaded=true, vol0=nothing)\n\nCalculates the volume (m³) of the compound modelled by model at a certain pressure, temperature and moles. phase is a Symbol that determines the initial volume root to look for:\n\nIf phase =:unknown (Default), it will return the physically correct volume root with the least gibbs energy.\nIf phase =:liquid, it will return the volume of the phase using a liquid initial point.\nIf phase =:vapor, it will return the volume of the phase using a gas initial point.\nIf phase =:solid, it will return the volume of the phase using a solid initial point (only supported for EoS that support a solid phase)\nIf phase =:stable, it will return the physically correct volume root with the least gibbs energy, and perform a stability test on the result.\n\nAll volume calculations are checked for mechanical stability, that is: dP/dV <= 0.\n\nThe calculation of both volume roots can be calculated in serial (threaded=false) or in parallel (threaded=true).\n\nAn initial estimate of the volume vol0 can be optionally be provided.\n\ntip: Tip\nThe volume computation may fail and return NaN because the default initial point is too far from the actual volume. Providing a value for vol0 may help in these situations. Such a starting point can be found from physical knowledge, or by computing the volume using a different model for example.\n\nwarning: Stability checks\nThe stability check is disabled by default. that means that the volume obtained just follows the the relation P = pressure(model,V,T,z). For single component models, this is alright, but phase splits (with different compositions that the input) can and will occur, meaning that the volume solution does not correspond to an existing phase. For unknown multicomponent mixtures, it is recommended to use a phase equilibrium procedure (like tp_flash) to obtain a list of valid compositions, and then perform a volume calculation over those compositions. You can also pass phase=:stable to perform the stability test inside the volume solver. Finally, you can perform the stability test after the volume solver:v = volume(model,p,T,z)\nisstable(model,v,T,z)\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.helmholtz_free_energy","page":"Bulk Properties","title":"Clapeyron.helmholtz_free_energy","text":"helmholtz_free_energy(model::EoSModel, p, T, z=SA[1.]; phase=:unknown, threaded=true, vol0=nothing)\nhelmholtz_energy(model::EoSModel, p, T, z=SA[1.]; phase=:unknown, threaded=true, vol0=nothing)\n\nDefault units: [J]\n\nCalculates the helmholtz free energy, defined as:\n\nA = eos(model,V(p),T,z)\n\nInternally, it calls Clapeyron.volume to obtain V and calculates the property via VT_helmholtz_free_energy(model,V,T,z).\n\nThe keywords phase, threaded and vol0 are passed to the Clapeyron.volume solver.\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.helmholtz_free_energy_res","page":"Bulk Properties","title":"Clapeyron.helmholtz_free_energy_res","text":"helmholtz_free_energy_res(model::EoSModel, p, T, z=SA[1.]; phase=:unknown, threaded=true, vol0=nothing)\nhelmholtz_energy_res(model::EoSModel, p, T, z=SA[1.]; phase=:unknown, threaded=true, vol0=nothing)\n\nDefault units: [J]\n\nCalculates the residual helmholtz free energy, defined as:\n\nA = eos_res(model,V(p),T,z)\n\nInternally, it calls Clapeyron.volume to obtain V and calculates the property via VT_helmholtz_free_energy_res(model,V,T,z).\n\nThe keywords phase, threaded and vol0 are passed to the Clapeyron.volume solver.\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.molar_density","page":"Bulk Properties","title":"Clapeyron.molar_density","text":"molar_density(model::EoSModel, p, T, z=SA[1.]; phase=:unknown, threaded=true, vol0=nothing)\n\ndefault units: [mol/m^3]\n\nCalculates the molar density, defined as:\n\nρₙ = ∑nᵢ/V\n\nInternally, it calls Clapeyron.volume to obtain V and calculates the property via VT_molar_density(model,V,T,z).\n\nThe keywords phase, threaded and vol0 are passed to the Clapeyron.volume solver.\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.mass_density","page":"Bulk Properties","title":"Clapeyron.mass_density","text":"mass_density(model::EoSModel, p, T, z=SA[1.]; phase=:unknown, threaded=true)\n\ndefault units: [kg/m^3]\n\nCalculates the mass density, defined as:\n\nρₙ = Mr/V\n\nWhere Mr is the molecular weight of the model at the input composition.\n\nInternally, it calls Clapeyron.volume to obtain V and calculates the property via VT_mass_density(model,V,T,z).\n\nThe keywords phase, threaded and vol0 are passed to the Clapeyron.volume solver.\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.compressibility_factor","page":"Bulk Properties","title":"Clapeyron.compressibility_factor","text":"compressibility_factor(model::EoSModel, p, T, z=SA[1.]; phase=:unknown, threaded=true, vol0=nothing)\n\nCalculates the compressibility factor Z, defined as:\n\nZ = p*V(p)/R*T\n\nThe keywords phase, threaded and vol0 are passed to the Clapeyron.volume solver.\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.gibbs_free_energy","page":"Bulk Properties","title":"Clapeyron.gibbs_free_energy","text":"gibbs_free_energy(model::EoSModel, p, T, z=SA[1.]; phase=:unknown, threaded=true, vol0=nothing)\ngibbs_energy(model::EoSModel, p, T, z=SA[1.]; phase=:unknown, threaded=true, vol0=nothing)\n\nDefault units: [J]\n\nCalculates the gibbs free energy, defined as:\n\nG = A + p*V\n\nInternally, it calls Clapeyron.volume to obtain V and calculates the property via VT_gibbs_free_energy(model,V,T,z).\n\nThe keywords phase, threaded and vol0 are passed to the Clapeyron.volume solver.\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.gibbs_free_energy_res","page":"Bulk Properties","title":"Clapeyron.gibbs_free_energy_res","text":"gibbs_free_energy_res(model::EoSModel, p, T, z=SA[1.]; phase=:unknown, threaded=true, vol0=nothing)\ngibbs_energy_res(model::EoSModel, p, T, z=SA[1.]; phase=:unknown, threaded=true, vol0=nothing)\n\nDefault units: [J]\n\nCalculates the residual gibbs free energy, defined as:\n\nG = Ar - V*∂Ar/∂V\n\nInternally, it calls Clapeyron.volume to obtain V and calculates the property via VT_gibbs_free_energy_res(model,V,T,z).\n\nThe keywords phase, threaded and vol0 are passed to the Clapeyron.volume solver.\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.entropy","page":"Bulk Properties","title":"Clapeyron.entropy","text":"entropy(model::EoSModel, p, T, z=SA[1.]; phase=:unknown, threaded=true, vol0=nothing)\n\nDefault units: [J/K]\n\nCalculates entropy, defined as:\n\nS = -∂A/∂T\n\nInternally, it calls Clapeyron.volume to obtain V and calculates the property via VT_entropy(model,V,T,z).\n\nThe keywords phase, threaded and vol0 are passed to the Clapeyron.volume solver.\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.entropy_res","page":"Bulk Properties","title":"Clapeyron.entropy_res","text":"entropy_res(model::EoSModel, p, T, z=SA[1.]; phase=:unknown, threaded=true, vol0=nothing)\n\nDefault units: [J/K]\n\nCalculates residual entropy, defined as:\n\nS = -∂Ares/∂T\n\nInternally, it calls Clapeyron.volume to obtain V and calculates the property via VT_entropy_res(model,V,T,z).\n\nThe keywords phase, threaded and vol0 are passed to the Clapeyron.volume solver.\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.enthalpy","page":"Bulk Properties","title":"Clapeyron.enthalpy","text":"enthalpy(model::EoSModel, p, T, z=SA[1.]; phase=:unknown, threaded=true, vol0=nothing)\n\nDefault units: [J]\n\nCalculates the enthalpy, defined as:\n\nH = A - T * ∂A/∂T - V * ∂A/∂V\n\nInternally, it calls Clapeyron.volume to obtain V and calculates the property via VT_enthalpy(model,V,T,z).\n\nThe keywords phase, threaded and vol0 are passed to the Clapeyron.volume solver.\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.internal_energy","page":"Bulk Properties","title":"Clapeyron.internal_energy","text":"internal_energy(model::EoSModel, p, T, z=SA[1.]; phase=:unknown, threaded=true, vol0=nothing)\n\nDefault units: [J]\n\nCalculates the internal energy, defined as:\n\nU = A - T * ∂A/∂T\n\nInternally, it calls Clapeyron.volume to obtain V and calculates the property via VT_internal_energy(model,V,T,z).\n\nThe keywords phase, threaded and vol0 are passed to the Clapeyron.volume solver.\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.internal_energy_res","page":"Bulk Properties","title":"Clapeyron.internal_energy_res","text":"internal_energy_res(model::EoSModel, p, T, z=SA[1.]; phase=:unknown, threaded=true, vol0=nothing)\n\nDefault units: [J]\n\nCalculates the residual internal energy, defined as:\n\nU = Ar - T * ∂Ar/∂T\n\nInternally, it calls Clapeyron.volume to obtain V and calculates the property via VT_internal_energy_res(model,V,T,z).\n\nThe keywords phase, threaded and vol0 are passed to the Clapeyron.volume solver.\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Methods-that-require-second-order-VT-derivatives","page":"Bulk Properties","title":"Methods that require second order VT derivatives","text":"","category":"section"},{"location":"properties/bulk/#Clapeyron.isochoric_heat_capacity","page":"Bulk Properties","title":"Clapeyron.isochoric_heat_capacity","text":"isochoric_heat_capacity(model::EoSModel, p, T, z=SA[1.]; phase=:unknown, threaded=true, vol0=nothing)\n\nDefault units: [J/K]\n\nCalculates the isochoric heat capacity, defined as:\n\nCv = -T * ∂²A/∂T²\n\nInternally, it calls Clapeyron.volume to obtain V and calculates the property via VT_isochoric_heat_capacity(model,V,T,z).\n\nThe keywords phase, threaded and vol0 are passed to the Clapeyron.volume solver.\n\nwarning: Accurate ideal model required\nThis property requires at least second order ideal model temperature derivatives. If you are computing these properties, consider using a different ideal model than the BasicIdeal default (e.g. EoS([\"species\"];idealmodel = ReidIdeal)).\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.isobaric_heat_capacity","page":"Bulk Properties","title":"Clapeyron.isobaric_heat_capacity","text":"isobaric_heat_capacity(model::EoSModel, p, T, z=SA[1.]; phase=:unknown, threaded=true, vol0=nothing)\n\nDefault units: [J/K]\n\nCalculates the isobaric heat capacity, defined as:\n\nCp = -T*(∂²A/∂T² - (∂²A/∂V∂T)^2 / ∂²A/∂V²)\n\nInternally, it calls Clapeyron.volume to obtain V and calculates the property via VT_isobaric_heat_capacity(model,V,T,z).\n\nThe keywords phase, threaded and vol0 are passed to the Clapeyron.volume solver.\n\nwarning: Accurate ideal model required\nThis property requires at least second order ideal model temperature derivatives. If you are computing these properties, consider using a different ideal model than the BasicIdeal default (e.g. EoS([\"species\"];idealmodel = ReidIdeal)).\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.adiabatic_index","page":"Bulk Properties","title":"Clapeyron.adiabatic_index","text":"adiabatic_index(model::EoSModel, p, T, z=SA[1.]; phase=:unknown, threaded=true, vol0=nothing)\n\nDefault units: [J/K]\n\nCalculates the isobaric heat capacity, defined as:\n\nγ = Cp/Cv\n\nInternally, it calls Clapeyron.volume to obtain V and calculates the property via VT_adiabatic_index(model,V,T,z).\n\nThe keywords phase, threaded and vol0 are passed to the Clapeyron.volume solver.\n\nwarning: Accurate ideal model required\nThis property requires at least second order ideal model temperature derivatives. If you are computing these properties, consider using a different ideal model than the BasicIdeal default (e.g. EoS([\"species\"];idealmodel = ReidIdeal)).\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.isothermal_compressibility","page":"Bulk Properties","title":"Clapeyron.isothermal_compressibility","text":"isothermal_compressibility(model::EoSModel, p, T, z=SA[1.]; phase=:unknown, threaded=true, vol0=nothing)\n\ndefault units: [Pa^-1]\n\nCalculates the isothermal compressibility, defined as:\n\nκT = -(V*∂p/∂V)^-1\n\nInternally, it calls Clapeyron.volume to obtain V and calculates the property via VT_isothermal_compressibility(model,V,T,z).\n\nThe keywords phase, threaded and vol0 are passed to the Clapeyron.volume solver.\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.isentropic_compressibility","page":"Bulk Properties","title":"Clapeyron.isentropic_compressibility","text":"isentropic_compressibility(model::EoSModel, p, T, z=SA[1.]; phase=:unknown, threaded=true, vol0=nothing)\n\ndefault units: [Pa^-1]\n\nCalculates the isentropic compressibility, defined as:\n\nκS = (V*( ∂²A/∂V² - ∂²A/∂V∂T^2 / ∂²A/∂T² ))^-1\n\nInternally, it calls Clapeyron.volume to obtain V and calculates the property via VT_isentropic_compressibility(model,V,T,z).\n\nThe keywords phase, threaded and vol0 are passed to the Clapeyron.volume solver.\n\nwarning: Accurate ideal model required\nThis property requires at least second order ideal model temperature derivatives. If you are computing these properties, consider using a different ideal model than the BasicIdeal default (e.g. EoS([\"species\"];idealmodel = ReidIdeal)).\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.speed_of_sound","page":"Bulk Properties","title":"Clapeyron.speed_of_sound","text":"speed_of_sound(model::EoSModel, p, T, z=SA[1.]; phase=:unknown, threaded=true, vol0=nothing)\n\ndefault units: [m/s]\n\nCalculates the speed of sound, defined as:\n\nc = V * √(∂²A/∂V² - ∂²A/∂V∂T^2 / ∂²A/∂T²)/Mr)\n\nWhere Mr is the molecular weight of the model at the input composition.\n\nInternally, it calls Clapeyron.volume to obtain V and calculates the property via VT_speed_of_sound(model,V,T,z).\n\nThe keywords phase, threaded and vol0 are passed to the Clapeyron.volume solver.\n\nwarning: Accurate ideal model required\nThis property requires at least second order ideal model temperature derivatives. If you are computing these properties, consider using a different ideal model than the BasicIdeal default (e.g. EoS([\"species\"];idealmodel = ReidIdeal)).\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.isobaric_expansivity","page":"Bulk Properties","title":"Clapeyron.isobaric_expansivity","text":"isobaric_expansivity(model::EoSModel, p, T, z=SA[1.]; phase=:unknown, threaded=true, vol0=nothing)\n\ndefault units: [K^-1]\n\nCalculates the isobaric expansivity, defined as:\n\nα = -∂²A/∂V∂T / (V*∂²A/∂V²)\n\nInternally, it calls Clapeyron.volume to obtain V and calculates the property via VT_isobaric_expansivity(model,V,T,z).\n\nThe keywords phase, threaded and vol0 are passed to the Clapeyron.volume solver.\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.joule_thomson_coefficient","page":"Bulk Properties","title":"Clapeyron.joule_thomson_coefficient","text":"joule_thomson_coefficient(model::EoSModel, p, T, z=SA[1.]; phase=:unknown, threaded=true, vol0=nothing)\n\ndefault units: [K/Pa]\n\nCalculates the joule thomson coefficient, defined as:\n\nμⱼₜ = -(∂²A/∂V∂T - ∂²A/∂V² * ((T*∂²A/∂T² + V*∂²A/∂V∂T) / (T*∂²A/∂V∂T + V*∂²A/∂V²)))^-1\n\nInternally, it calls Clapeyron.volume to obtain V and calculates the property via VT_joule_thomson_coefficient(model,V,T,z).\n\nThe keywords phase, threaded and vol0 are passed to the Clapeyron.volume solver.\n\nwarning: Accurate ideal model required\nThis property requires at least second order ideal model temperature derivatives. If you are computing these properties, consider using a different ideal model than the BasicIdeal default (e.g. EoS([\"species\"];idealmodel = ReidIdeal)).\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Methods-that-require-first-order-composition-derivatives","page":"Bulk Properties","title":"Methods that require first order composition derivatives","text":"","category":"section"},{"location":"properties/bulk/#Clapeyron.chemical_potential","page":"Bulk Properties","title":"Clapeyron.chemical_potential","text":"chemical_potential(model::EoSModel, p, T, z=SA[1.]; phase=:unknown, threaded=true, vol0=nothing)\n\nDefault units: [J/mol]\n\nCalculates the chemical potential, defined as:\n\nμᵢ = ∂A/∂nᵢ\n\nInternally, it calls Clapeyron.volume to obtain V and calculates the property via VT_chemical_potential(model,V,T,z).\n\nThe keywords phase, threaded and vol0 are passed to the Clapeyron.volume solver.\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.chemical_potential_res","page":"Bulk Properties","title":"Clapeyron.chemical_potential_res","text":"chemical_potential_res(model::EoSModel, p, T, z=SA[1.]; phase=:unknown, threaded=true, vol0=nothing)\n\nDefault units: [J/mol]\n\nCalculates the residual chemical potential, defined as:\n\nμresᵢ = ∂Ares/∂nᵢ\n\nInternally, it calls Clapeyron.volume to obtain V and calculates the property via VT_chemical_potential_res(model,V,T,z).\n\nThe keywords phase, threaded and vol0 are passed to the Clapeyron.volume solver.\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.fugacity_coefficient","page":"Bulk Properties","title":"Clapeyron.fugacity_coefficient","text":"fugacity_coefficient(model::EoSModel, p, T, z=SA[1.]; phase=:unknown, threaded=true, vol0=nothing)\n\nCalculates the fugacity coefficient φᵢ, defined as:\n\nlog(φᵢ) = μresᵢ/RT - log(Z)\n\nWhere μresᵢ is the vector of residual chemical potentials and Z is the compressibility factor.\n\nInternally, it calls Clapeyron.volume to obtain V and calculates the property via VT_fugacity_coefficient(model,V,T,z).\n\nThe keywords phase, threaded and vol0 are passed to the Clapeyron.volume solver.\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Activity-Coefficient","page":"Bulk Properties","title":"Activity Coefficient","text":"","category":"section"},{"location":"properties/bulk/#Clapeyron.reference_chemical_potential","page":"Bulk Properties","title":"Clapeyron.reference_chemical_potential","text":"reference_chemical_potential(model::EoSModel,p,T,reference; phase=:unknown, threaded=true, vol0=nothing)\n\nReturns a reference chemical potential. used in calculation of activity and actitivy_coefficient. there are two available references:\n\n:pure: the reference potential is a pure component at specified T, p and phase\n:aqueous: the chemical potential of the pure components at specified T, p and phase\n:sat_pure_T:  the reference potential is the pure saturated liquid phase at specified T.\n:zero: the reference potential is equal to zero for all components (used for ActivityModel)\n\nThe keywords phase, threaded and vol0 are passed to the Clapeyron.volume solver.\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.reference_chemical_potential_type","page":"Bulk Properties","title":"Clapeyron.reference_chemical_potential_type","text":"reference_chemical_potential_type(model)::Symbol\n\nReturns a symbol with the type of reference chemical potential used by the input model.\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.activity_coefficient","page":"Bulk Properties","title":"Clapeyron.activity_coefficient","text":"activity_coefficient(model::EoSModel,p,T,z=SA[1.0];reference = :pure, phase=:unknown, threaded=true, vol0=nothing)\n\nCalculates the activity, defined as:\n\nlog(γ*z) = (μ_mixt - μ_ref) / R̄ / T\n\nwhere μ_mixt is the chemical potential of the mixture and μ_ref is the reference chemical potential for the model at p,T conditions, calculated via Clapeyron.reference_chemical_potential. Internally, it calls Clapeyron.volume to obtain V and calculates the property via VT_fugacity_coefficient(model,V,T,z).\n\nThe keywords phase, threaded and vol0 are passed to the Clapeyron.volume solver.\n\nIf the μ_ref keyword argument is not provided, the reference keyword is used to specify the reference chemical potential..\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.activity","page":"Bulk Properties","title":"Clapeyron.activity","text":"activity(model::EoSModel,p,T,z=SA[1.0];reference = :pure, phase=:unknown, threaded=true, vol0=nothing)\n\nCalculates the activity, defined as:\n\nlog(a) = (μ_mixt - μ_ref) / R̄ / T\n\nwhere μ_mixt is the chemical potential of the mixture and μ_ref is the reference chemical potential for the model at p,T conditions, calculated via Clapeyron.reference_chemical_potential. Internally, it calls Clapeyron.volume to obtain V and calculates the property via VT_fugacity_coefficient(model,V,T,z).\n\nThe keywords phase, threaded and vol0 are passed to the Clapeyron.volume solver.\n\nIf the μ_ref keyword argument is not provided, the reference keyword is used to specify the reference chemical potential..\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.aqueous_activity","page":"Bulk Properties","title":"Clapeyron.aqueous_activity","text":"aqueous_activity(model::EoSModel,p,T,z=SA[1.0]; phase=:unknown, threaded=true, vol0=nothing)\n\nCalculates the activity with the reference being infinite dilution in water, defined as:\n\nlog(a) = (μ_mixt - μ_inf) / R̄ / T\n\nwhere μ_mixt is the chemical potential of the mixture and μ_inf is the chemical potential of the components at infinite dilution in water.\n\nInternally, it calls Clapeyron.volume to obtain V and calculates the property via VT_fugacity_coefficient(model,V,T,z).\n\nThe keywords phase, threaded and vol0 are passed to the Clapeyron.volume solver.\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Mixing","page":"Bulk Properties","title":"Mixing","text":"","category":"section"},{"location":"properties/bulk/#Clapeyron.mixing","page":"Bulk Properties","title":"Clapeyron.mixing","text":"mixing(model::EoSModel, p, T, z=SA[1.], property; phase=:unknown, threaded=true, vol0=nothing)\n\nCalculates the mixing function for a specified property as:\n\nf_mix = f(p,T,z) - ∑zᵢ*f_pureᵢ(p,T)\n\nThe keywords phase, threaded and vol0 are passed to the Clapeyron.volume solver.\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Initial-guess-functions","page":"Bulk Properties","title":"Initial guess functions","text":"","category":"section"},{"location":"properties/bulk/","page":"Bulk Properties","title":"Bulk Properties","text":"These methods are considered internal, they don't support Symbolics.jl or Unitful.jl overloads.","category":"page"},{"location":"properties/bulk/#Clapeyron.lb_volume","page":"Bulk Properties","title":"Clapeyron.lb_volume","text":"lb_volume(model::EoSModel)\nlb_volume(model::EoSModel,z)\nlb_volume(model::EoSModel,T,z)\n\nReturns the lower bound volume. It has different meanings depending on the Equation of State, but symbolizes the minimum allowable volume at a certain composition:\n\nSAFT EoS: the packing volume\nCubic EoS, covolume (b) parameter\n\nOn empiric equations of state, the value is chosen to match the volume of the conditions at maximum pressure and minimum temperature , but the equation itself normally can be evaluated at lower volumes. On SAFT and Cubic EoS, volumes lower than lb_volume will likely error. The lower bound volume is used for guesses of liquid volumes at a certain pressure, saturated liquid volumes and critical volumes.\n\nIn most cases, the lower bound volume is independent of temperature. Some notable exceptions are the Quantum-Corrected Peng-Robinson cubic (QCPR) and Cubic-plus-Chain (CPC) models. For those, it is better to define the three-argument variant lb_volume(model,T,z)\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.T_scale","page":"Bulk Properties","title":"Clapeyron.T_scale","text":"T_scale(model::EoSModel,z)\n\nRepresents a temperature scaling factor.\n\nOn any EoS based on Critical parameters (Cubic or Empiric EoS), the temperature scaling factor is chosen to be the critical temperature. On SAFT or other molecular EoS, the temperature scaling factor is chosen to be a function of the potential depth ϵ. Used as scaling factors in saturation_pressure and as input for solving crit_pure\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.p_scale","page":"Bulk Properties","title":"Clapeyron.p_scale","text":"p_scale(model::EoSModel,z)\n\nRepresents a pressure scaling factor.\n\nOn any EoS based on Critical parameters (Cubic or Empiric EoS), the pressure scaling factor is chosen to be a function of the critical pressure. On SAFT or other molecular EoS, the pressure scaling factor is chosen to a function of ∑(zᵢϵᵢ(σᵢᵢ)³) Used as scaling factors in saturation_pressure and as input for solving crit_pure.\n\nBy default, it can be defined as a function of Clapeyron.lb_volume and Clapeyron.T_scale\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.x0_volume","page":"Bulk Properties","title":"Clapeyron.x0_volume","text":"x0_volume(model,p,T,z; phase = :unknown)\n\nReturns an initial guess of the volume at a pressure, temperature, composition and suggested phase. If the suggested phase is :unknown or :liquid, calls x0_volume_liquid. If the suggested phase is :gas, calls x0_volume_gas. If the suggested phase is solid, calls x0_volume_solid. Returns NaN otherwise\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.x0_volume_solid","page":"Bulk Properties","title":"Clapeyron.x0_volume_solid","text":"x0_volume_solid(model,T,z)\nx0_volume_solid(model,p,T,z)\n\nReturns an initial guess to the solid volume, dependent on temperature and composition. needs to be defined for EoS that support solid phase. by default returns NaN. can be overrided if the EoS defines is_solid(::EoSModel) = true\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.x0_volume_liquid","page":"Bulk Properties","title":"Clapeyron.x0_volume_liquid","text":"x0_volume_liquid(model,T,z)\nx0_volume_liquid(model,p,T,z)\n\nReturns an initial guess to the liquid volume, dependent on temperature and composition. by default is 1.25 times lb_volume.\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.x0_volume_gas","page":"Bulk Properties","title":"Clapeyron.x0_volume_gas","text":"x0_volume_gas(model,p,T,z)\n\nReturns an initial guess to the gas volume, depending of pressure, temperature and composition. by default uses volume_virial\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.volume_virial","page":"Bulk Properties","title":"Clapeyron.volume_virial","text":"volume_virial(model::EoSModel,p,T,z=SA[1.0])\nvolume_virial(B::Real,p,T,z=SA[1.0])\n\nCalculates an aproximation to the gas volume at specified pressure, volume and composition, by aproximating:\n\nZ(v) ≈ 1 + B(T)/v\n\nwhere Z is the compressibility factor and B is the second virial coefficient. If B>0, (over the inversion temperature) returns NaN. If the solution to the problem is complex (Z = 1 + B/v implies solving a quadratic polynomial), returns -2*B. If you pass an EoSModel as the first argument, B will be calculated from the EoS at the input T. You can provide your own second virial coefficient instead of a model.\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.x0_sat_pure","page":"Bulk Properties","title":"Clapeyron.x0_sat_pure","text":"x0_sat_pure(model::EoSModel,T)\nx0_sat_pure(model,T,crit)\n\nReturns a 2-tuple corresponding to (Vₗ,Vᵥ), where Vₗ and Vᵥ are the liquid and vapor initial guesses. Used in saturation_pressure methods that require initial volume guesses. It can be overloaded to provide more accurate estimates if necessary. If an EoS model provides a fast method for crit_pure, overloading has_fast_crit_pure will provide x0_sat_pure with additional information to improve its accuracy.\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.x0_psat","page":"Bulk Properties","title":"Clapeyron.x0_psat","text":"x0_psat(model::EoSModel, T,crit = nothing)\n\nInitial point for saturation pressure, given the temperature and V,T critical coordinates. On moderate pressures it will use a Zero Pressure initialization. On pressures near the critical point it will switch to spinodal finding. Used in saturation_pressure methods that require initial pressure guesses. if the initial temperature is over the critical point, it returns NaN. It can be overloaded to provide more accurate estimates if necessary.\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.x0_saturation_temperature","page":"Bulk Properties","title":"Clapeyron.x0_saturation_temperature","text":"x0_saturation_temperature(model::EoSModel,p)\n\nReturns a 3-tuple corresponding to (T,Vₗ,Vᵥ), T is the initial guess for temperature and Vₗ and Vᵥ are the liquid and vapor initial guesses. Used in saturation_temperature with AntoineSaturation.\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.antoine_coef","page":"Bulk Properties","title":"Clapeyron.antoine_coef","text":"antoine_coef(model)\n\nshould return a 3-Tuple containing reduced Antoine Coefficients. The Coefficients follow the correlation:\n\nlnp̄ = log(p / p_scale(model))\nT̃ = T/T_scale(model)\nlnp̄ = A - B/(T̄ + C))\n\nBy default returns nothing. This is to use alternative methods in case Antoine coefficients aren't available. Used mainly in single and multicomponent temperature calculations.\n\n\n\n\n\n","category":"function"},{"location":"properties/bulk/#Clapeyron.x0_crit_pure","page":"Bulk Properties","title":"Clapeyron.x0_crit_pure","text":"x0_crit_pure(model::EoSModel)\n\nReturns a 2-tuple corresponding to     (k,log10(Vc0)), where k is Tc0/T_scale(model,z)\n\n\n\n\n\n","category":"function"},{"location":"eos/saft/#Index","page":"SAFT and CPA Models","title":"Index","text":"","category":"section"},{"location":"eos/saft/","page":"SAFT and CPA Models","title":"SAFT and CPA Models","text":"Pages = [\"saft.md\"]","category":"page"},{"location":"eos/saft/#SAFT-Models","page":"SAFT and CPA Models","title":"SAFT Models","text":"","category":"section"},{"location":"eos/saft/#Clapeyron.ogSAFT","page":"SAFT and CPA Models","title":"Clapeyron.ogSAFT","text":"ogSAFTModel <: SAFTModel\n\nogSAFT(components;\nidealmodel = BasicIdeal,\nuserlocations = String[],\nideal_userlocations = String[],\nreference_state = nothing,\nverbose = false,\nassoc_options = AssocOptions())\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Single Parameter (Float64) - Segment Diameter [A°]\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K]\nk: Pair Parameter (Float64) (optional) - Binary Interaction Paramater (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume [m^3]\n\nModel Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Pair Parameter (Float64) - Mixed segment Diameter [m]\nepsilon: Pair Parameter (Float64) - Mixed reduced dispersion energy[K]\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\n(original) Statistical Associating Fluid Theory (og-SAFT) Equation of State\n\nReferences\n\nChapman, W. G., Gubbins, K. E., Jackson, G., & Radosz, M. (1989). SAFT: Equation-of-state solution model for associating fluids. Fluid Phase Equilibria, 52, 31–38. doi:10.1016/0378-3812(89)80308-5\nChapman, W. G., Gubbins, K. E., Jackson, G., & Radosz, M. (1990). New reference equation of state for associating liquids. Industrial & Engineering Chemistry Research, 29(8), 1709–1721. doi:10.1021/ie00104a021\n\n\n\n\n\n","category":"type"},{"location":"eos/saft/#Clapeyron.CKSAFT","page":"SAFT and CPA Models","title":"Clapeyron.CKSAFT","text":"CKSAFTModel <: SAFTModel\n\nCKSAFT(components; \nidealmodel = BasicIdeal,\nuserlocations = String[],\nideal_userlocations = String[],\nreference_state = nothing,\nverbose = false,\nassoc_options = AssocOptions())\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nvol: Single Parameter (Float64) - Segment Volume [dm^3]\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K]\nk: Pair Parameter (Float64) (optional) - Binary Interaction Paramater (no units)\nc: Single Parameter (Float64) - Dispersion T-dependent parameter (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume [m^3]\n\nModel Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Pair Parameter (Float64) - Mixed segment Diameter [m]\nepsilon: Pair Parameter (Float64) - Mixed reduced dispersion energy[K]\nc: Single Parameter (Float64) - Dispersion T-dependent parameter (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\nChen and Kreglewski SAFT (CK-SAFT)\n\nReferences\n\nHuang, S. H., & Radosz, M. (1990). Equation of state for small, large, polydisperse, and associating molecules. Industrial & Engineering Chemistry Research, 29(11), 2284–2294. doi:10.1021/ie00107a014\nHuang, S. H., & Radosz, M. (1991). Equation of state for small, large, polydisperse, and associating molecules: extension to fluid mixtures. Industrial & Engineering Chemistry Research, 30(8), 1994–2005. doi:10.1021/ie00056a050\n\n\n\n\n\n","category":"type"},{"location":"eos/saft/#Clapeyron.sCKSAFT","page":"SAFT and CPA Models","title":"Clapeyron.sCKSAFT","text":"sCKSAFTModel <: CKSAFTModel\n\nsCKSAFT(components; \nidealmodel = BasicIdeal,\nuserlocations = String[],\nideal_userlocations = String[],\nreference_state = nothing,\nverbose = false,\nassoc_options = AssocOptions())\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nvol: Single Parameter (Float64) - Segment Volume [dm^3]\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K]\nk: Pair Parameter (Float64) (optional) - Binary Interaction Paramater (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume [m^3]\n\nModel Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Pair Parameter (Float64) - Mixed segment Diameter [m]\nepsilon: Pair Parameter (Float64) - Mixed reduced dispersion energy[K]\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\nSimplified Chen and Kreglewski SAFT (sCK-SAFT)\n\nReferences\n\nHuang, S. H., & Radosz, M. (1990). Equation of state for small, large, polydisperse, and associating molecules. Industrial & Engineering Chemistry Research, 29(11), 2284–2294. doi:10.1021/ie00107a014\nHuang, S. H., & Radosz, M. (1991). Equation of state for small, large, polydisperse, and associating molecules: extension to fluid mixtures. Industrial & Engineering Chemistry Research, 30(8), 1994–2005. doi:10.1021/ie00056a050\nFu, Y.-H., & Sandler, S. I. (1995). A simplified SAFT equation of state for associating compounds and mixtures. Industrial & Engineering Chemistry Research, 34(5), 1897–1909. doi:10.1021/ie00044a042\n\n\n\n\n\n","category":"type"},{"location":"eos/saft/#Clapeyron.BACKSAFT","page":"SAFT and CPA Models","title":"Clapeyron.BACKSAFT","text":"BACKSAFTModel <: SAFTModel\n\nBACKSAFT(components; \nidealmodel = BasicIdeal,\nuserlocations = String[],\nideal_userlocations = String[],\nreference_state = nothing,\nverbose = false,\nassoc_options = AssocOptions())\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nvol: Single Parameter (Float64) - Segment Volume [dm^3]\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K/mol]\nk: Pair Parameter (Float64) (optional) - Binary Interaction Paramater (no units)\nc: Single Parameter (Float64) - Adjustable parameter (no units)\nalpha: Single Parameter (Float64) - Non-spherical deviation (no units)\n\nModel Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Pair Parameter (Float64) - Mixed segment Diameter [m]\nepsilon: Pair Parameter (Float64) - Mixed reduced dispersion energy[K]\nc: Single Parameter (Float64) - Adjustable parameter (no units)\nalpha: Single Parameter (Float64) - Non-spherical deviation (no units)\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\nBACKSAFT\n\nReferences\n\nMi, J.-G., Chen, J., Gao, G.-H., & Fei, W.-Y. (2002). Equation of state extended from SAFT with improved results for polar fluids across the critical point. Fluid Phase Equilibria, 201(2), 295–307. doi:10.1016/s0378-3812(02)00093-6\n\n\n\n\n\n","category":"type"},{"location":"eos/saft/#Clapeyron.PCSAFT","page":"SAFT and CPA Models","title":"Clapeyron.PCSAFT","text":"PCSAFTModel <: SAFTModel\n\nPCSAFT(components; \nidealmodel = BasicIdeal,\nuserlocations = String[],\nideal_userlocations = String[],\nreference_state = nothing,\nverbose = false,\nassoc_options = AssocOptions())\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Single Parameter (Float64) - Segment Diameter [A°]\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K]\nk: Pair Parameter (Float64) (optional) - Binary Interaction Paramater (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume [m^3]\n\nModel Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Pair Parameter (Float64) - Mixed segment Diameter [m]\nepsilon: Pair Parameter (Float64) - Mixed reduced dispersion energy[K]\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\nPerturbed-Chain SAFT (PC-SAFT)\n\nReferences\n\nGross, J., & Sadowski, G. (2001). Perturbed-chain SAFT: An equation of state based on a perturbation theory for chain molecules. Industrial & Engineering Chemistry Research, 40(4), 1244–1260. doi:10.1021/ie0003887\nGross, J., & Sadowski, G. (2002). Application of the perturbed-chain SAFT equation of state to associating systems. Industrial & Engineering Chemistry Research, 41(22), 5510–5515. doi:10.1021/ie010954d\n\n\n\n\n\n","category":"type"},{"location":"eos/saft/#Clapeyron.PCPSAFT","page":"SAFT and CPA Models","title":"Clapeyron.PCPSAFT","text":"PCPSAFTModel <: PCSAFTModel\n\nconst PPCSAFT = PCPSAFT\n\nPCPSAFT(components;\nidealmodel = BasicIdeal,\nuserlocations = String[],\nideal_userlocations = String[],\nreference_state = nothing,\nverbose = false,\nassoc_options = AssocOptions())\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Single Parameter (Float64) - Segment Diameter [A°]\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K]\nk: Pair Parameter (Float64) (optional) - Binary Interaction Paramater (no units)\ndipole: Single Parameter (Float64) - Dipole moment [D]\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume [m^3]\n\nModel Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Pair Parameter (Float64) - Mixed segment Diameter [m]\nepsilon: Pair Parameter (Float64) - Mixed reduced dispersion energy[K]\ndipole: Single Parameter (Float64) (optional) - Dipole moment [D]\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\nPerturbed-Chain Polar SAFT (PCP-SAFT)\n\nReferences\n\nGross, J., & Vrabec, J. (2005). An equation-of-state contribution for polar components: Dipolar molecules. AIChE Journal, 52(3), 856-1282. doi:10.1002/aic.10683\n\n\n\n\n\n","category":"type"},{"location":"eos/saft/#Clapeyron.QPCPSAFT","page":"SAFT and CPA Models","title":"Clapeyron.QPCPSAFT","text":"QPCPSAFTModel <: PCPSAFTModel\n\nQPCPSAFT(components;\nidealmodel = BasicIdeal,\nuserlocations = String[],\nideal_userlocations = String[],\nreference_state = nothing,\nverbose = false,\nassoc_options = AssocOptions())\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Single Parameter (Float64) - Segment Diameter [A°]\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K]\nk: Pair Parameter (Float64) (optional) - Binary Interaction Paramater (no units)\ndipole: Single Parameter (Float64) - Dipole moment [D]\nquadrupole: Single Parameter (Float64) - Quadrupole moment [DA°]\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume [m^3]\n\nModel Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Pair Parameter (Float64) - Mixed segment Diameter [m]\nepsilon: Pair Parameter (Float64) - Mixed reduced dispersion energy[K]\ndipole: Single Parameter (Float64) - Dipole moment [D]\nquadrupole: Single Parameter (Float64) - Quadrupole moment [DA°]\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\nPolar Perturbed-Chain SAFT, including Quadrupolar interaction contributions (Q-PCP-SAFT)\n\nReferences\n\nGross, J. (2005). An equation-of-state contribution for polar components: Quadrupolar molecules. AIChE Journal, 51(9), 2556-2568. doi:10.1002/aic.10502\nGross, J., & Vrabec, J. (2008). Vapor−Liquid Equilibria Simulation and an Equation of State Contribution for Dipole−Quadrupole Interactions. J. Phys. Chem. B, 112(1), 51-60. doi:10.1021/jp072619u\n\n\n\n\n\n","category":"type"},{"location":"eos/saft/#Clapeyron.HomogcPCPSAFT","page":"SAFT and CPA Models","title":"Clapeyron.HomogcPCPSAFT","text":"HomogcPCPSAFTModel <: PCPSAFTModel\n\nHomogcPCPSAFT(components; \nidealmodel = BasicIdeal,\nuserlocations = String[],\nideal_userlocations = String[],\nreference_state = nothing,\nverbose = false,\nassoc_options = AssocOptions())\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nm: Single Parameter (Float64) - Number of segments (no units)\nsigma: Single Parameter (Float64) - Segment Diameter [A°]\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K]\ndipole: Single Parameter (Float64) - Dipole moment [D]\nk: Pair Parameter (Float64) - Binary Interaction Paramater (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume [m^3]\n\nModel Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Pair Parameter (Float64) - Mixed segment Diameter [m]\nepsilon: Pair Parameter (Float64) - Mixed reduced dispersion energy[K]\ndipole: Single Parameter (Float64) - Dipole moment [D]\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\nHomosegmented Group-contribution Polar Perturbed-Chain SAFT (Homo-gc-PCP-SAFT)\n\nReferences\n\nSauer, E., Stavrou, M., Gross, J. (2014). Comparison between a Homo- and a Heterosegmented Group Contribution Approach Based on the Perturbed-Chain Polar Statistical Associating Fluid Theory Equation of State. Industrial & Engineering Chemistry Research, 53(38), 14854-14864. doi:10.1021/ie502203w\n\n\n\n\n\n","category":"type"},{"location":"eos/saft/#Clapeyron.HeterogcPCPSAFT","page":"SAFT and CPA Models","title":"Clapeyron.HeterogcPCPSAFT","text":"gcPCPSAFTModel <: PCSAFTModel\n\nHeterogcPCPSAFT(components; \nidealmodel = BasicIdeal,\nuserlocations = String[],\nideal_userlocations = String[],\nreference_state = nothing,\nverbose = false,\nassoc_options = AssocOptions())\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nm: Single Parameter (Float64) - Number of segments (no units)\nsigma: Single Parameter (Float64) - Segment Diameter [A°]\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K]\ndipole: Single Parameter (Float64) - Dipole moment [D]\nk: Pair Parameter (Float64) - Binary Interaction Paramater (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume [m^3]\n\nModel Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Pair Parameter (Float64) - Mixed segment Diameter [m]\nepsilon: Pair Parameter (Float64) - Mixed reduced dispersion energy[K]\ndipole: Single Parameter (Float64) - Dipole moment [D]\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\nHeterosegmented Group-contribution Polar Perturbed-Chain SAFT (Hetero-gc-PCP-SAFT)\n\nReferences\n\nGross, J., Spuhl, O., Tumakaka, F. & Sadowski, G. (2003). Modeling Copolymer Systems Using the Perturbed-Chain SAFT Equation of State. Industrial & Engineering Chemistry Research, 42, 1266-1274. doi:10.1021/ie020509y\nSauer, E., Stavrou, M. & Gross, J. (2014). Comparison between a Homo- and a Heterosegmented Group Contribution Approach Based on the Perturbed-Chain Polar Statistical Associating Fluid Theory Equation of State. Industrial & Engineering Chemistry Research, 53(38), 14854–14864. doi:10.1021/ie502203w\n\nList of available groups\n\nName Description\nCH3 Methyl\nCH2 Methylene\nCH \nC \nCH2= Terminal alkene\nCH= \n=C< \nC#CH Terminal alkyne\ncCH2_pen Cyclic pentane group\ncCH_pen \ncCH2_hex Cyclic hexane group\ncCH_hex \naCH Aromatic group\naCH \nOH Hydroxyl group\nNH2 Amine group\n\n\n\n\n\n","category":"type"},{"location":"eos/saft/#Clapeyron.sPCSAFT","page":"SAFT and CPA Models","title":"Clapeyron.sPCSAFT","text":"sPCSAFT <: PCSAFTModel\n\nsPCSAFT(components;\nidealmodel = BasicIdeal,\nuserlocations = String[],\nideal_userlocations = String[],\nreference_state = nothing,\nverbose = false,\nassoc_options = AssocOptions())\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Single Parameter (Float64) - Segment Diameter [A°]\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K]\nk: Pair Parameter (Float64) (optional) - Binary Interaction Paramater (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume [m^3]\n\nModel Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Pair Parameter (Float64) - Mixed segment Diameter [m]\nepsilon: Pair Parameter (Float64) - Mixed reduced dispersion energy[K]\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\nSimplified Perturbed-Chain SAFT (sPC-SAFT)\n\nReferences\n\nvon Solms, N., Michelsen, M. L., & Kontogeorgis, G. M. (2003). Computational and physical performance of a modified PC-SAFT equation of state for highly asymmetric and associating mixtures. Industrial & Engineering Chemistry Research, 42(5), 1098–1105. doi:10.1021/ie020753p\n\n\n\n\n\n","category":"type"},{"location":"eos/saft/#Clapeyron.gcsPCSAFT","page":"SAFT and CPA Models","title":"Clapeyron.gcsPCSAFT","text":"gcsPCSAFT <: PCSAFTModel\ngcsPCSAFT(components; \nidealmodel = BasicIdeal,\nuserlocations = String[],\nideal_userlocations = String[],\nreference_state = nothing,\nverbose = false,\nassoc_options = AssocOptions())\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nm: Single Parameter (Float64) - Number of segments (no units)\nsigma: Single Parameter (Float64) - Segment Diameter [A°]\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K]\nk: Pair Parameter (Float64) - Binary Interaction Paramater (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume [m^3]\n\nModel Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Pair Parameter (Float64) - Mixed segment Diameter [m]\nepsilon: Pair Parameter (Float64) - Mixed reduced dispersion energy[K]\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\nGroup-contribution version of Simplified Perturbed-Chain SAFT (sPC-SAFT)\n\nReferences\n\nTihic, A., Kontogeorgis, G.M., von Solms, N., Michelsen, M.L. (2008). A predictive group-contribution simplified PC-SAFT equation of state: Application to polymer systems. Industrial & Engineering Chemistry Research, 47(15), 5092-5101. doi:10.1021/ie0710768\n\n\n\n\n\n","category":"type"},{"location":"eos/saft/#Clapeyron.pharmaPCSAFT","page":"SAFT and CPA Models","title":"Clapeyron.pharmaPCSAFT","text":"pharmaPCSAFTModel <: PCSAFTModel\n\npharmaPCSAFT(components;\nidealmodel = BasicIdeal,\nuserlocations = String[],\nideal_userlocations = String[],\nreference_state = nothing,\nverbose = false,\nassoc_options = AssocOptions())\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Single Parameter (Float64) - Segment Diameter [A°]\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K]\nk: Pair Parameter (Float64) (optional) - Constant binary Interaction Paramater (no units)\nkT: Pair Parameter (Float64) - T-dependent inary Interaction Paramater [K^-1]\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume [m^3]\n\nModel Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Pair Parameter (Float64) - Mixed segment Diameter [m]\nepsilon: Pair Parameter (Float64) - Mixed reduced dispersion energy[K]\nk: Pair Parameter (Float64) (optional) - Constant binary Interaction Paramater (no units)\nkT: Pair Parameter (Float64) - T-dependent inary Interaction Paramater [K^-1]\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\nPerturbed-Chain SAFT (PC-SAFT), with T dependent kij and water correlation [2] for segment diameter. For using the water's sigma correlation, water08 should be selected instead of water.\n\nReferences\n\nPaus, R., Ji, Y., Vahle, L., & Sadowski, G. (2015). Predicting the solubility advantage of amorphous pharmaceuticals: A novel thermodynamic approach. Molecular Pharmaceutics, 12(8), 2823–2833. doi:10.1021/mp500824d\nCameretti, L. F., & Sadowski, G. (2008). Modeling of aqueous amino acid and polypeptide solutions with PC-SAFT. Genie Des Procedes [Chemical Engineering and Processing], 47(6), 1018–1025. doi:10.1016/j.cep.2007.02.034\n\n\n\n\n\n","category":"type"},{"location":"eos/saft/#Clapeyron.CPPCSAFT","page":"SAFT and CPA Models","title":"Clapeyron.CPPCSAFT","text":"CPPCSAFTModel <: PCSAFTModel\n\nCPPCSAFT(components; \nidealmodel = BasicIdeal,\nuserlocations = String[],\nideal_userlocations = String[],\nreference_state = nothing,\nverbose = false,\nassoc_options = AssocOptions())\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Single Parameter (Float64) - Segment Diameter [A°]\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K]\nk: Pair Parameter (Float64) (optional) - Binary Interaction Paramater (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume [m^3]\n\nModel Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Pair Parameter (Float64) - Number of segments (no units)\nsigma: Pair Parameter (Float64) - Mixed segment Diameter [m]\nepsilon: Pair Parameter (Float64) - Mixed reduced dispersion energy[K]\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\nCritical Point-Based PC-SAFT (CP-PC-SAFT)\n\nReferences\n\nPolishuk, I. (2014). Standardized critical point-based numerical solution of statistical association fluid theory parameters: The perturbed chain-statistical association fluid theory equation of state revisited. Industrial & Engineering Chemistry Research, 53(36), 14127–14141. doi:10.1021/ie502633e\n\n\n\n\n\n","category":"type"},{"location":"eos/saft/#Clapeyron.GEPCSAFT","page":"SAFT and CPA Models","title":"Clapeyron.GEPCSAFT","text":"GEPCSAFT <: SAFTModel\n\nGEPCSAFT(components;\nidealmodel = BasicIdeal,\nuserlocations = String[],\nideal_userlocations = String[],\nreference_state = nothing,\nverbose = false,\nassoc_options = AssocOptions())\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Single Parameter (Float64) - Segment Diameter [A°]\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K]\nk: Pair Parameter (Float64) (optional) - Binary Interaction Paramater (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume [m^3]\n\nModel Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Pair Parameter (Float64) - Mixed segment Diameter [m]\nepsilon: Pair Parameter (Float64) - Mixed reduced dispersion energy[K]\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume\n\nInput models\n\nidealmodel: Ideal Model\nactivity: Activity model\n\nDescription\n\nPerturbed-Chain SAFT (PC-SAFT), with Gᴱ mixing rule.\n\nReferences\n\nWalker, P. J. (2022). Toward advanced, predictive mixing rules in SAFT equations of state. Industrial & Engineering Chemistry Research. doi:10.1021/acs.iecr.2c03464\n\n\n\n\n\n","category":"type"},{"location":"eos/saft/#Clapeyron.ADPCSAFT","page":"SAFT and CPA Models","title":"Clapeyron.ADPCSAFT","text":"ADPCSAFTModel <: SAFTModel\nADPCSAFT(components; \nidealmodel = BasicIdeal,\nuserlocations = String[],\nideal_userlocations = String[],\nreference_state = nothing,\nverbose = false,\nassoc_options = AssocOptions())\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nr_c: Single Parameter (Float64)\nc1: Single Parameter (Float64)\nc2: Single Parameter (Float64)\nc3: Single Parameter (Float64)\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Single Parameter (Float64) - Segment Diameter [A°]\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K]\nk: Pair Parameter (Float64) (optional) - Binary Interaction Paramater (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\ntheta_c: Association Parameter (Float64)\n\nModel Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nr_c: Single Parameter (Float64)\nc1: Single Parameter (Float64)\nc2: Single Parameter (Float64)\nc3: Single Parameter (Float64)\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Pair Parameter (Float64) - Mixed segment Diameter [m]\nepsilon: Pair Parameter (Float64) - Mixed reduced dispersion energy[K]\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume\ntheta_c: Association Parameter (Float64)\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\nmodified Perturbed-Chain SAFT (PC-SAFT) with an association dependent hard sphere diameter.Currently only works for water.\n\nwarning: numerically unstable\nDue to its functional form, DAPT is numerically unstable. Please use big Floats for most calculations.\n\nReferences\n\nMarshall, B. D. (2021). A modified perturbed chain‐statistical associating fluid theory equation of state for water which includes an association dependent hard sphere diameter. AIChE Journal. American Institute of Chemical Engineers, 67(10). doi:10.1002/aic.17342\n\n\n\n\n\n","category":"type"},{"location":"eos/saft/#Clapeyron.LJSAFT","page":"SAFT and CPA Models","title":"Clapeyron.LJSAFT","text":"LJSAFTModel <: SAFTModel\n\nLJSAFT(components;\nidealmodel = BasicIdeal,\nuserlocations = String[],\nideal_userlocations = String[],\nreference_state = nothing,\nverbose = false,\nassoc_options = AssocOptions())\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nb: Single Parameter (Float64) - Segment Volume [dm^3/mol]\nT_tilde: Single Parameter (Float64) - Lennard-Jones attraction parameter  [K]\nk: Pair Parameter (Float64) (optional) - Binary Interaction Paramater for energy(no units)\nzeta: Pair Parameter (Float64) - Binary Interaction Paramater for volume (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume [m^3]\n\nModel Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nb: Pair Parameter (Float64) - Mixed segment covolume [dm^3/mol]\nT_tilde: Pair Parameter (Float64) - Mixed Lennard-Jones attraction parameter [K]\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\nPerturbed-Chain SAFT (PC-SAFT)\n\nReferences\n\nKraska, T., & Gubbins, K. E. (1996). Phase equilibria calculations with a modified SAFT equation of state. 1. Pure alkanes, alkanols, and water. Industrial & Engineering Chemistry Research, 35(12), 4727–4737. doi:10.1021/ie9602320\n\n\n\n\n\n","category":"type"},{"location":"eos/saft/#Clapeyron.softSAFT","page":"SAFT and CPA Models","title":"Clapeyron.softSAFT","text":"softSAFTModel <: SAFTModel\n\nsoftSAFT(components; \nidealmodel = BasicIdeal,\nuserlocations = String[],\nideal_userlocations = String[],\nreference_state = nothing,\nverbose = false,\nassoc_options = AssocOptions())\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Single Parameter (Float64) - Segment Diameter [A°]\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K]\nk: Pair Parameter (Float64) (optional) - Binary Interaction Paramater (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume [m^3]\n\nModel Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Pair Parameter (Float64) - Mixed segment Diameter [m]\nepsilon: Pair Parameter (Float64) - Mixed reduced dispersion energy[K]\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\nSoft SAFT, with Lennard-Jones function from Johnson et al. (1993)\n\nReferences\n\nJohnson, J. K., Zollweg, J. A., & Gubbins, K. E. (1993). The Lennard-Jones equation of state revisited. Molecular physics, 78(3), 591–618. doi:10.1080/00268979300100411\nFELIPE J. BLAS and LOURDES F. VEGA. (1997). Thermodynamic behaviour of homonuclear and heteronuclear Lennard-Jones chains with association sites from simulation and theory. Molecular physics, 92(1), 135–150. doi:10.1080/002689797170707\n\n\n\n\n\n","category":"type"},{"location":"eos/saft/#Clapeyron.softSAFT2016","page":"SAFT and CPA Models","title":"Clapeyron.softSAFT2016","text":"softSAFT2016Model <: softSAFTModel\n\nsoftSAFT2016(components; \nidealmodel = BasicIdeal,\nuserlocations = String[],\nideal_userlocations = String[],\nreference_state = nothing,\nverbose = false,\nassoc_options = AssocOptions())\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Single Parameter (Float64) - Segment Diameter [A°]\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K]\nk: Pair Parameter (Float64) (optional) - Binary Interaction Paramater (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume [m^3]\n\nModel Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Pair Parameter (Float64) - Mixed segment Diameter [m]\nepsilon: Pair Parameter (Float64) - Mixed reduced dispersion energy[K]\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\nSoft SAFT, with Lennard-Jones function from Thol et al. (2016)\n\nReferences\n\nFELIPE J. BLAS and LOURDES F. VEGA. (1997). Thermodynamic behaviour of homonuclear and heteronuclear Lennard-Jones chains with association sites from simulation and theory. Molecular physics, 92(1), 135–150. doi:10.1080/002689797170707\nThol, M., Rutkai, G., Köster, A., Lustig, R., Span, R., & Vrabec, J. (2016). Equation of state for the Lennard-Jones fluid. Journal of physical and chemical reference data, 45(2), 023101. doi:10.1063/1.4945000\n\n\n\n\n\n","category":"type"},{"location":"eos/saft/#Clapeyron.solidsoftSAFT","page":"SAFT and CPA Models","title":"Clapeyron.solidsoftSAFT","text":"solidsoftSAFTModel <: SAFTModel\n\nsolidsoftSAFT(components; \nidealmodel = BasicIdeal,\nuserlocations = String[],\nideal_userlocations = String[],\nreference_state = nothing,\nverbose = false,\nassoc_options = AssocOptions())\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Single Parameter (Float64) - Segment Diameter [A°]\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K]\nk: Pair Parameter (Float64) (optional) - Binary Interaction Paramater (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume [m^3]\n\nModel Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Pair Parameter (Float64) - Mixed segment Diameter [m]\nepsilon: Pair Parameter (Float64) - Mixed reduced dispersion energy[K]\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\nSoft SAFT equation of state for the solid phase.\n\nReferences\n\nJohnson, J. K., Zollweg, J. A., & Gubbins, K. E. (1993). Modelling the solid–liquid–vapour phase behaviour ofn-alkanes in a TPT-1framework. Molecular physics, 78(3), 591–618. doi:10.1080/00268979300100411\nFELIPE J. BLAS and LOURDES F. VEGA. (1997). Thermodynamic behaviour of homonuclear and heteronuclear Lennard-Jones chains with association sites from simulation and theory. Molecular physics, 92(1), 135–150. doi:10.1080/002689797170707\nRamírez-Carpio, V., Galindo, A., & Gil-Villegas, A. (2023). Modelling the solid–liquid–vapour phase behaviour of n -alkanes in a TPT-1 framework. Molecular Physics, 121(19–20). doi:10.1080/00268976.2023.2204150\n\n\n\n\n\n","category":"type"},{"location":"eos/saft/#Clapeyron.SAFTVRSW","page":"SAFT and CPA Models","title":"Clapeyron.SAFTVRSW","text":"SAFTVRSWModel <: SAFTModel\n\nSAFTVRSW(components;\nidealmodel = BasicIdeal,\nuserlocations = String[],\nideal_userlocations = String[],\nreference_state = nothing,\nverbose = false,\nassoc_options = AssocOptions())\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Single Parameter (Float64) - Segment Diameter [A°]\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K]\nlambda: Single Parameter (Float64) - Soft Well range parameter (no units)\nk: Pair Parameter (Float64) (optional) - Binary Interaction Paramater (no units)\nl: Pair Parameter (Float64) (optional) - Binary Interaction Paramater (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume [m^3]\n\nModel Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Pair Parameter (Float64) - Mixed segment Diameter [m]\nlambda: Pair Parameter (Float64) - Mixed Soft Well range parameter (no units)\nepsilon: Pair Parameter (Float64) - Mixed reduced dispersion energy[K]\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\nSAFT, Variable Range (VR) ,Square Well (SW)\n\nReferences\n\nGil-Villegas, A., Galindo, A., Whitehead, P. J., Mills, S. J., Jackson, G., & Burgess, A. N. (1997). Statistical associating fluid theory for chain molecules with attractive potentials of variable range. The Journal of chemical physics, 106(10), 4168–4186. doi:10.1063/1.473101\n\n\n\n\n\n","category":"type"},{"location":"eos/saft/#Clapeyron.SAFTVRMie","page":"SAFT and CPA Models","title":"Clapeyron.SAFTVRMie","text":"SAFTVRMieModel <: SAFTModel\n\nSAFTVRMie(components;\nidealmodel = BasicIdeal,\nuserlocations = String[],\nideal_userlocations = String[],\nreference_state = nothing,\nverbose = false,\nassoc_options = AssocOptions())\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Single Parameter (Float64) - Segment Diameter [A°]\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K]\nlambda_a: Pair Parameter (Float64) - Atractive range parameter (no units)\nlambda_r: Pair Parameter (Float64) - Repulsive range parameter (no units)\nk: Pair Parameter (Float64) (optional) - Binary Interaction Paramater (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume\n\nModel Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Pair Parameter (Float64) - Mixed segment Diameter [m]\nlambda_a: Pair Parameter (Float64) - Atractive range parameter (no units)\nlambda_r: Pair Parameter (Float64) - Repulsive range parameter (no units)\nepsilon: Pair Parameter (Float64) - Mixed reduced dispersion energy[K]\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\nSAFT-VR with Mie potential\n\nReferences\n\nLafitte, T., Apostolakou, A., Avendaño, C., Galindo, A., Adjiman, C. S., Müller, E. A., & Jackson, G. (2013). Accurate statistical associating fluid theory for chain molecules formed from Mie segments. The Journal of Chemical Physics, 139(15), 154504. doi:10.1063/1.4819786\nDufal, S., Lafitte, T., Haslam, A. J., Galindo, A., Clark, G. N. I., Vega, C., & Jackson, G. (2015). The A in SAFT: developing the contribution of association to the Helmholtz free energy within a Wertheim TPT1 treatment of generic Mie fluids. Molecular Physics, 113(9–10), 948–984. doi:10.1080/00268976.2015.1029027\n\n\n\n\n\n","category":"type"},{"location":"eos/saft/#Clapeyron.SAFTVRMie15","page":"SAFT and CPA Models","title":"Clapeyron.SAFTVRMie15","text":"SAFTVRMie15Model <: SAFTVRMieModel\n\nSAFTVRMie(components;\nidealmodel = BasicIdeal,\nuserlocations = String[],\nideal_userlocations = String[],\nreference_state = nothing,\nverbose = false,\nassoc_options = AssocOptions())\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Single Parameter (Float64) - Segment Diameter [A°]\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K]\nlambda_a: Pair Parameter (Float64) - Atractive range parameter (no units)\nlambda_r: Pair Parameter (Float64) - Repulsive range parameter (no units)\nk: Pair Parameter (Float64) (optional) - Binary Interaction Paramater (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume\n\nModel Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Pair Parameter (Float64) - Mixed segment Diameter [m]\nlambda_a: Pair Parameter (Float64) - Atractive range parameter (no units)\nlambda_r: Pair Parameter (Float64) - Repulsive range parameter (no units)\nepsilon: Pair Parameter (Float64) - Mixed reduced dispersion energy[K]\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\nSAFT-VR with Mie potential and the Mie association kernel\n\nReferences\n\nLafitte, T., Apostolakou, A., Avendaño, C., Galindo, A., Adjiman, C. S., Müller, E. A., & Jackson, G. (2013). Accurate statistical associating fluid theory for chain molecules formed from Mie segments. The Journal of Chemical Physics, 139(15), 154504. doi:10.1063/1.4819786\nDufal, S., Lafitte, T., Haslam, A. J., Galindo, A., Clark, G. N. I., Vega, C., & Jackson, G. (2015). The A in SAFT: developing the contribution of association to the Helmholtz free energy within a Wertheim TPT1 treatment of generic Mie fluids. Molecular Physics, 113(9–10), 948–984. doi:10.1080/00268976.2015.1029027\n\n\n\n\n\n","category":"type"},{"location":"eos/saft/#Clapeyron.SAFTVRQMie","page":"SAFT and CPA Models","title":"Clapeyron.SAFTVRQMie","text":"SAFTVRQMieModel <: SAFTVRMieModel\n\nSAFTVRQMie(components;\nidealmodel = BasicIdeal,\nuserlocations = String[],\nideal_userlocations = String[],\nreference_state = nothing,\nfh_order = :fh2,\nverbose = false)\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Single Parameter (Float64) - Segment Diameter [A°]\nlambda_a: Pair Parameter (Float64) - Atractive range parameter (no units)\nlambda_r: Pair Parameter (Float64) - Repulsive range parameter (no units)\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K]\n\nModel Parameters\n\nMw: Pair Parameter (Float64) - Mixed Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Pair Parameter (Float64) - Mixed segment Diameter [m]\nlambda_a: Pair Parameter (Float64) - Atractive range parameter (no units)\nlambda_r: Pair Parameter (Float64) - Repulsive range parameter (no units)\nepsilon: Pair Parameter (Float64) - Mixed reduced dispersion energy[K]\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\nQuantum-Corrected SAFT-VR Mie. In particular,The Feynman–Hibbs correction order can be modified by passing the fh_order keyword argument. The default is 2nd order (:fh2), but 1st order (:fh1) is also available.\n\nReferences\n\nAasen, A., Hammer, M., Ervik, Å., Müller, E. A., & Wilhelmsen, Ø. (2019). Equation of state and force fields for Feynman–Hibbs-corrected Mie fluids. I. Application to pure helium, neon, hydrogen, and deuterium. The Journal of Chemical Physics, 151(6), 064508. doi:10.1063/1.5111364\nAasen, A., Hammer, M., Müller, E. A., & Wilhelmsen, Ø. (2020). Equation of state and force fields for Feynman-Hibbs-corrected Mie fluids. II. Application to mixtures of helium, neon, hydrogen, and deuterium. The Journal of Chemical Physics, 152(7), 074507. doi:10.1063/1.5136079\n\n\n\n\n\n","category":"type"},{"location":"eos/saft/#Clapeyron.SAFTVRSMie","page":"SAFT and CPA Models","title":"Clapeyron.SAFTVRSMie","text":"SAFTVRSMieModel <: SAFTModel\n\nSAFTVRSMie(components;\nidealmodel = BasicIdeal,\nuserlocations = String[],\nideal_userlocations = String[],\nreference_state = nothing,\nverbose = false,\nassoc_options = AssocOptions())\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Single Parameter (Float64) - Segment Diameter [A°]\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K]\nlambda_a: Pair Parameter (Float64) - Atractive range parameter (no units)\nlambda_r: Pair Parameter (Float64) - Repulsive range parameter (no units)\nk: Pair Parameter (Float64) (optional) - Binary Interaction Paramater (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume\n\nModel Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Pair Parameter (Float64) - Mixed segment Diameter [m]\nlambda_a: Pair Parameter (Float64) - Atractive range parameter (no units)\nlambda_r: Pair Parameter (Float64) - Repulsive range parameter (no units)\nepsilon: Pair Parameter (Float64) - Mixed reduced dispersion energy[K]\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\nSAFT-VR with Mie potential for the solid phase using WCA perturbation theory.\n\nReferences\n\nJalani, Y., Ramrattana, N., Walker, P.J., Riedemann, A., Galindo, A., Mater, O. K., & Müller, E. A. (2024). SAFT-VR Mie Equation of State for the Solid and Fluid Phases. (in preparation)\n\n\n\n\n\n","category":"type"},{"location":"eos/saft/#Clapeyron.SAFTgammaMie","page":"SAFT and CPA Models","title":"Clapeyron.SAFTgammaMie","text":"SAFTgammaMie <: SAFTModel\n\nSAFTgammaMie(components;     idealmodel = BasicIdeal,     userlocations = String[],     groupuserlocations = String[],     idealuserlocations = String[],     epsilonmixing = :default,     referencestate = nothing,     verbose = false,     assoc_options = AssocOptions())\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nvst: Single Parameter (Float64) - Number of segments (no units)\nS: Single Parameter (Float64) - Shape factor for segment (no units)\nsigma: Single Parameter (Float64) - Segment Diameter [A°]\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K]\nlambda_a: Pair Parameter (Float64) - Atractive range parameter (no units)\nlambda_r: Pair Parameter (Float64) - Repulsive range parameter (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume\n\nModel Parameters\n\nsegment: Single Parameter (Float64) - Number of segments (no units)\nshapefactor: Single Parameter (Float64) - Shape factor for segment (no units)\nsigma: Pair Parameter (Float64) - Mixed segment Diameter [m]\nlambda_a: Pair Parameter (Float64) - Atractive range parameter (no units)\nlambda_r: Pair Parameter (Float64) - Repulsive range parameter (no units)\nepsilon: Pair Parameter (Float64) - Mixed reduced dispersion energy[K]\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume\nmixed_segment: Mixed Group Contribution Parameter: ∑nᵢₖνₖmₖ\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\nSAFT-γ-Mie EoS\n\ninfo: Info\nYou can choose between the Hudsen-McCoubrey combining rule (√(ϵᵢ*ϵⱼ)*(σᵢ^3 * σⱼ^3)/σᵢⱼ^6) or the default rule (√(ϵᵢ*ϵⱼ*(σᵢ^3 * σⱼ^3))/σᵢⱼ^3) by passing the epsilon_mixing argument. with arguments :default or :hudsen_mccoubrey\n\nReferences\n\nPapaioannou, V., Lafitte, T., Avendaño, C., Adjiman, C. S., Jackson, G., Müller, E. A., & Galindo, A. (2014). Group contribution methodology based on the statistical associating fluid theory for heteronuclear molecules formed from Mie segments. The Journal of Chemical Physics, 140(5), 054107. doi:10.1063/1.4851455\nDufal, S., Papaioannou, V., Sadeqzadeh, M., Pogiatzis, T., Chremos, A., Adjiman, C. S., … Galindo, A. (2014). Prediction of thermodynamic properties and phase behavior of fluids and mixtures with the SAFT-γ Mie group-contribution equation of state. Journal of Chemical and Engineering Data, 59(10), 3272–3288. doi:10.1021/je500248h\n\nList of available groups\n\nName Description\nCH3 Methyl\nCH2 Methylene\nCH \nC \naCH Aromatic CH\naCCH2 \naCCH \nCH2= Alkene group\nCH= \ncCH2 Cyclic alkane group\nCOOH Carboxylic acid group\nCOO Ester group\nOH Hydroxyl\nCH2OH Methylene hydroxyl group\nCHOH \nNH2 Amine group\nNH \nN \ncNH \ncN \nCH= \naCCH3 \naCOH \ncCH \ncCHNH \ncCHN \naCCOaC \naCCOOH \naCNHaC \nCH3CO \neO End ether oxygen\ncO Center ether oxygen\n\n\n\n\n\n","category":"type"},{"location":"eos/saft/#Clapeyron.structSAFTgammaMie","page":"SAFT and CPA Models","title":"Clapeyron.structSAFTgammaMie","text":"structSAFTgammaMie <: SAFTgammaMieModel\n\nstructSAFTgammaMie(components; \nidealmodel = BasicIdeal,\nuserlocations = String[],\ngroup_userlocations = String[],\nideal_userlocations = String[],\nreference_state = nothing,\nverbose = false,\nepsilon_mixing = :default,\nassoc_options = AssocOptions())\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nvst: Single Parameter (Float64) - Number of segments (no units)\nS: Single Parameter (Float64) - Shape factor for segment (no units)\nsigma: Single Parameter (Float64) - Segment Diameter [A°]\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K]\nlambda_a: Pair Parameter (Float64) - Atractive range parameter (no units)\nlambda_r: Pair Parameter (Float64) - Repulsive range parameter (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume\n\nModel Parameters\n\nsegment: Single Parameter (Float64) - Number of segments (no units)\nshapefactor: Single Parameter (Float64) - Shape factor for segment (no units)\nsigma: Pair Parameter (Float64) - Mixed segment Diameter [m]\nlambda_a: Pair Parameter (Float64) - Atractive range parameter (no units)\nlambda_r: Pair Parameter (Float64) - Repulsive range parameter (no units)\nepsilon: Pair Parameter (Float64) - Mixed reduced dispersion energy[K]\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume\nmixed_segment: Mixed Group Contribution Parameter: ∑nᵢₖνₖmₖ\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\ns-SAFT-γ-Mie EoS\n\nReferences\n\nShaahmadi,, F., Hurter, R.M., Burger, A.J., Cripwell, J.T. (2021). Improving the SAFT-γ Mie equation of state to account for functional group interactions in a structural (s-SAFT-γ Mie) framework: Linear and branched alkanes. The Journal of Chemical Physics, 154, 244102. doi:10.1063/5.0048315 \nSchulze-Hulbe, A., Shaahmadi, F., Burger, A.J., Cripwell, J.T. (2022). Extending the Structural (s)-SAFT-γ Mie Equation of State to Primary Alcohols. Industrial & Engineering Chemistry Research, 61 (33), 12208-12228. doi:10.1021/acs.iecr.2c00198\n\n\n\n\n\n","category":"type"},{"location":"eos/saft/#Clapeyron.DAPT","page":"SAFT and CPA Models","title":"Clapeyron.DAPT","text":"DAPTModel <: SAFTModel\nDAPT(components; \nidealmodel = BasicIdeal,\nuserlocations = String[],\nideal_userlocations = String[],\nreference_state = nothing,\nverbose = false,\nassoc_options = AssocOptions())\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nr_c: Single Parameter (Float64)\nlambda: Single Parameter (Float64)\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Single Parameter (Float64) - Segment Diameter [A°]\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K]\nk: Pair Parameter (Float64) (optional) - Binary Interaction Paramater (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\ntheta_c: Association Parameter (Float64)\n\nModel Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nr_c: Single Parameter (Float64)\nlambda: Single Parameter (Float64)\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Pair Parameter (Float64) - Mixed segment Diameter [m]\nepsilon: Pair Parameter (Float64) - Mixed reduced dispersion energy[K]\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\ntheta_c: Association Parameter (Float64)\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\nDoubly-Associated Perturbation Theory model. Currently only works for water.\n\nwarning: numerically unstable\nDue to its functional form, DAPT is numerically unstable. Please use big Floats for most calculations.\n\nReferences\n\nMarshall, B. D. (2019). A doubly associated reference perturbation theory for water. Fluid Phase Equilibria, 500(112252), 112252. doi:10.1016/j.fluid.2019.112252 \n\n\n\n\n\n","category":"type"},{"location":"eos/saft/#CPA-Models","page":"SAFT and CPA Models","title":"CPA Models","text":"","category":"section"},{"location":"eos/saft/#Clapeyron.CPA","page":"SAFT and CPA Models","title":"Clapeyron.CPA","text":"CPAModel <: EoSModel\n\nfunction CPA(components;\n    radial_dist::Symbol = :CS,\n    idealmodel = BasicIdeal,\n    cubicmodel = RK,\n    alpha = sCPAAlpha,\n    mixing = vdW1fRule,\n    activity = nothing,\n    translation = NoTranslation,\n    userlocations = String[],\n    ideal_userlocations = String[],\n    alpha_userlocations = String[],\n    activity_userlocations = String[],\n    mixing_userlocations = String[],\n    translation_userlocations = String[],\n    reference_state = nothing,\n    verbose = false,\n    assoc_options = AssocOptions())\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nTc: Single Parameter (Float64) - Critical Temperature [K]\na: Single Parameter (Float64) - Atraction parameter [m^6*Pa/mol]\nb: Single Parameter (Float64) - Covolume [m^3/mol]\nc1: Single Parameter (Float64) - α-function constant Parameter (no units)\nk: Pair Parameter (Float64) (optional) - Binary Interaction Paramater (no units)\nl: Pair Parameter (Float64) (optional) - Binary Interaction Paramater (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume [m^3]\n\nModel Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nTc: Single Parameter (Float64) - Critical Temperature [K]\na: Pair Parameter (Float64) - Mixed Atraction Parameter [m^6*Pa/mol]\nb: Pair Parameter (Float64) - Mixed Covolume [m^3/mol]\nc1: Single Parameter (Float64) - α-function constant Parameter (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [J]\nbondvol: Association Parameter (Float64) - Association Volume [m^3]\n\nInput models\n\nidealmodel: Ideal Model\ncubicmodel: Cubic Model\n\nDescription\n\nCubic Plus Association (CPA) EoS. Consists in the addition of a cubic part and an association part:\n\na_res(model::CPA) = a_res(model::Cubic) + a_assoc(model)\n\nThe radial_dist argument can be used to choose between a Carnahan-Starling form (CS, default) or the Kontogeorgis (KG) term, more widely known as s-CPA.\n\nReferences\n\nKontogeorgis, G. M., Michelsen, M. L., Folas, G. K., Derawi, S., von Solms, N., & Stenby, E. H. (2006). Ten years with the CPA (cubic-plus-association) equation of state. Part 1. Pure compounds and self-associating systems. Industrial & Engineering Chemistry Research, 45(14), 4855–4868. doi:10.1021/ie051305v\n\n\n\n\n\n","category":"type"},{"location":"eos/saft/#Clapeyron.sCPA","page":"SAFT and CPA Models","title":"Clapeyron.sCPA","text":"sCPAModel <: CPAModel\n\nfunction sCPA(components;\n    idealmodel = BasicIdeal,\n    radial_dist::Symbol = :KG,\n    cubicmodel = RK,\n    alpha = sCPAAlpha,\n    mixing = vdW1fRule,\n    activity = nothing,\n    translation = NoTranslation,\n    userlocations = String[],\n    ideal_userlocations = String[],\n    alpha_userlocations = String[],\n    activity_userlocations = String[],\n    mixing_userlocations = String[],\n    translation_userlocations = String[],\n    reference_state = nothing,\n    verbose = false,\n    assoc_options = AssocOptions())\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nTc: Single Parameter (Float64) - Critical Temperature [K]\na: Single Parameter (Float64) - Atraction parameter [m^6*Pa/mol]\nb: Single Parameter (Float64) - Covolume [m^3/mol]\nc1: Single Parameter (Float64) - α-function constant Parameter (no units)\nk: Pair Parameter (Float64) (optional) - Binary Interaction Paramater (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume [m^3]\n\nModel Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\na: Pair Parameter (Float64) - Mixed Atraction Parameter [m^6*Pa/mol]\nb: Pair Parameter (Float64) - Mixed Covolume [m^3/mol]\nc1: Single Parameter (Float64) - α-function constant Parameter (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [J]\nbondvol: Association Parameter (Float64) - Association Volume [m^3]\n\nInput models\n\nidealmodel: Ideal Model\ncubicmodel: Cubic Model\n\nDescription\n\nSimplified Cubic Plus Association (s-CPA) EoS. Consists in the addition of a cubic part and an association part:\n\na_res(model::CPA) = a_res(model::Cubic) + a_assoc(model)\n\nThe radial_dist argument can be used to choose between a Carnahan-Starling form (CS, default) or the Kontogeorgis (KG) term, more widely known as s-CPA. using sCPA(components, radial_dist =: CS) is equivalent to using the original CPA\n\nReferences\n\nKontogeorgis, G. M., Michelsen, M. L., Folas, G. K., Derawi, S., von Solms, N., & Stenby, E. H. (2006). Ten years with the CPA (cubic-plus-association) equation of state. Part 1. Pure compounds and self-associating systems. Industrial & Engineering Chemistry Research, 45(14), 4855–4868. doi:10.1021/ie051305v\n\n\n\n\n\n","category":"function"},{"location":"eos/saft/#Miscellaneous-Models","page":"SAFT and CPA Models","title":"Miscellaneous Models","text":"","category":"section"},{"location":"eos/saft/#Clapeyron.COFFEE","page":"SAFT and CPA Models","title":"Clapeyron.COFFEE","text":"COFFEEModel <: SAFTVRMieModel\n\nCOFFEE(components;\nidealmodel = BasicIdeal,\nuserlocations = String[],\nideal_userlocations = String[],\nreference_state = nothing,\nverbose = false,\nassoc_options = AssocOptions())\n\nInput parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Single Parameter (Float64) - Segment Diameter [A°]\nepsilon: Single Parameter (Float64) - Reduced dispersion energy  [K]\nk: Pair Parameter (Float64) (optional) - Binary Interaction Paramater (no units)\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume [m^3]\n\nModel Parameters\n\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nsegment: Single Parameter (Float64) - Number of segments (no units)\nsigma: Pair Parameter (Float64) - Mixed segment Diameter [m]\nepsilon: Pair Parameter (Float64) - Mixed reduced dispersion energy[K]\nepsilon_assoc: Association Parameter (Float64) - Reduced association energy [K]\nbondvol: Association Parameter (Float64) - Association Volume\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\nCo-Oriented Fluid Functional Equation for Electrostatic interactions (COFFEE)\n\nReferences\n\nLangenbach, K. (2017). Co-Oriented Fluid Functional Equation for Electrostatic interactions (COFFEE). Chemical Engineering Science, 174, 40-55 (2017). doi:10.1016/j.ces.2017.08.025\n\n\n\n\n\n","category":"type"},{"location":"faq/#Frequently-Asked-Questions","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"","category":"section"},{"location":"faq/#Why-there-isn't-a-default-model?","page":"Frequently Asked Questions","title":"Why there isn't a default model?","text":"","category":"section"},{"location":"faq/","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"Every model has tradeoffs:","category":"page"},{"location":"faq/","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"SAFT equations are good with liquid volume predictions, but struggle with conditions near the critical point.\nCubics are the fastest, but the liquid density deviates significantly from the experimental value if a translation rule is not used\nActivity coefficient models are not useful for high pressure conditions.\nReference Helmholtz equations of state (like the ones used by REFPROP) cannot be used to calculate spinodal points, specially far from the critical point, and they have poor extrapolation behaviour.\nA saturation Correlation will be faster for calculating saturation conditions than a helmholtz equation of state.","category":"page"},{"location":"faq/","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"In summary, the user should consider the conditions and type of properties when selecting an equation of state.","category":"page"},{"location":"faq/#Why-are-the-default-caloric-properties-so-bad?","page":"Frequently Asked Questions","title":"Why are the default caloric properties so bad?","text":"","category":"section"},{"location":"faq/","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"By Default, almost all models use BasicIdeal for their ideal model. This model assumes an isobaric heat capacity of Cp = 2.5R (the theoretical value for a monoatomic gas). If an user is only looking to calculate pressure‑dependent properties (equilibria, saturation, critical points, etc), the BasicIdeal model will not ask for additional parameters. Note that SingleFluid models (and by extension, MultiFluid models) have a reference ideal model included.","category":"page"},{"location":"faq/#Why-my-flash/equilibria-calculation-failed?","page":"Frequently Asked Questions","title":"Why my flash/equilibria calculation failed?","text":"","category":"section"},{"location":"faq/","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"There are a lot of motives, but a lot of those can be attributed by a bad initial point. While we try to provide good initial points for our existing equilibria methods in a best‑effort basis, conditions far from the ideal (like azeotropes) will cause equilibria methods to fail if the initial point is too far from the solution. We recommend to always try to provide an initial point for multicomponent properties, if that initial point is available.","category":"page"},{"location":"faq/#Why-is-my-equation-of-state-so-slow-to-evaluate?","page":"Frequently Asked Questions","title":"Why is my equation of state so slow to evaluate?","text":"","category":"section"},{"location":"faq/","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"There are two main causes for a slow function in julia:","category":"page"},{"location":"faq/","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"Performance Problems: For example, mutating a global variable, or changing the type of a variable mid-computation. Check Julia's Performance Tips. In the Clapeyron.jl context, type instability is the main cause of performance problems, due to how derivatives are calculated (via ForwardDiff.jl dual numbers). If the defined function is not stable for multiple number types, then it will be slower to evaluate:\nstruct MyvdW <: EoSModel\n    a::Float64\n    b::Float64\nend\n\n# bad\nfunction Clapeyron.a_res(model::MyvdW,V,T,z)\n    result = 0 # an integer type\n    n = sum(z)\n    a = model.a\n    b = model.b\n    rho  = n/V\n    result =  result - log1p(b*rho)  # will change to a value depending of the value of rho\n    result = result - a*rho/8.314/T  # will change to a value depending of the value of T\n    return result\nend\n\n# good\nfunction Clapeyron.a_res(model::MyvdW,V,T,z)\n    result = zero(Base.promote_eltype(model,V,T,z))  # the result value already considers the types of the model, V,T and the input amounts\n    n = sum(z)\n    a = model.a\n    b = model.b\n    rho  = n/V\n    result =  result - log1p(b*rho)\n    result = result - a*rho/8.314/T\n    return result\nend\nWhile julia is really good at inferring types in arithmetic operations (in the example above, return log1p(b*rho) - a*rho/8.314/T would work just as well), writting an equation of state in a type-stable way allows faster compilation and evaluation.\nAlgorithm Problems: The most common of those problems is calculating a variable over an over again in a loop. We recommend calculating everything that could be needed beforehand and passing those calculated variables along:\nfunction data(model::MyModel,V,T,z)\n    d = Clapeyron.d(model,V,T,z)\n    n = sum(z)\n    m = LinearAlgebra.dot(model.params.segment.values,z)/n  # ∑mᵢzᵢ\n    return (m,d,n)\nend\n\nfunction a_res(model::MyModel,V,T,z,mydata = data(model,V,T,z))\n    return a1(model,V,T,z,mydata) + a2(model,V,T,z,mydata)\nend\n\nfunction a1(model,V,T,Z,mydata = data(model,V,T,z))\n    m,d,n = mydata\n    # definition for a1\nend\n\nfunction a2(model,V,T,Z,mydata = data(model,V,T,z))\n    _,d,_ = mydata  # in this function, only d is used\n    # definition for a2\nend","category":"page"},{"location":"user_guide/custom_dtb/#Definitions","page":"-","title":"Definitions","text":"","category":"section"},{"location":"user_guide/custom_dtb/","page":"-","title":"-","text":"Within Clapeyron, we use CSV files to store our parameters. There are four types of database files for different types of parameters:","category":"page"},{"location":"user_guide/custom_dtb/","page":"-","title":"-","text":"Like parameters: These CSV files have the structure:\nClapeyron Database File  \n{MODEL NAME} Like Parameters  \nspecies param1 param2\nwater 1234 5.678\nThese are used for parameters which only refer to a single species (such as the critical temperature, molar mass, like segment size, number of segments). These types of files are also used for the ideal model databases (since all of these are just for like species).\nUnlike parameters: These CSV files have the structure:\nClapeyron Database File  \n{MODEL NAME} Unlike Parameters  \nspecies1 species2 param\nwater methanol 0.910\nThese are used for parameters which refer to a pair of different species (such as the unlike interaction parameter k_ij).\nAssociation parameters: These CSV files have the structure:\nClapeyron Database File    \n{MODEL NAME} Assoc Parameters    \nspecies1 site1 species2 site2 param\nwater H water e 1.234\nwater H methanol e 5.678\nmethanol H water e 5.678\nThese are used for parameters which refer to a pair of species and sites (such as the association potential depth, epsilon_assoc, and bonding volume, bondvol). Note that this can be for associations between the same species and different sites, or different species and different sites (as shown above).","category":"page"},{"location":"user_guide/custom_dtb/","page":"-","title":"-","text":"Note that it is extremely important that the cell A2 has the word 'Like', 'Unlike' or 'Assoc' in it so that Clapeyron can identify the type of parameters in it.","category":"page"},{"location":"user_guide/custom_dtb/","page":"-","title":"-","text":"Feel free to check these out in the package to see some better examples!","category":"page"},{"location":"user_guide/custom_dtb/","page":"-","title":"-","text":"note: Association Values are asymmetric!\nThere are cases where the association values are asymmetric (for example, water and acetonitrile), so if you are adding cross-association values for a component-site pair, remember to add the corresponding swapped value, like in the water–methanol example above.","category":"page"},{"location":"user_guide/custom_dtb/#Using-your-own-parameters","page":"-","title":"Using your own parameters","text":"","category":"section"},{"location":"user_guide/custom_dtb/","page":"-","title":"-","text":"If you have CSV files formatted as above with your own parameters, and you want to implement these into one of the existing equations of state in Clapeyron, all that is needed is to provide the path to those files in the definition of your model (note that ideal term related parameters are specified separately):","category":"page"},{"location":"user_guide/custom_dtb/","page":"-","title":"-","text":"model1 = PR([\"your_species_1\",\"your_species_2\"];userlocations=[\"path/to/your/database/\"], ideal_userlocations=[\"path/to/your/ideal_database\"])\nmodel2 = PCSAFT([\"your_species_1\",\"your_species_2\"];userlocations=[\"dtb_like\",\"dtb_unlike\",\"dtb_assoc\"],ideal_userlocations=[\"dtb_ideal\"])","category":"page"},{"location":"user_guide/custom_dtb/","page":"-","title":"-","text":"The rest works exactly as it normally would! We recommend reading the background documentation for the various models, as well as the getparams docs, to ensure the units of the parameters you provide are correct and how those parameters are parsed into each model.","category":"page"},{"location":"user_guide/custom_dtb/","page":"-","title":"-","text":"You can create those parameters without leaving the Julia REPL, by using Clapeyron.ParamTable. This function will create a temporary location on where a CSV containing the table is created:","category":"page"},{"location":"user_guide/custom_dtb/","page":"-","title":"-","text":"data = (species = [\"water\"],Mw = [18.0])\nfile = ParamTable(:single,data,name=\"water_mw\")\nmodel = PR([\"water\"],user_locations = [file])\nmodel.params.Mw[1]  # 18.0","category":"page"},{"location":"user_guide/custom_dtb/","page":"-","title":"-","text":"You can also write a CSV as a string an pass that directly:","category":"page"},{"location":"user_guide/custom_dtb/","page":"-","title":"-","text":"# Any string that starts with `Clapeyron Database File` will be parsed as a CSV file directly.\ncsv_data = \"\"\"Clapeyron Database File,\n       my water like parameters\n       species,Mw\n       water,19.0\n       \"\"\"\n\nmodel = PR([\"water\"],user_locations = [csv_data])\nmodel.params.Mw[1]  # 19.0","category":"page"},{"location":"eos/activity/#Index","page":"Activity Models","title":"Index","text":"","category":"section"},{"location":"eos/activity/","page":"Activity Models","title":"Activity Models","text":"Pages = [\"activity.md\"]","category":"page"},{"location":"eos/activity/#Activity-Models","page":"Activity Models","title":"Activity Models","text":"","category":"section"},{"location":"eos/activity/","page":"Activity Models","title":"Activity Models","text":"There are two alternatives on the definition of an activity model:","category":"page"},{"location":"eos/activity/","page":"Activity Models","title":"Activity Models","text":"Defining an excess Gibbs energy function\nDefining an activity coefficient function","category":"page"},{"location":"eos/activity/","page":"Activity Models","title":"Activity Models","text":"those two can be converted between one form to another via:","category":"page"},{"location":"eos/activity/","page":"Activity Models","title":"Activity Models","text":"gamma_i = fracpartialG^Epartialn_i","category":"page"},{"location":"eos/activity/","page":"Activity Models","title":"Activity Models","text":"lngamma_i = frac1RTfracpartialG^Epartialn_i","category":"page"},{"location":"eos/activity/","page":"Activity Models","title":"Activity Models","text":"When defining one form, the other is derived automatically.","category":"page"},{"location":"eos/activity/","page":"Activity Models","title":"Activity Models","text":"Those functions can also be derived from any arbitrary equation of state:","category":"page"},{"location":"eos/activity/","page":"Activity Models","title":"Activity Models","text":"fracpartialG^Epartialn_i= mu_i - mu^0_i","category":"page"},{"location":"eos/activity/","page":"Activity Models","title":"Activity Models","text":"Where mu_i and mu^0_i are the mixture and pure chemical potentials of component i. In this case, those potentials are dependent of the pressure, whereas activity models are usually only temperature and composition dependent.","category":"page"},{"location":"eos/activity/#Clapeyron.Wilson","page":"Activity Models","title":"Clapeyron.Wilson","text":"Wilson <: ActivityModel\nWilson(components;\npuremodel = PR,\nuserlocations = String[],\npure_userlocations = String[],\nverbose = false,\nreference_state = nothing)\n\nInput parameters\n\nTc: Single Parameter (Float64) - Critical Temperature [K]\nPc: Single Parameter (Float64) - Critical Pressure [Pa]\nacentricfactor: Single Parameter (Float64) - Acentric Factor\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\ng: Pair Parameter (Float64, asymetrical, defaults to 0) - Interaction Parameter\n\nmodel parameters\n\nTc: Single Parameter (Float64) - Critical Temperature [K]\nPc: Single Parameter (Float64) - Critical Pressure [Pa]\nZRA: Single Parameter (Float64) - Rackett compresibility factor\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\ng: Pair Parameter (Float64, asymetrical, defaults to 0) - Interaction Parameter\n\nInput models\n\npuremodel: model to calculate pure pressure-dependent properties\n\nDescription\n\nWilson activity model, with Rackett correlation for liquid volume:\n\nGᴱ = nRT∑xᵢlog(∑xⱼjΛᵢⱼ)\nΛᵢⱼ = exp(-gᵢⱼ/T)*Vⱼ/Vᵢ\nZRAᵢ = 0.29056 - 0.08775ωᵢ\nVᵢ = (RTcᵢ/Pcᵢ)ZRAᵢ^(1 + (1-T/Tcᵢ)^2/7)\n\nModel Construction Examples\n\n# Using the default database\nmodel = Wilson([\"water\",\"ethanol\"]) #Default pure model: PR\nmodel = Wilson([\"water\",\"ethanol\"],puremodel = BasicIdeal) #Using Ideal Gas for pure model properties\nmodel = Wilson([\"water\",\"ethanol\"],puremodel = PCSAFT) #Using Real Gas model for pure model properties\n\n# Passing a prebuilt model\n\nmy_puremodel = AbbottVirial([\"water\",\"ethanol\"]; userlocations = [\"path/to/my/db\",\"critical.csv\"])\nmixing = Wilson([\"water\",\"ethanol\"],puremodel = my_puremodel)\n\n# Using user-provided parameters\n\n# Passing files or folders\nmodel = Wilson([\"water\",\"ethanol\"];userlocations = [\"path/to/my/db\",\"wilson.csv\"])\n\n# Passing parameters directly\nmodel = Wilson([\"water\",\"ethanol\"],\n        userlocations = (g = [0.0 3988.52; 1360.117 0.0],\n                        Tc = [647.13, 513.92],\n                        Pc = [2.19e7, 6.12e6],\n                        acentricfactor = [0.343, 0.643],\n                        Mw = [18.015, 46.069])\n                        )\n\nReferences\n\nWilson, G. M. (1964). Vapor-liquid equilibrium. XI. A new expression for the excess free energy of mixing. Journal of the American Chemical Society, 86(2), 127–130. doi:10.1021/ja01056a002\n\n\n\n\n\n","category":"type"},{"location":"eos/activity/#Clapeyron.NRTL","page":"Activity Models","title":"Clapeyron.NRTL","text":"NRTL <: ActivityModel\n\nfunction NRTL(components;\npuremodel=PR,\nuserlocations = String[],\npure_userlocations = String[],\nverbose = false,\nreference_state = nothing)\n\nInput parameters\n\na: Pair Parameter (Float64, asymetrical, defaults to 0) - Interaction Parameter\nb: Pair Parameter (Float64, asymetrical, defaults to 0) - Interaction Parameter\nc: Pair Parameter (Float64, asymetrical, defaults to 0) - Interaction Parameter\nMw: Single Parameter (Float64) (Optional) - Molecular Weight [g/mol]\n\nInput models\n\npuremodel: model to calculate pure pressure-dependent properties\n\nDescription\n\nNRTL (Non Random Two Fluid) activity model:\n\nGᴱ = nRT∑[xᵢ(∑τⱼᵢGⱼᵢxⱼ)/(∑Gⱼᵢxⱼ)]\nGᵢⱼ exp(-cᵢⱼτᵢⱼ)\nτᵢⱼ = aᵢⱼ + bᵢⱼ/T\n\nModel Construction Examples\n\n# Using the default database\nmodel = NRTL([\"water\",\"ethanol\"]) #Default pure model: PR\nmodel = NRTL([\"water\",\"ethanol\"],puremodel = BasicIdeal) #Using Ideal Gas for pure model properties\nmodel = NRTL([\"water\",\"ethanol\"],puremodel = PCSAFT) #Using Real Gas model for pure model properties\n\n# Passing a prebuilt model\n\nmy_puremodel = AbbottVirial([\"water\",\"ethanol\"]; userlocations = [\"path/to/my/db\",\"critical.csv\"])\nmixing = NRTL([\"water\",\"ethanol\"],puremodel = my_puremodel)\n\n# Using user-provided parameters\n\n# Passing files or folders\nmodel = NRTL([\"water\",\"ethanol\"];userlocations = [\"path/to/my/db\",\"nrtl_ge.csv\"])\n\n# Passing parameters directly\nmodel = NRTL([\"water\",\"ethanol\"],\nuserlocations = (a = [0.0 3.458; -0.801 0.0],\n                b = [0.0 -586.1; 246.2 0.0],\n                c = [0.0 0.3; 0.3 0.0])\n            )\n\nReferences\n\nRenon, H., & Prausnitz, J. M. (1968). Local compositions in thermodynamic excess functions for liquid mixtures. AIChE journal. American Institute of Chemical Engineers, 14(1), 135–144. doi:10.1002/aic.690140124\n\n\n\n\n\n","category":"type"},{"location":"eos/activity/#Clapeyron.aspenNRTL","page":"Activity Models","title":"Clapeyron.aspenNRTL","text":"aspenNRTL <: ActivityModel\n\nfunction aspenNRTL(components;\npuremodel=PR,\nuserlocations = String[],\npure_userlocations = String[],\nverbose = false,\nreference_state = nothing)\n\nInput parameters\n\na0: Pair Parameter (Float64, asymetrical, defaults to 0) - Interaction Parameter\na1: Pair Parameter (Float64, asymetrical, defaults to 0) - Interaction Parameter\nt0: Pair Parameter (Float64, asymetrical, defaults to 0) - Interaction Parameter\nt1: Pair Parameter (Float64, asymetrical, defaults to 0) - Interaction Parameter\nt2: Pair Parameter (Float64, asymetrical, defaults to 0) - Interaction Parameter\nt3: Pair Parameter (Float64, asymetrical, defaults to 0) - Interaction Parameter\n\nInput models\n\npuremodel: model to calculate pure pressure-dependent properties\n\nDescription\n\nNRTL (Non Random Two Fluid) activity model:\n\nGᴱ = nRT∑[xᵢ(∑τⱼᵢGⱼᵢxⱼ)/(∑Gⱼᵢxⱼ)]\nGᵢⱼ exp(-αᵢⱼτᵢⱼ)\nαᵢⱼ = αᵢⱼ₀ + αᵢⱼ₁T\nτᵢⱼ = tᵢⱼ₀ + tᵢⱼ₁/T + tᵢⱼ₂*ln(T) + tᵢⱼ₃*T\n\nModel Construction Examples\n\n# Using the default database\nmodel = aspenNRTL([\"water\",\"ethanol\"]) #Default pure model: PR\nmodel = aspenNRTL([\"water\",\"ethanol\"],puremodel = BasicIdeal) #Using Ideal Gas for pure model properties\nmodel = aspenNRTL([\"water\",\"ethanol\"],puremodel = PCSAFT) #Using Real Gas model for pure model properties\n# Passing a prebuilt model\n\nmy_puremodel = AbbottVirial([\"water\",\"ethanol\"]; userlocations = [\"path/to/my/db\",\"critical.csv\"])\nmixing = aspenNRTL([\"water\",\"ethanol\"],puremodel = my_puremodel)\n\n# Using user-provided parameters\n\n# Passing files or folders\nmodel = aspenNRTL([\"water\",\"ethanol\"];userlocations = [\"path/to/my/db\",\"nrtl.csv\"])\n\n# Passing parameters directly\nmodel = aspenNRTL([\"water\",\"acetone\"],\nuserlocations = (a0 = [0.0 0.228632; 0.228632 0.0],\n                a1 = [0.0 0.000136; 0.000136 0.0],\n                t0 = [0.0 13.374756; 16.081848 0.0],\n                t1 = [0.0 -415.527344; -88.8125 0.0],\n                t2 = [0.0 -1.913689; -2.930901 0.0],\n                t3 = [0.0 0.00153; 0.005305 0.0])\n            )\n\nReferences\n\nRenon, H., & Prausnitz, J. M. (1968). Local compositions in thermodynamic excess functions for liquid mixtures. AIChE journal. American Institute of Chemical Engineers, 14(1), 135–144. doi:10.1002/aic.690140124\n\n\n\n\n\n","category":"type"},{"location":"eos/activity/#Clapeyron.UNIQUAC","page":"Activity Models","title":"Clapeyron.UNIQUAC","text":"UNIQUACModel <: ActivityModel\n\nUNIQUAC(components;\npuremodel = PR,\nuserlocations = String[], \npure_userlocations = String[],\nverbose = false,\nreference_state = nothing)\n\nInput parameters\n\na: Pair Parameter (Float64, asymetrical, defaults to 0) - Binary Interaction Energy Parameter\nr: Single Parameter (Float64)  - Normalized Van der Vals volume\nq: Single Parameter (Float64) - Normalized Surface Area\nq_p: Single Parameter (Float64) - Modified Normalized Surface Area \nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\n\nInput models\n\npuremodel: model to calculate pure pressure-dependent properties\n\nUNIQUAC (Universal QuasiChemical Activity Coefficients) activity model:\n\nGᴱ = nRT(gᴱ(comb) + gᴱ(res))\ngᴱ(comb) = ∑[xᵢlog(Φᵢ/xᵢ) + 5qᵢxᵢlog(θᵢ/Φᵢ)]\ngᴱ(res) = -∑xᵢqᵖᵢlog(∑θᵖⱼτⱼᵢ)\nθᵢ = qᵢxᵢ/∑qᵢxᵢ\nθᵖ = qᵖᵢxᵢ/∑qᵖᵢxᵢ\nΦᵢ = rᵢxᵢ/∑rᵢxᵢ\nτᵢⱼ = exp(-aᵢⱼ/T)\n\nModel Construction Examples\n\n# Using the default database\nmodel = UNIQUAC([\"water\",\"ethanol\"]) #Default pure model: PR\nmodel = UNIQUAC([\"water\",\"ethanol\"],puremodel = BasicIdeal) #Using Ideal Gas for pure model properties\nmodel = UNIQUAC([\"water\",\"ethanol\"],puremodel = PCSAFT) #Using Real Gas model for pure model properties\n\n# Passing a prebuilt model\n\nmy_puremodel = AbbottVirial([\"water\",\"ethanol\"]; userlocations = [\"path/to/my/db\",\"critical.csv\"])\nmixing = UNIQUAC([\"water\",\"ethanol\"],puremodel = my_puremodel)\n\n# Using user-provided parameters\n\n# Passing files or folders\nmodel = UNIQUAC([\"water\",\"ethanol\"];userlocations = [\"path/to/my/db\",\"uniquac_ge.csv\"])\n\n# Passing parameters directly\nmodel = UNIQUAC([\"water\",\"ethanol\"],\n        userlocations = (a = [0.0 378.1; 258.4 0.0], \n                        r = [0.92, 2.11],\n                        q = [1.4, 1.97],\n                        q_p = [1.0, 0.92],\n                        Mw = [18.015, 46.069])\n                    )\n\nReferences\n\nAbrams, D. S., & Prausnitz, J. M. (1975). Statistical thermodynamics of liquid mixtures: A new expression for the excess Gibbs energy of partly or completely miscible systems. AIChE journal. American Institute of Chemical Engineers, 21(1), 116–128. doi:10.1002/aic.690210115\n\n\n\n\n\n","category":"type"},{"location":"eos/activity/#Clapeyron.ogUNIFAC","page":"Activity Models","title":"Clapeyron.ogUNIFAC","text":"ogUNIFACModel <: UNIFACModel\n\nogUNIFAC(components;\npuremodel = PR, \nuserlocations = String[],\ngroup_userlocations = String[],\npure_userlocations = String[],\nverbose = false,\nreference_state = nothing)\n\nInput parameters\n\nR: Single Parameter (Float64)  - Normalized group Van der Vals volume\nQ: Single Parameter (Float64) - Normalized group Surface Area\nA: Pair Parameter (Float64, asymetrical, defaults to 0) - Binary group Interaction Energy Parameter\n\nInput models\n\npuremodel: model to calculate pure pressure-dependent properties\n\nUNIFAC (UNIQUAC Functional-group Activity Coefficients) activity model.\n\nOriginal formulation.\n\nThe Combinatorial part corresponds to an GC-averaged modified UNIQUAC model. The residual part iterates over groups instead of components.\n\nGᴱ = nRT(gᴱ(comb) + gᴱ(res))\n\nCombinatorial part:\n\ngᴱ(comb) = ∑[xᵢlog(Φᵢ/xᵢ) + 5qᵢxᵢlog(θᵢ/Φᵢ)]\nθᵢ = qᵢxᵢ/∑qᵢxᵢ\nΦᵢ = rᵢxᵢ/∑rᵢxᵢ\nrᵢ = ∑Rₖνᵢₖ for k ∈ groups\nqᵢ = ∑Qₖνᵢₖ for k ∈ groups\n\nResidual Part:\n\ngᴱ(residual) = -v̄∑XₖQₖlog(∑ΘₘΨₘₖ)\nv̄ = ∑∑xᵢνᵢₖ for k ∈ groups,  for i ∈ components\nXₖ = (∑xᵢνᵢₖ)/v̄ for i ∈ components \nΘₖ = QₖXₖ/∑QₖXₖ\nΨₖₘ = exp(-(Aₖₘ/T)\n\nReferences\n\nFredenslund, A., Gmehling, J., Michelsen, M. L., Rasmussen, P., & Prausnitz, J. M. (1977). Computerized design of multicomponent distillation columns using the UNIFAC group contribution method for calculation of activity coefficients. Industrial & Engineering Chemistry Process Design and Development, 16(4), 450–462. doi:10.1021/i260064a004\n\n\n\n\n\n","category":"type"},{"location":"eos/activity/#Clapeyron.ogUNIFAC2","page":"Activity Models","title":"Clapeyron.ogUNIFAC2","text":"ogUNIFACModel <: UNIFACModel\n\nogUNIFAC2(components;\npuremodel = PR, \nuserlocations = String[],\ngroup_userlocations = String[],\npure_userlocations = String[],\nverbose = false,\nreference_state = nothing)\n\nInput parameters\n\nR: Single Parameter (Float64)  - Normalized group Van der Vals volume\nQ: Single Parameter (Float64) - Normalized group Surface Area\nA: Pair Parameter (Float64, asymetrical, defaults to 0) - Binary group Interaction Energy Parameter\n\nInput models\n\npuremodel: model to calculate pure pressure-dependent properties\n\nUNIFAC 2.0 (UNIQUAC Functional-group Activity Coefficients) activity model. Original formulation. The method is identical to ogUNIFAC but with a new parameters fitted by matrix completion methods.\n\nReferences\n\nHayer, N., Wendel, T., Mandt, S., Hasse, H., Jirasek, F., Advancing Thermodynamic Group-Contribution Methods by Machine Learning: UNIFAC 2.0, Chemical Engineering Journal 504 (2025) 158667. 10.1016/j.cej.2024.158667.\n\n\n\n\n\n","category":"type"},{"location":"eos/activity/#Clapeyron.UNIFAC","page":"Activity Models","title":"Clapeyron.UNIFAC","text":"UNIFACModel <: ActivityModel\n\nUNIFAC(components;\npuremodel = PR,\nuserlocations = String[],\ngroup_userlocations = String[],\npure_userlocations = String[],\nverbose = false,\nreference_state = nothing)\n\nInput parameters\n\nR: Single Parameter (Float64)  - Normalized group Van der Vals volume\nQ: Single Parameter (Float64) - Normalized group Surface Area\nA: Pair Parameter (Float64, asymetrical, defaults to 0) - Binary group Interaction Energy Parameter\nB: Pair Parameter (Float64, asymetrical, defaults to 0) - Binary group Interaction Energy Parameter\nC: Pair Parameter (Float64, asymetrical, defaults to 0) - Binary group Interaction Energy Parameter\n\nInput models\n\npuremodel: model to calculate pure pressure-dependent properties\n\nDescription\n\nUNIFAC (UNIQUAC Functional-group Activity Coefficients) activity model. Modified UNIFAC (Dortmund) implementation. The Combinatorial part corresponds to an GC-averaged modified UNIQUAC model. The residual part iterates over groups instead of components.\n\nGᴱ = nRT(gᴱ(comb) + gᴱ(res))\n\nCombinatorial part:\n\ngᴱ(comb) = ∑[xᵢlog(Φ'ᵢ) + 5qᵢxᵢlog(θᵢ/Φᵢ)]\nθᵢ = qᵢxᵢ/∑qᵢxᵢ\nΦᵢ = rᵢxᵢ/∑rᵢxᵢ\nΦ'ᵢ = rᵢ^(0.75)/∑xᵢrᵢ^(0.75)\nrᵢ = ∑Rₖνᵢₖ for k ∈ groups\nqᵢ = ∑Qₖνᵢₖ for k ∈ groups\n\nResidual Part:\n\ngᴱ(residual) = -v̄∑XₖQₖlog(∑ΘₘΨₘₖ)\nv̄ = ∑∑xᵢνᵢₖ for k ∈ groups,  for i ∈ components\nXₖ = (∑xᵢνᵢₖ)/v̄ for i ∈ components\nΘₖ = QₖXₖ/∑QₖXₖ\nΨₖₘ = exp(-(Aₖₘ + BₖₘT + CₖₘT²)/T)\n\nReferences\n\nFredenslund, A., Gmehling, J., Michelsen, M. L., Rasmussen, P., & Prausnitz, J. M. (1977). Computerized design of multicomponent distillation columns using the UNIFAC group contribution method for calculation of activity coefficients. Industrial & Engineering Chemistry Process Design and Development, 16(4), 450–462. doi:10.1021/i260064a004\nWeidlich, U.; Gmehling, J. A modified UNIFAC model. 1. Prediction of VLE, hE, and.gamma..infin. Ind. Eng. Chem. Res. 1987, 26, 1372–1381.\n\nList of groups available\n\nName Description\nCH3 Methyl group\nCH2 Methylene group\nCH \nC \nCH2=CH \nCH=CH \nCH2=C \nCH=C \nACH Aromatic CH\nAC \nACCH3 \nACCH2 \nACCH \nOH (P) Primary alcohol\nCH3OH Methanol\nH2O Water\nACOH \nCH3CO Methyl ketone\nCH2CO Methylene ketone\nCHO \nCH3COO Acetate group\nCH2COO \nHCOO \nCH3O Methoxy group\nCH2O \nCHO \nTHF Tetrahydrofuran\nCH3NH2 Methylamine\nCH2NH2 \nCHNH2 \nCH3NH \nCH2NH \nCHNH \nCH3N \nCH2N \nACNH2 \nAC2H2N \nAC2HN \nAC2N \nCH3CN Acetonitrile\nCH2CN \nCOO Ester group\nCOOH Carboxylate group\nHCOOH Formic acid\nCH2CL \nCHCL \nCCL \nCH2CL2 Dichloromethane\nCHCL2 \nCCL2 \nCHCL3 Chloroform\nCCL3 \nCCL4 Carbon tetrachloride\nACCL \nCH3NO2 Nitromethane\nCH2NO2 \nCHNO2 \nACNO2 \nCS2 Carbon disulfide\nCH3SH Methanethiol\nCH2SH \nFURFURAL Furfural\nDOH \nI Iodine group\nBR Bromine group\nCH=-C \nC=-C \nDMSO Dimethyl sulfoxide\nACRY Acrylate\nCL-(C=C) \nC=C \nACF \nDMF Dimethylformamide\nHCON(CH2)2 \nCF3 \nCF2 \nCF \nCY-CH2 Cycloalkane group\nCY-CH \nCY-C \nOH (S) Second hydroxyl group\nOH (T) Tertiary hydroxyl group\nCY-CH2O \nTRIOXAN Trioxane\nCNH2 \nNMP N-Methylpyrrolidone\nNEP \nNIPP \nNTBP \nCONH2 \nCONHCH3 \nCONHCH2 \n\n\n\n\n\n","category":"type"},{"location":"eos/activity/#Clapeyron.UNIFAC2","page":"Activity Models","title":"Clapeyron.UNIFAC2","text":"UNIFACModel <: ActivityModel\n\nUNIFAC2(components;\npuremodel = PR,\nuserlocations = String[],\ngroup_userlocations = String[],\npure_userlocations = String[],\nverbose = false,\nreference_state = nothing)\n\nInput parameters\n\nR: Single Parameter (Float64)  - Normalized group Van der Vals volume\nQ: Single Parameter (Float64) - Normalized group Surface Area\nA: Pair Parameter (Float64, asymetrical, defaults to 0) - Binary group Interaction Energy Parameter\nB: Pair Parameter (Float64, asymetrical, defaults to 0) - Binary group Interaction Energy Parameter\nC: Pair Parameter (Float64, asymetrical, defaults to 0) - Binary group Interaction Energy Parameter\n\nInput models\n\npuremodel: model to calculate pure pressure-dependent properties\n\nDescription\n\nUNIFAC 2.0 activity model. Modified UNIFAC 2.0 (Dortmund) implementation. The method is identical to UNIFAC but with a new parameters fitted by matrix completion methods.\n\nReferences\n\nHayer, N., Hasse, H., Jirasek, F., Modified UNIFAC 2.0 - A Group-Contribution Method Completed with Machine Learning. Arxive preprint (2024). 10.48550/arXiv.2412.12962\n\n).\n\n\n\n\n\n","category":"type"},{"location":"eos/activity/#Clapeyron.PSRKUNIFAC","page":"Activity Models","title":"Clapeyron.PSRKUNIFAC","text":"PSRKUNIFAC(components;\npuremodel = BasicIdeal,\nuserlocations = String[],\ngroup_userlocations = String[],\npure_userlocations = String[],\nverbose = false,\nreference_state = nothing)\n\nInput parameters\n\nR: Single Parameter (Float64)  - Normalized group Van der Vals volume\nQ: Single Parameter (Float64) - Normalized group Surface Area\nA: Pair Parameter (Float64, asymetrical, defaults to 0) - Binary group Interaction Energy Parameter\nB: Pair Parameter (Float64, asymetrical, defaults to 0) - Binary group Interaction Energy Parameter\nC: Pair Parameter (Float64, asymetrical, defaults to 0) - Binary group Interaction Energy Parameter\n\nInput models\n\npuremodel: model to calculate pure pressure-dependent properties\n\nDescription\n\nUNIFAC (UNIQUAC Functional-group Activity Coefficients) activity model.\n\nModified UNIFAC (Dortmund) implementation, with parameters tuned to the Predictive Soave-Redlich-Kwong (PSRK) EoS.\n\nReferences\n\nFredenslund, A., Gmehling, J., Michelsen, M. L., Rasmussen, P., & Prausnitz, J. M. (1977). Computerized design of multicomponent distillation columns using the UNIFAC group contribution method for calculation of activity coefficients. Industrial & Engineering Chemistry Process Design and Development, 16(4), 450–462. doi:10.1021/i260064a004\nWeidlich, U.; Gmehling, J. A modified UNIFAC model. 1. Prediction of VLE, hE, and.gamma..infin. Ind. Eng. Chem. Res. 1987, 26, 1372–1381.\nHorstmann, S., Jabłoniec, A., Krafczyk, J., Fischer, K., & Gmehling, J. (2005). PSRK group contribution equation of state: comprehensive revision and extension IV, including critical constants and α-function parameters for 1000 components. Fluid Phase Equilibria, 227(2), 157–164. doi:10.1016/j.fluid.2004.11.002\"\n\n\n\n\n\n","category":"type"},{"location":"eos/activity/#Clapeyron.VTPRUNIFAC","page":"Activity Models","title":"Clapeyron.VTPRUNIFAC","text":"VTPRUNIFACModel <: UNIFACModel\n\nVTPRUNIFAC(components;\npuremodel = BasicIdeal,\nuserlocations = String[],\npure_userlocations = String[],\nverbose = false,\nreference_state = nothing)\n\nInput parameters\n\nQ: Single Parameter (Float64) - Normalized group Surface Area\nA: Pair Parameter (Float64, asymetrical, defaults to 0) - Binary group Interaction Energy Parameter\nB: Pair Parameter (Float64, asymetrical, defaults to 0) - Binary group Interaction Energy Parameter\nC: Pair Parameter (Float64, asymetrical, defaults to 0) - Binary group Interaction Energy Parameter\n\nInput models\n\npuremodel: model to calculate pure pressure-dependent properties\n\nDescription\n\nUNIFAC (UNIQUAC Functional-group Activity Coefficients) activity model.\n\nModified UNIFAC (Dortmund) implementation, only residual part, activity model used for the Volume-Translated Peng-Robinson (VTPR) EoS.\n\nThe residual part iterates over groups instead of components.\n\nGᴱ = nRT(gᴱ(res))\ngᴱ(res) = -v̄∑XₖQₖlog(∑ΘₘΨₘₖ)\nv̄ = ∑∑xᵢνᵢₖ for k ∈ groups,  for i ∈ components\nXₖ = (∑xᵢνᵢₖ)/v̄ for i ∈ components\nΘₖ = QₖXₖ/∑QₖXₖ\nΨₖₘ = exp(-(Aₖₘ + BₖₘT + CₖₘT²)/T)\n\nReferences\n\nFredenslund, A., Gmehling, J., Michelsen, M. L., Rasmussen, P., & Prausnitz, J. M. (1977). Computerized design of multicomponent distillation columns using the UNIFAC group contribution method for calculation of activity coefficients. Industrial & Engineering Chemistry Process Design and Development, 16(4), 450–462. \"doi:10.1021/i260064a004\"\nWeidlich, U.; Gmehling, J. A modified UNIFAC model. 1. Prediction of VLE, hE, and.gamma..infin. Ind. Eng. Chem. Res. 1987, 26, 1372–1381.\nAhlers, J., & Gmehling, J. (2001). Development of an universal group contribution equation of state. Fluid Phase Equilibria, 191(1–2), 177–188. doi:10.1016/s0378-3812(01)00626-4\n\n\n\n\n\n","category":"type"},{"location":"eos/activity/#Clapeyron.UNIFACFV","page":"Activity Models","title":"Clapeyron.UNIFACFV","text":"UNIFACFVModel <: ActivityModel\n\nUNIFACFV(components;\npuremodel = PR,\nuserlocations = String[],\ngroup_userlocations = String[],\npure_userlocations = String[],\nverbose = false,\nreference_state = nothing)\n\nInput parameters\n\nvolume: Single Parameter (Float64)  - specific volume of species [g/cm^3]\nR: Single Parameter (Float64)  - Normalized group Van der Vals volume\nQ: Single Parameter (Float64) - Normalized group Surface Area\nA: Pair Parameter (Float64, asymetrical, defaults to 0) - Binary group Interaction Energy Parameter\nMw: Single Parameter (Float64) - Molecular weight of groups\n\nInput models\n\npuremodel: model to calculate pure pressure-dependent properties\n\nDescription\n\nUNIFACFV (UNIFAC Free Volume) activity model. specialized for solvent-polymer mixtures\n\nThe Combinatorial part corresponds to an GC-averaged modified UNIQUAC model.\n\nGᴱ = nRT(gᴱ(comb) + gᴱ(res) + gᴱ(FV))\n\nReferences\n\n\n\n\n\n","category":"type"},{"location":"eos/activity/#Clapeyron.UNIFACFVPoly","page":"Activity Models","title":"Clapeyron.UNIFACFVPoly","text":"UNIFACFVPolyModel <: ActivityModel\n\nUNIFACFVPoly(components;\npuremodel = PR,\nuserlocations = String[],\npure_userlocations = String[],\nverbose = false,\nreference_state = nothing)\n\nInput parameters\n\nvolume: Single Parameter (Float64)  - specific volume of species [g/cm^3]\nc Single Parameter  (Float64)  - number of external degrees of freedom per solvent molecule\nR: Single Parameter (Float64)  - Normalized group Van der Vals volume\nQ: Single Parameter (Float64) - Normalized group Surface Area\nA: Pair Parameter (Float64, asymetrical, defaults to 0) - Binary group Interaction Energy Parameter\nMw: Single Parameter (Float64) - Molecular weight of groups\n\nInput models\n\npuremodel: model to calculate pure pressure-dependent properties\n\nDescription\n\nUNIFAC-FV (polymer) (UNIFAC Free Volume) activity model. specialized for polymer blends\n\nThe Combinatorial part corresponds to an GC-averaged modified UNIQUAC model.\n\nGᴱ = nRT(gᴱ(comb) + gᴱ(res) + gᴱ(FV))\n\n\n\n\n\n","category":"type"},{"location":"eos/activity/#Clapeyron.tcPRWilsonRes","page":"Activity Models","title":"Clapeyron.tcPRWilsonRes","text":"tcPRWilsonRes <: WilsonModel\ntcPRWilsonRes(components;\npuremodel = BasicIdeal,\nuserlocations = String[],\npure_userlocations = String[],\nverbose = false,\nreference_state = nothing)\n\nInput parameters\n\ng: Pair Parameter (Float64, asymetrical, defaults to 0) - Interaction Parameter\nv: Single Parameter (optional) (Float64) - individual volumes.\n\nInput models\n\npuremodel: model to calculate pure pressure-dependent properties\n\nDescription\n\ntc-PR-Wilson residual activity model, meant to used in combination with the tc-PR cubic EoS:\n\nGᴱᵣ = nRT( ∑xᵢlog(∑xⱼjΛᵢⱼ) - ∑xᵢ*(log(vᵢ/v) )\nΛᵢⱼ = exp(-gᵢⱼ/T)*Vⱼ/Vᵢ \n\nModel Construction Examples\n\n# Using the default database\nmodel = tcPRWilsonRes([\"water\",\"ethanol\"]) #Default pure model: PR\nmodel = tcPRWilsonRes([\"water\",\"ethanol\"],puremodel = BasicIdeal) #Using Ideal Gas for pure model properties\nmodel = tcPRWilsonRes([\"water\",\"ethanol\"],puremodel = PCSAFT) #Using Real Gas model for pure model properties\n\n# Passing a prebuilt model\n\nmy_puremodel = AbbottVirial([\"water\",\"ethanol\"]; userlocations = [\"path/to/my/db\",\"critical.csv\"])\nmixing = tcPRWilsonRes([\"water\",\"ethanol\"],puremodel = my_puremodel)\n\n# Using user-provided parameters\n\n# Passing files or folders\nmodel = tcPRWilsonRes([\"water\",\"ethanol\"];userlocations = [\"path/to/my/db\",\"tcpr_wilson.csv\"])\n\n# Passing parameters directly\nmodel = tcPRWilsonRes([\"water\",\"ethanol\"],userlocations = (;g = [0.0 3988.52; 1360.117 0.0]))\n\nReferences\n\nWilson, G. M. (1964). Vapor-liquid equilibrium. XI. A new expression for the excess free energy of mixing. Journal of the American Chemical Society, 86(2), 127–130. doi:10.1021/ja01056a002\nPiña-Martinez, A., Privat, R., Nikolaidis, I. K., Economou, I. G., & Jaubert, J.-N. (2021). What is the optimal activity coefficient model to be combined with the translated–consistent Peng–Robinson equation of state through advanced mixing rules? Cross-comparison and grading of the Wilson, UNIQUAC, and NRTL aE models against a benchmark database involving 200 binary systems. Industrial & Engineering Chemistry Research, 60(47), 17228–17247. doi:10.1021/acs.iecr.1c03003\n\n\n\n\n\n","category":"type"},{"location":"eos/activity/#Clapeyron.COSMOSAC02","page":"Activity Models","title":"Clapeyron.COSMOSAC02","text":"COSMOSAC02(components;\npuremodel = PR,\nuserlocations = String[],\npure_userlocations = String[],\nverbose = false,\nreference_state = nothing)\n\nInput parameters:\n\nPi :Single Parameter{String} \nV: Single Parameter{Float64}\nA: Single Parameter{Float64}\n\nDescription\n\nAn activity coefficient model using molecular solvation based on the COSMO-RS method.\n\nReferences\n\nKlamt, A. (1995). Conductor-like screening model for real solvents: A new approach to the quantitative calculation of solvation phenomena. Journal of Physical Chemistry, 99(7), 2224–2235. doi:10.1021/j100007a062\nLin, S-T. & Sandler, S.I. (2002). A priori phase equilibrium prediction from a segment contribution solvation model. Industrial & Engineering Chemistry Research, 41(5), 899–913. doi:10.1021/ie001047w\n\n\n\n\n\n","category":"type"},{"location":"eos/activity/#Clapeyron.COSMOSAC10","page":"Activity Models","title":"Clapeyron.COSMOSAC10","text":"COSMOSAC10(components;\npuremodel = PR,\nuserlocations = String[],\npure_userlocations = String[],\nverbose = false,\nreference_state = nothing)\n\nInput parameters:\n\nPnhb :Single Parameter{String}\nPOH :Single Parameter{String}\nPOT :Single Parameter{String}\nV: Single Parameter{Float64}\nA: Single Parameter{Float64}\n\nDescription\n\nAn activity coefficient model using molecular solvation based on the COSMO-RS method. Sigma profiles are now split by non-hydrogen bonding, hydrogen acceptor and hydrogen donor.\n\nReferences\n\nKlamt, A. (1995). Conductor-like screening model for real solvents: A new approach to the quantitative calculation of solvation phenomena. Journal of Physical Chemistry, 99(7), 2224–2235. doi:10.1021/j100007a062\nLin, S-T. & Sandler, S.I. (2002). A priori phase equilibrium prediction from a segment contribution solvation model. Industrial & Engineering Chemistry Research, 41(5), 899–913. doi:10.1021/ie001047w\nHsieh, C-H., Sandler, S.I., & Lin, S-T. (2010). Improvements of COSMO-SAC for vapor–liquid and liquid–liquid equilibrium predictions. Fluid Phase Equilibria, 297(1), 90-97. doi:10.1016/j.fluid.2010.06.011\n\n\n\n\n\n","category":"type"},{"location":"eos/activity/#Clapeyron.COSMOSACdsp","page":"Activity Models","title":"Clapeyron.COSMOSACdsp","text":"COSMOSACdsp(components;\npuremodel = PR,\nuserlocations = String[],\npure_userlocations = String[],\nverbose = false,\nreference_state = nothing)\n\nInput parameters:\n\nPnhb :Single Parameter{String} \nPOH :Single Parameter{String} \nPOT :Single Parameter{String} \nV: Single Parameter{Float64}\nA: Single Parameter{Float64}\nepsilon: Single Parameter{Float64}\nCOOH: Single Parameter{Float64}\nwater: Single Parameter{Float64}\nhb_acc: Single Parameter{Float64}\nhb_don: Single Parameter{Float64}\n\nDescription\n\nAn activity coefficient model using molecular solvation based on the COSMO-RS method. Sigma profiles are now split by non-hydrogen bonding, hydrogen acceptor and hydrogen donor. A dispersive correction is included.\n\nReferences\n\nKlamt, A. (1995). Conductor-like screening model for real solvents: A new approach to the quantitative calculation of solvation phenomena. Journal of Physical Chemistry, 99(7), 2224–2235. doi:10.1021/j100007a062\nLin, S-T. & Sandler, S.I. (2002). A priori phase equilibrium prediction from a segment contribution solvation model. Industrial & Engineering Chemistry Research, 41(5), 899–913. doi:10.1021/ie001047w\nHsieh, C-H., Sandler, S.I., & Lin, S-T. (2010). Improvements of COSMO-SAC for vapor–liquid and liquid–liquid equilibrium predictions. Fluid Phase Equilibria, 297(1), 90-97. doi:10.1016/j.fluid.2010.06.011\nHsieh, C-H., Lin, S-T. & Vrabec, J. (2014). Considering the dispersive interactions in the COSMO-SAC model for more accurate predictions of fluid phase behavior. Fluid Phase Equilibria, 367, 109-116. doi:10.1016/j.fluid.2014.01.032\n\n\n\n\n\n","category":"type"},{"location":"eos/activity/#ClapeyronHANNA.HANNA","page":"Activity Models","title":"ClapeyronHANNA.HANNA","text":"HANNA <: ActivityModel\nHANNA(components;\npuremodel = nothing,\nuserlocations = String[],\npure_userlocations = String[],\nverbose = false,\nreference_state = nothing)\n\nInput parameters\n\ncanonicalsmiles: canonical SMILES (using RDKit) representation of the components\nMw: Single Parameter (Float64) (Optional) - Molecular Weight [g/mol]\n\nInput models\n\npuremodel: model to calculate pure pressure-dependent properties\n\nDescription\n\nHard-Constraint Neural Network for Consistent Activity Coefficient Prediction (HANNA v1.0.0). The implementation is based on this Github repository. HANNA was trained on all available binary VLE data (up to 10 bar) and limiting activity coefficients from the Dortmund Data Bank. HANNA was only tested for binary mixtures so far. The extension to multicomponent mixtures is experimental.\n\nTo use the model, the package ClapeyronHANNA must be installed and loaded (see example below).\n\nExample\n\nusing Clapeyron, ClapeyronHANNA\n\ncomponents = [\"water\",\"isobutanol\"]\nMw = [18.01528, 74.1216]\nsmiles = [\"O\", \"CC(C)CO\"]\n\nmodel = HANNA(components,userlocations=(;Mw=Mw, canonicalsmiles=smiles))\n# model = HANNA(components) # also works if components are in the database \n\nReferences\n\nSpecht, T., Nagda, M., Fellenz, S., Mandt, S., Hasse, H., Jirasek, F., HANNA: Hard-Constraint Neural Network for Consistent Activity Coefficient Prediction. Chemical Science 2024. 10.1039/D4SC05115G.\n\n\n\n\n\n","category":"type"},{"location":"user_guide/custom_model/#Definitions","page":"-","title":"Definitions","text":"","category":"section"},{"location":"user_guide/custom_model/","page":"-","title":"-","text":"Within Clapeyron, it is possible to create your own model/equation of state whilst still using all of the property estimation tools we provide. In order to do this, you must create the model. We provide a macro to make it easy to set it up. If you wish to create a new model called CustomEoS, you just need call the @newmodel macro with three parameters:","category":"page"},{"location":"user_guide/custom_model/","page":"-","title":"-","text":"@newmodel CustomEoS CustomEosModel CustomEosParam","category":"page"},{"location":"user_guide/custom_model/","page":"-","title":"-","text":"Model struct name\nModel abstract type\nModel parameters struct","category":"page"},{"location":"user_guide/custom_model/","page":"-","title":"-","text":"We will now give a brief overview of each of these aspects.","category":"page"},{"location":"user_guide/custom_model/#Model-struct-name","page":"-","title":"Model struct name","text":"","category":"section"},{"location":"user_guide/custom_model/","page":"-","title":"-","text":"This is the concrete type, which is simply the name of the equation of state which will be used to generate the model. Within Clapeyron, we've tried to keep these names as obvious as possible (e.g. vdW, PR, PCSAFT, SAFTVRMie, GERG2008, etc.). For your own model, this can be whatever you want as long is the identification makes sense to you.","category":"page"},{"location":"user_guide/custom_model/#Model-abstract-type","page":"-","title":"Model abstract type","text":"","category":"section"},{"location":"user_guide/custom_model/","page":"-","title":"-","text":"In Julia, objects can only be sub-types of abstract types (and not concrete types), which will allow you to inherit the behaviour of the parent(s). In order to maintain a hierarchy of models, we highly encourage you to create an abstract type for your model that is a subtype one of these families of EoS, and dispatch on this newly created abstract type instead of on your model's concrete type. This is not enforced, but we suffix all abstract types in this category with Model as a convention. The abstract type that is at the top of the hierarchy is EoSModel. From this parent, we branch into more specific EoS sub-types:","category":"page"},{"location":"user_guide/custom_model/","page":"-","title":"-","text":"SAFTModel: These are the models which have three parameters in common: segment size, sigma, potential depth, epsilon, and number of segments, m. All other SAFT-type models branch from this parent (PCSAFTModel, SAFTVRMieModel, softSAFTModel, etc.).\nCubicModel: These are the models whose parameters can be obtained from the critical temperature and pressure. With the exception of CPAModel, all cubics have a common structure where one can rearrange the equation for the pressure as a third-order polynomial. As such, we define a subtype of CubicModel, ABCubicModel (e.g. vdWModel, RKModel, SRKModel, PRModel).\nEmpiricHelmholtzModel: These are the high-accuracy, multi-parameter models for specific species or systems (e.g. GERG2008Model, IAPWS95Model). There is no general structure to the models and they are treated as self-contained.\nIdealModel: Often overlooked, these models supplement the SAFTModel and CubicModel by providing the ideal contribution. Whilst the parameters and structure aren't usually the same between ideal models, this is unnecessary as the equation for the pressure is always pV=Nk_mathrmBT.","category":"page"},{"location":"user_guide/custom_model/","page":"-","title":"-","text":"For example, if we wish to create a new EoS model called CustomEoS, we will create an abstract type CustomEoSModel, that is a sub-type of another abstract type, say CubicModel (but it could also inherit from something further down the hierarchy, like vdWModel):","category":"page"},{"location":"user_guide/custom_model/","page":"-","title":"-","text":"abstract type CustomEoSModel <: CubicModel end","category":"page"},{"location":"user_guide/custom_model/","page":"-","title":"-","text":"For models that are sub-types of SAFTModel or CubicModel, most methods will be instantly compatible because methods will be able to make use of a set of the EoS parameters for finding the initial guesses. If your model is not of either of these types, it will be necessary to define a few additional functions:","category":"page"},{"location":"user_guide/custom_model/","page":"-","title":"-","text":"lb_volume(model::CustomEoSModel,T,z): This must output the smallest possible value of the volume for your particular model using the model parameters. In SAFT equations, this is equivalent to a packing fraction of one (eta=1) whilst in cubics, it is equivalent to the b parameter.\nT_scale(model::CustomEoSModel,z): This must output the temperature scaling for your model using the model parameters. In SAFT equations, this is usually the potential depth whilst in cubics it is the critical temperature.\np_scale(model::CustomEoSModel,z): This must output the pressure scaling for your model using the model parameters. In cubics, this is the critical pressure whilst in SAFT we use a more complicated definition using the segment sizes and potential depths.","category":"page"},{"location":"user_guide/custom_model/#Model-parameters-struct","page":"-","title":"Model parameters struct","text":"","category":"section"},{"location":"user_guide/custom_model/","page":"-","title":"-","text":"The parameters for a particular system are all stored within a struct that is a subtype of EoSParam. By convention, we suffix these with Param. These structs should contain the model parameters, which comprise objects of types SingleParam{T}, PairParam{T}, and AssocParam{T}, where T is usually a base type (Float64, Integer, String, etc.). Below is an example of a generic param struct for a SAFT and cubic model.","category":"page"},{"location":"user_guide/custom_model/","page":"-","title":"-","text":"struct GenericSAFTParam <: EoSParam\n    Mw::SingleParam{Float64}\n    segment::SingleParam{Float64}\n    sigma::PairParam{Float64}\n    epsilon::PairParam{Float64}\n    epsilon_assoc::AssocParam{Float64}\n    bondvol::AssocParam{Float64}\nend","category":"page"},{"location":"user_guide/custom_model/","page":"-","title":"-","text":"struct GenericCubicParam <: EoSParam\n    Tc::SingleParam{Float64}\n    pc::SingleParam{Float64}\n    Mw::SingleParam{Float64}\n    a::PairParam{Float64}\n    b::PairParam{Float64}\nend","category":"page"},{"location":"user_guide/custom_model/","page":"-","title":"-","text":"The parameters are wrapped in one of the following structs:","category":"page"},{"location":"user_guide/custom_model/","page":"-","title":"-","text":"SingleParam{T}: These are the parameters associated with a pure species or indexed by a single index (i). For example, the molecular weight, number of segments, critical temperature and pressure.\nPairParam{T}: These are the parameters associated with a pair of species or indexed by two indices (i and j). If the two indices are the same (i=j), they refer to the like species, otherwise (ineq j), they refer to the unlike species. For example, the cubic a and b parameters, the SAFT segment size (sigma) and potential depth (epsilon) parameters.\nAssocParam{T}: There are the parameters associated with both a pair of species and association sites (see background documentation for what these are). They are indexed by four indices (the species i and j, and the sites a and b). For example, potential depth of the association interaction (epsilon_assoc) and the bonding volume (bondvol).","category":"page"},{"location":"user_guide/custom_model/","page":"-","title":"-","text":"If there exists a model parameter struct that contains exactly the same parameters as the one that you are about to create, you can also directly use that existing struct.","category":"page"},{"location":"user_guide/custom_model/#PC‑SAFT-Example","page":"-","title":"PC‑SAFT Example","text":"","category":"section"},{"location":"user_guide/custom_model/","page":"-","title":"-","text":"Once all the above has been defined, we are ready to build our own model. Let us imagine we are trying to implement PCSAFT.","category":"page"},{"location":"user_guide/custom_model/","page":"-","title":"-","text":"We first define the Model name, type and parameters:\n# Defining an abstract type for this model type\nabstract type PCSAFTModel <: SAFTModel end\n\n# Defining the parameters used by the model\nstruct PCSAFTParam <: EoSParam\n    Mw::SingleParam{Float64}\n    segment::SingleParam{Float64}\n    sigma::PairParam{Float64}\n    epsilon::PairParam{Float64}\n    epsilon_assoc::AssocParam{Float64}\n    bondvol::AssocParam{Float64}\nend\n\n# Creating a model struct called PCSAFT, which is a sub-type of PCSAFTModel, and uses parameters defined in PCSAFTParam\n@newmodel PCSAFT PCSAFTModel PCSAFTParam\nWe define some functions to inform how the model obtains their parameters, what are their references, and if we need to perform any rescaling, combining or renaming of input parameters:\n# Use this function if you want to provide default parameters for your new model.\n# Those locations are relative to the default database location.\nClapeyron.default_locations(::Type{PCSAFT}) = [\"PCSAFT_parameters/PCSAFT_like.csv\",\"PCSAFT_parameters/PCSAFT_unlike.csv\",\"PCSAFT_parameters/PCSAFT_assoc.csv\"]\n\n# Although optional, it's generally good practise to cite your models!\n# We use DOI references in general.\nClapeyron.default_references(::Type{PCSAFT}) = [\"10.1021/ie0003887\", \"10.1021/ie010954d\"]\n\n# Use this function if you need to perform any transformations, from the input parameters, to the final ones:\nfunction Clapeyron.transform_params(::Type{PCSAFT},params)\n    # params is a Dict{String,ClapeyronParam}\n    sigma = params[\"sigma\"]\n    # We rescale the sigma values\n    sigma.values .*= 1e-10\n\n    # If k is not provided, it will be not be considered\n    k = get(params,\"k\",nothing)\n\n    # In some cases, we may not have the unlike parameters and will need to use combining rules.\n    # You can also define your own combining rules for this.\n    sigma = sigma_LorentzBerthelot(sigma)\n    epsilon = epsilon_LorentzBerthelot(params[\"epsilon\"], k)\n\n    # Now, we put the parameters in the params dict\n    params[\"sigma\"] = sigma\n    params[\"epsilon\"] = epsilon\n\n    # And, finally, we return the dictionary with the final values\n    return params\nend\nThe @newmodel macro, in conjunction with the functions defined above, gets lowered to the following Julia code:\nstruct PCSAFT{T<:IdealModel} <: PCSAFTModel\n    components::Array{String,1}             # Components vector. The model gets it's length from here\n    sites::SiteParam                        # Parameter struct containing the sites and their amounts\n    params::PCSAFTParam                     # Struct specified in the macro\n    idealmodel::T                           # Model for the ideal part\n    assoc_options::Clapeyron.AssocOptions   # Options for the calculation of the association Helmholtz contribution\n    references::Array{String,1}             # DOI references\nend\n\n# Constructor generated by the macro:\n\nfunction PCSAFT(components;                     # Vector{String} containing a list of components\n                idealmodel=BasicIdeal,          # Default ideal model\n                userlocations=String[],         # User locations for the main model\n                ideal_userlocations=String[],   # User locations for the ideal model\n                verbose=false,                  # Verbosity\n                assoc_options = AssocOptions()) # Options for the calculation of the association contribution\n\n    # Obtain a Dict of parameters.\n    # We pass in custom locations through the optional parameter userlocations.\n    params = getparams(components,default_locations(model); userlocations=userlocations, verbose=verbose)\n\n    # We perform the specified transformation of parameters.\n    transform_params(PCSAFT,params)\n\n    # We perform mixing of the association parameters\n    # depending on the options contained in assoc_options\n    sigma = params[\"sigma\"]\n    epsilon_assoc = params[\"epsilon_assoc\"]\n    bondvol = params[\"bondvol\"]\n\n    # Combining rules for association.\n    # If you want to perform cross-association mixing, check the AssocOptions docs.\n    bondvol,epsilon_assoc = assoc_mix(bondvol,epsilon_assoc,sigma,assoc_options)\n\n    # Now we can create the parameter struct that we have defined.\n    packagedparams = PCSAFTParam(params[\"Mw\"], params[\"segment\"], sigma, params[\"epsilon\"], epsilon_assoc, bondvol)\n\n    references = default_references(PCSAFT)\n\n    # We initialize the ideal model provided.\n    init_idealmodel = Clapeyron.init_model(idealmodel,components,ideal_userlocations,verbose)\n\n    # Build the model.\n    model = PCSAFT(components,sites,packagedparams,init_idealmodel,assoc_options,references)\n\n    # Return the PCSAFT object that you have just created.\n    return model\nend\nYou can, of course, not use the macro, if your model depends itself on other models (like CPA depending on a cubic model),or requires more arguments than the ones generated by the macro (like mixing rules for cubics that require an activity model).\nDefine all of the model equations. We encourage you to use the full range of Unicode characters where it makes your code clearer to read!\nAs convention, the first four arguments should be model, V, T and z; any other variables should come after.\nIf we obey that convention, we may use the @f macro, which automatically substitutes the first four parameters for compactness. For example, @f(func,i,j) is equivalent to calling func(model,V,T,z,i,j).\nClapeyron obtains all the properties of a model by differentiating the total Helmholtz energy (eos) or the residual Helmholtz energy (eos_res). eos and eos_res themselves are defined in terms of the reduced ideal Helmholtz energy (a_res). In this case, we are going to define a_res for our own model:\nfunction Clapeyron.a_res(model::PCSAFTModel, V, T, z)\n    return @f(a_hc) + @f(a_disp) + @f(a_assoc)\nend\n\nfunction a_hc(model::PCSAFTModel, V, T, z)\n    x = z/∑(z)\n    m = model.params.segment.values\n    m̄ = ∑(x .* m)\n    return m̄*@f(a_hs) - ∑(x[i]*(m[i]-1)*log(@f(g_hs,i,i)) for i ∈ @comps)\nend\n\nfunction d(model::PCSAFTModel, V, T, z, i)\n    ϵii = model.params.epsilon.values[i,i]\n    σii = model.params.sigma.values[i,i]\n    return σii * (1 - 0.12exp(-3ϵii/T))\nend\n\nfunction ζ(model::PCSAFTModel, V, T, z, n)\n    ∑z = ∑(z)\n    x = z * (one(∑z)/∑z)\n    m = model.params.segment.values\n    res = N_A*∑z*π/6/V * ∑((x[i]*m[i]*@f(d,i)^n for i ∈ @comps))\nend\n\nfunction g_hs(model::PCSAFTModel, V, T, z, i, j)\n    di = @f(d,i)\n    dj = @f(d,j)\n    ζ2 = @f(ζ,2)\n    ζ3 = @f(ζ,3)\n    return 1/(1-ζ3) + di*dj/(di+dj)*3ζ2/(1-ζ3)^2 + (di*dj/(di+dj))^2*2ζ2^2/(1-ζ3)^3\nend\n\nfunction a_hs(model::PCSAFTModel, V, T, z)\n    ζ0 = @f(ζ,0)\n    ζ1 = @f(ζ,1)\n    ζ2 = @f(ζ,2)\n    ζ3 = @f(ζ,3)\n    return 1/ζ0 * (3ζ1*ζ2/(1-ζ3) + ζ2^3/(ζ3*(1-ζ3)^2) + (ζ2^3/ζ3^2-ζ0)*log(1-ζ3))\nend\n\n# INSERT REST OF CODE\nWith all the above defined in a single script, we can save the file as PCSAFT.jl and then include it in our Jupyter notebooks (for example) and use the model with all of our existing method:\ninclude(\"PCSAFT.jl\")\n\nmodel = PCSAFT([\"carbon dioxide\"])\n\np = 20e6\nT = range(290,460,length=200)\n\nCp = isobaric_heat_capacity.(model, p, T)\n\n(T_c, p_c, V_c) = crit_pure(model)\n\nT_sat = range(220,T_c,length=200)\n\n(p_sat, V_l_sat, V_v_sat) = saturation_pressure(model,T_sat)","category":"page"},{"location":"user_guide/custom_model/#sPC‑SAFT-Example","page":"-","title":"sPC‑SAFT Example","text":"","category":"section"},{"location":"user_guide/custom_model/","page":"-","title":"-","text":"Instead of developing an entirely new model, some of us may want to modify or extend an existing one. sPCSAFT is an example where we want to modify parts of regular PCSAFT but keep the rest the same. We can do this in a very succinct way making this new model a sub-type of the abstract type associated with another model.","category":"page"},{"location":"user_guide/custom_model/","page":"-","title":"-","text":"When we define the model type, sPCSAFT is a sub-type of PCSAFT:\nabstract type sPCSAFTModel <: PCSAFTModel end\nSince the parameters are the same, we can just use the same model params when creating the model:\n@newmodel sPCSAFT sPCSAFTModel PCSAFTParam\nThis may not be the case if we're extending a model (e.g. if we're adding polar or ionic terms, we may need to define a new parameter struct to include the new parameters).\nWhen defining the model equations, we only need to write those that have been changed in sPCSAFT:\nfunction a_hc(model::sPCSAFTModel, V, T, z)\n    x = z/sum(z)\n    m = model.params.segment.values\n    m̄ = ∑(x .* m)\n    return m̄*@f(a_hs) - (m̄-1)*log(@f(g_hs))\nend\n\nfunction g_hs(model::sPCSAFTModel, V, T, z)\n    η = @f(ζ,3)\n    return (1-η/2)/(1-η)^3\nend\n\nfunction a_hs(model::sPCSAFTModel, V, T, z)\n    η = @f(ζ,3)\n    return (4η-3η^2)/(1-η)^2\nend","category":"page"},{"location":"user_guide/custom_model/","page":"-","title":"-","text":"The rest works exactly as it would with the PCSAFT example.","category":"page"},{"location":"eos/empiric/#Index","page":"Empiric Helmholtz Models","title":"Index","text":"","category":"section"},{"location":"eos/empiric/","page":"Empiric Helmholtz Models","title":"Empiric Helmholtz Models","text":"Pages = [\"empiric.md\"]","category":"page"},{"location":"eos/empiric/#Empiric-Helmholtz-Models","page":"Empiric Helmholtz Models","title":"Empiric Helmholtz Models","text":"","category":"section"},{"location":"eos/empiric/","page":"Empiric Helmholtz Models","title":"Empiric Helmholtz Models","text":"Empiric (or MultiParameter) models in Clapeyron are composed of three different, but interacting parts:","category":"page"},{"location":"eos/empiric/","page":"Empiric Helmholtz Models","title":"Empiric Helmholtz Models","text":"Pure Fluid parameters\nMixing volume and temperature\nDeparture model","category":"page"},{"location":"eos/empiric/","page":"Empiric Helmholtz Models","title":"Empiric Helmholtz Models","text":"Pure Fluids are instantiated from CoolProp JSON files, via the SingleFluid struct. In theory, any pure fluid should be supported. Furthermore, there is support for using directly the fluids defined in the CoolProp library:","category":"page"},{"location":"eos/empiric/","page":"Empiric Helmholtz Models","title":"Empiric Helmholtz Models","text":"julia> SingleFluid(\"Ethanol\")\nERROR: cannot found component file R113. Try loading the CoolProp library by loading it.\nStacktrace:\n ....\njulia> using CoolProp  # loads the CoolProp library and allows access to their JSON.\njulia> SingleFluid(\"Ethanol\")\nMultiParameter Equation of state for Ethanol:\n Polynomial power terms: 6\n Exponential terms: 10\n Gaussian bell-shaped terms: 9","category":"page"},{"location":"eos/empiric/","page":"Empiric Helmholtz Models","title":"Empiric Helmholtz Models","text":"MultiComponent models are a collection of SingleFluid models + a mixing model + a departure model:","category":"page"},{"location":"eos/empiric/","page":"Empiric Helmholtz Models","title":"Empiric Helmholtz Models","text":"julia> model = GERG2008([\"water\",\"carbon dioxide\"])\nMultiFluid{EmpiricAncillary, AsymmetricMixing, EmpiricDeparture} with 2 components:\n \"water\"\n \"carbon dioxide\"\nContains parameters: Mw, Tc, Pc, Vc, acentricfactor, lb_volume\n\njulia> model.pures\n2-element Vector{SingleFluid{EmpiricAncillary}}:\n SingleFluid{EmpiricAncillary}(\"water\")\n SingleFluid{EmpiricAncillary}(\"carbon dioxide\")\n\njulia> model.mixing\nAsymmetricMixing with 2 components:\n \"water\"\n \"carbon dioxide\"\nContains parameters: gamma_T, gamma_v, beta_T, beta_v\n\njulia> model.departure\nEmpiricDeparture with 2 components:\n \"water\"\n \"carbon dioxide\"\nContains parameters: F, parameters","category":"page"},{"location":"eos/empiric/#Generic-Models","page":"Empiric Helmholtz Models","title":"Generic Models","text":"","category":"section"},{"location":"eos/empiric/#Clapeyron.SingleFluid","page":"Empiric Helmholtz Models","title":"Clapeyron.SingleFluid","text":"SingleFluid(components;\n        userlocations = String[],\n        ancillaries = nothing,\n        ancillaries_userlocations = String[],\n        estimate_pure = false,\n        coolprop_userlocations = true,\n        Rgas = nothing,\n        verbose = false)\n\nInput parameters\n\nJSON data (CoolProp and teqp format)\n\nInput models\n\nancillaries: a model that provides initial guesses for saturation calculations. if nothing, then they will be parsed from the input JSON.\n\nDescription\n\nInstantiates a single-component Empiric EoS model. Rgas can be used to set the value of the gas constant that is used during property calculations.\n\nIf coolprop_userlocations is true, then Clapeyron will try to look if the fluid is present in the CoolProp library.\n\nThe properties, ideal and residual terms can be accessed via the properties, ideal and residual fields respectively:\n\njulia> model = SingleFluid(\"water\")\nMultiParameter Equation of state for water:\n Polynomial power terms: 7\n Exponential terms: 44\n Gaussian bell-shaped terms: 3\n Non Analytic terms: 2\n\njulia> model.ideal\nIdeal MultiParameter coefficients:\n Lead terms: -8.3204464837497 + 6.6832105275932*τ + 3.00632*log(τ)\n Plank-Einstein terms: 5\n\njulia> model.residual\nResidual MultiParameter coefficients:\n Polynomial power terms: 7\n Exponential terms: 44\n Gaussian bell-shaped terms: 3\n Non Analytic terms: 2\n\n\n\n\n\n","category":"type"},{"location":"eos/empiric/#Clapeyron.SingleFluidIdeal","page":"Empiric Helmholtz Models","title":"Clapeyron.SingleFluidIdeal","text":"SingleFluidIdeal(components;\n    userlocations = String[],\n    Rgas = nothing,\n    verbose = false,\n    coolprop_userlocations = true)\n\nInput parameters\n\nJSON data (CoolProp and teqp format)\n\nInput models\n\nancillaries: a model that provides initial guesses for saturation calculations. if nothing, then they will be parsed from the input JSON.\n\nDescription\n\nInstantiates the ideal part of a single-component Empiric EoS model. Rgas can be used to set the value of the gas constant that is used during property calculations.\n\nIf coolprop_userlocations is true, then Clapeyron will try to look if the fluid is present in the CoolProp library.\n\nThe properties and ideal terms can be accessed via the properties and ideal fields respectively:\n\njulia> model = SingleFluidIdeal(\"water\")\nIdeal MultiParameter Equation of state for water:\n Lead terms: -8.3204464837497 + 6.6832105275932*τ + 3.00632*log(τ)\n Plank-Einstein terms: 5\n\njulia> model.ideal\nIdeal MultiParameter coefficients:\n Lead terms: -8.3204464837497 + 6.6832105275932*τ + 3.00632*log(τ)\n Plank-Einstein terms: 5\n\n\n\n\n\n","category":"type"},{"location":"eos/empiric/#Clapeyron.MultiFluid","page":"Empiric Helmholtz Models","title":"Clapeyron.MultiFluid","text":"MultiFluid(components;\n    idealmodel = nothing,\n    ideal_userlocations = String[],\n    pure_userlocations = String[],\n    mixing = AsymmetricMixing,\n    departure = EmpiricDeparture,\n    mixing_userlocations = String[],\n    departure_userlocations = String[],\n    estimate_pure = false,\n    estimate_mixing = :off,\n    coolprop_userlocations = true,\n    Rgas = nothing,\n    reference_state = nothing,\n     verbose = false)\n\nInput parameters\n\nJSON data (CoolProp and teqp format)\n\nInput models\n\nidealmodel: Ideal Model. if it is nothing, then it will parse the ideal model from the input JSON.\nmixing: mixing model for temperature and volume.\ndeparture: departure model\n\nDescription\n\nInstantiates a multi-component Empiric EoS model. Rgas can be used to set the value of the gas constant that is used during property calculations.\n\nIf coolprop_userlocations is true, then Clapeyron will try to look if the fluid is present in the CoolProp library.\n\nIf estimate_pure is true, then, if a JSON is not found, the pure model will be estimated, using the XiangDeiters model\n\nestimate_mixing is used to fill missing mixing values in the case of using AsymmetricMixing. on other mixing models it has no effect.\n\nestimate_mixing = :off will perform no calculation of mixing parameter, throwing an error if missing values are found.\nestimate_mixing = :lb will perform Lorentz-Berthelot estimation of missing mixing parameters. (γT = βT = γv = βv = 1.0). additionally, you can pass LorentzBerthelotMixing to use k and l BIP instead.\nestimate_mixing = :linear will perform averaging of γT and γv so that T(x) = ∑xᵢTᵢ and V(x) = ∑xᵢVᵢ on missing mixing parameters. Additionally, you can use LinearMixing to perform this directly.\n\nRgas sets the value of the gas constant to be used by the multifluid. The default is the following:\n\nIf Rgas is not specified and the input is a single component model, then the value of Rgas will be taken from the fluid json file.\nIf Rgas is not specified and the input is a multi-component model, then the value of Rgas will be set to Clapeyron.R̄ = Rgas() = 8.31446261815324 (2019 defined constant value)\n\n\n\n\n\n","category":"type"},{"location":"eos/empiric/#Clapeyron.EmpiricIdeal","page":"Empiric Helmholtz Models","title":"Clapeyron.EmpiricIdeal","text":"EmpiricIdeal(components;\npure_userlocations = String[],\nestimate_pure = false,\ncoolprop_userlocations = true,\nRgas = R̄,\nverbose = false)\n\nInput parameters\n\nJSON data (CoolProp and teqp format)\n\nDescription\n\nInstantiates the ideal part of a multi-component Empiric EoS model. Rgas can be used to set the value of the gas constant that is used during property calculations.\n\nIf coolprop_userlocations is true, then Clapeyron will try to look if the fluid is present in the CoolProp library.\n\nIf estimate_pure is true, then, if a JSON is not found, the pure model will be estimated, using the XiangDeiters model\n\n\n\n\n\n","category":"type"},{"location":"eos/empiric/#SingleFluid-Models","page":"Empiric Helmholtz Models","title":"SingleFluid Models","text":"","category":"section"},{"location":"eos/empiric/#Clapeyron.XiangDeiters","page":"Empiric Helmholtz Models","title":"Clapeyron.XiangDeiters","text":"XiangDeiters::SingleFluid\nXiangDeiters(component;\n    idealmodel = BasicIdeal,\n    userlocations = String[],\n    ideal_userlocations = String[],\n    Rgas = nothing,\n    verbose = false)\n\nInput parameters\n\nTc: Single Parameter (Float64) - Critical Temperature [K]\nPc: Single Parameter (Float64) - Critical Pressure [Pa]\nVc: Single Parameter (Float64) - Critical Volume [m3/mol]\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nacentricfactor: Single Parameter (Float64)\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\nXiang-Deiters model. estimates a single component Empiric EoS Model from critical values and the acentric factor.\n\nZc = PcVc/RTc\nθ = (Zc - 0.29)^2\naᵣ = a₀(δ,τ) + ω*a₁(δ,τ) + θ*a₂(δ,τ)\n\nRgas can be used to set the value of the gas constant that is used during property calculations.\n\nModel Construction Examples\n\n# Using the default database\nmodel = XiangDeiters(\"water\") #single input\nmodel = XiangDeiters([\"water\"]) #single input, as a vector\nmodel = XiangDeiters([\"water\"], idealmodel = ReidIdeal) #modifying ideal model\n\n# Passing a prebuilt model\n\nmy_idealmodel = MonomerIdeal([\"ethane\"])\nmodel = XiangDeiters([\"ethane\"],idealmodel = my_idealmodel)\n\n# User-provided parameters, passing files or folders\nmodel = XiangDeiters([\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"critical.csv\"])\n\n# User-provided parameters, passing parameters directly\n\nmodel = XiangDeiters([\"hydrogen\"];\n        userlocations = (;Tc = [44.492],\n                        Pc = [2679000],\n                        Vc = [4.25e-5],\n                        Mw = [2.0],\n                        acentricfactor = [-0.21])\n                    )\n\nreferences\n\nXiang, H. W., & Deiters, U. K. (2008). A new generalized corresponding-states equation of state for the extension of the Lee–Kesler equation to fluids consisting of polar and larger nonpolar molecules. Chemical Engineering Science, 63(6), 1490–1496. doi:10.1016/j.ces.2007.11.029\n\n\n\n\n\n","category":"function"},{"location":"eos/empiric/#Clapeyron.IAPWS95","page":"Empiric Helmholtz Models","title":"Clapeyron.IAPWS95","text":"IAPWS95 <: EmpiricHelmholtzModel\nIAPWS95()\n\nInput parameters\n\nNone\n\nDescription\n\nIAPWS95 (International Association for the Properties of Water and Steam) Pure water Model, 2018 update.\n\nδ = ρ/ρc\nτ = T/Tc\na⁰(δ,τ) = log(δ) + n⁰₁ + n⁰₂τ + n⁰₃log(τ) + ∑n⁰ᵢ(1-exp(-γ⁰ᵢτ)), i ∈ 4:8\naʳ(δ,τ)  = aʳ₁+ aʳ₂ + aʳ₃ + aʳ₄\naʳ₁(δ,τ)  = ∑nᵢδ^(dᵢ)τ^(tᵢ), i ∈ 1:7\naʳ₂(δ,τ)  = ∑nᵢexp(-δ^cᵢ)δ^(dᵢ)τ^(tᵢ), i ∈ 8:51\naʳ₃(δ,τ)  = ∑nᵢexp(-αᵢ(δ - εᵢ)^2 - βᵢ(τ - γᵢ)^2)δ^(dᵢ)τ^(tᵢ), i ∈ 52:54\naʳ₄(δ,τ) = ∑nᵢδΨΔ^(bᵢ), i ∈ 55:56\nΔ = θ^2 + Bᵢ[(δ - 1)^2]^aᵢ\nθ = (1 - τ) + Aᵢ[(δ - 1)^2]^(1/2βᵢ)\nΨ = exp(-Cᵢ(δ - 1)^2 - Dᵢ(τ - 1)^2)\n\nparameters n⁰,γ⁰,n,t,d,c,α,β,γ,ε,A,B,C,D where obtained via fitting.\n\nReferences\n\nWagner, W., & Pruß, A. (2002). The IAPWS formulation 1995 for the thermodynamic properties of ordinary water substance for general and scientific use. Journal of physical and chemical reference data, 31(2), 387–535. doi:10.1063/1.1461829\nIAPWS R6-95 (2018). Revised Release on the IAPWS Formulation 1995 for the Thermodynamic Properties of Ordinary Water Substance for General and Scientific Use\n\n\n\n\n\n","category":"function"},{"location":"eos/empiric/#Clapeyron.PropaneRef","page":"Empiric Helmholtz Models","title":"Clapeyron.PropaneRef","text":"PropaneRef <: EmpiricHelmholtzModel\nPropaneRef()\n\nInput parameters\n\nNone\n\nDescription\n\nPropane Reference Equation of State\n\nδ = ρ/ρc\nτ = T/Tc\na⁰(δ,τ) = log(δ) + n⁰₁ + n⁰₂τ + n⁰₃log(τ) + ∑n⁰ᵢ(1-exp(-γ⁰ᵢτ)), i ∈ 4:7\naʳ(δ,τ)  = aʳ₁+ aʳ₂ + aʳ₃\naʳ₁(δ,τ)  = ∑nᵢδ^(dᵢ)τ^(tᵢ), i ∈ 1:5\naʳ₂(δ,τ)  = ∑nᵢexp(-δ^cᵢ)δ^(dᵢ)τ^(tᵢ), i ∈ 6:11\naʳ₃(δ,τ)  = ∑nᵢexp(-ηᵢ(δ - εᵢ)^2 - βᵢ(τ - γᵢ)^2)δ^(dᵢ)τ^(tᵢ), i ∈ 12:18\n\n\nparameters  n⁰,γ⁰,n,t,d,c,η,β,γ,ε where obtained via fitting.\n\nReferences\n\nLemmon, E. W., McLinden, M. O., & Wagner, W. (2009). Thermodynamic properties of propane. III. A reference equation of state for temperatures from the melting line to 650 K and pressures up to 1000 MPa. Journal of Chemical and Engineering Data, 54(12), 3141–3180. doi:10.1021/je900217v\n\n\n\n\n\n","category":"function"},{"location":"eos/empiric/#Clapeyron.TholLJ","page":"Empiric Helmholtz Models","title":"Clapeyron.TholLJ","text":"TholLJ()\n\nLennard-Jones Reference equation of state. valid from 0.5 < T/Tc < 7 and pressures up to p/pc = 500. ``` τᵢ = 1.32/T δᵢ = n/0.31V a⁰ᵢ(δ,τ) = log(δᵢ) + 1.5log(τᵢ) - 1.515151515τᵢ + 6.262265814 a⁰(δ,τ,z) = ∑xᵢ(a⁰ᵢ + log(xᵢ)) aʳ(δ,τ)  = aʳ₁+ aʳ₂ + aʳ₃ + aʳ₄ aʳ₁(δ,τ)  = ∑nᵢδ^(dᵢ)τ^(tᵢ), i ∈ 1:6 aʳ₂(δ,τ)  = ∑nᵢexp(-δ^cᵢ)δ^(dᵢ)τ^(tᵢ), i ∈ 7:12 aʳ₃(δ,τ)  = ∑nᵢexp(-ηᵢ(δ - εᵢ)^2 - βᵢ(τ - γᵢ)^2)δ^(dᵢ)τ^(tᵢ), i ∈ 13:23\n\n\n\n\n\n","category":"function"},{"location":"eos/empiric/#Clapeyron.Ammonia2023","page":"Empiric Helmholtz Models","title":"Clapeyron.Ammonia2023","text":"Ammonia2023 <: EmpiricHelmholtzModel\nAmmonia2023()\n\nInput parameters\n\nNone\n\nDescription\n\nAmmonia Reference Equation of State (2023)\n\nδ = ρ/ρc\nτ = T/Tc\na⁰(δ,τ) = log(δ) + n⁰₁ + n⁰₂τ + n⁰₃log(τ) + ∑n⁰ᵢ(1-exp(-γ⁰ᵢτ)), i ∈ 4:7\naʳ(δ,τ)  = aʳ₁+ aʳ₂ + aʳ₃\naʳ₁(δ,τ)  = ∑nᵢδ^(dᵢ)τ^(tᵢ), i ∈ 1:5\naʳ₂(δ,τ)  = ∑nᵢexp(-δ^cᵢ)δ^(dᵢ)τ^(tᵢ), i ∈ 6:8\naʳ₃(δ,τ)  = ∑nᵢexp(-ηᵢ(δ - εᵢ)^2 - βᵢ(τ - γᵢ)^2)δ^(dᵢ)τ^(tᵢ), i ∈ 9:18\naʳ₃(δ,τ)  = ∑nᵢexp(-ηᵢ(δ - εᵢ)^2 - 1/(βᵢ*(τ -γᵢ)^2 + bᵢ))δ^(dᵢ)τ^(tᵢ), i ∈ 19:20\n\n\nparameters  n⁰,γ⁰,n,t,d,c,η,β,γ,ε where obtained via fitting.\n\nReferences\n\nGao, K., Wu, J., Bell, I. H., Harvey, A. H., & Lemmon, E. W. (2023). A reference equation of state with an associating term for the thermodynamic properties of ammonia. Journal of Physical and Chemical Reference Data, 52(1), 013102. doi:10.1063/5.0128269\n\n\n\n\n\n","category":"function"},{"location":"eos/empiric/#MultiComponent-Models","page":"Empiric Helmholtz Models","title":"MultiComponent Models","text":"","category":"section"},{"location":"eos/empiric/#Clapeyron.LJRef","page":"Empiric Helmholtz Models","title":"Clapeyron.LJRef","text":"LJRef <: EmpiricHelmholtzModel\nLJRef(components;\nuserlocations = String[],\nverbose = false)\n\nInput parameters\n\nsigma: Single Parameter (Float64) - particle size [Å]\nepsilon: Single Parameter (Float64) - dispersion energy [K]\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nk: Pair Parameter (Float64) (optional) - sigma mixing coefficient\n\nModel Parameters\n\nsigma: Pair Parameter (Float64) - particle size [m]\nepsilon: Pair Parameter (Float64) - dispersion energy [K]\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\n\nDescription\n\nLennard-Jones Reference equation of state. valid from 0.5 < T/Tc < 7 and pressures up to p/pc = 500.\n\nσᵢⱼ = (σᵢ + σⱼ)/2\nϵᵢⱼ = (1-kᵢⱼ)√(ϵⱼϵⱼ)\nσ^3 = Σxᵢxⱼσᵢⱼ^3\nϵ = Σxᵢxⱼϵᵢⱼσᵢⱼ^3/σ^3\nτᵢ = 1.32ϵᵢ/T\nδᵢ = n(Nₐσᵢ^3)/0.31V\na⁰ᵢ(δ,τ) = log(δᵢ) + 1.5log(τᵢ) - 1.515151515τᵢ + 6.262265814\na⁰(δ,τ,z) = ∑xᵢ(a⁰ᵢ + log(xᵢ))\nτ = 1.32ϵ/T\nδ = n(Nₐσ^3)/0.31V\naʳ(δ,τ)  = aʳ₁+ aʳ₂ + aʳ₃ + aʳ₄\naʳ₁(δ,τ)  = ∑nᵢδ^(dᵢ)τ^(tᵢ), i ∈ 1:6\naʳ₂(δ,τ)  = ∑nᵢexp(-δ^cᵢ)δ^(dᵢ)τ^(tᵢ), i ∈ 7:12\naʳ₃(δ,τ)  = ∑nᵢexp(-ηᵢ(δ - εᵢ)^2 - βᵢ(τ - γᵢ)^2)δ^(dᵢ)τ^(tᵢ), i ∈ 13:23\n\nparameters n,t,d,c,η,β,γ,ε where obtained via fitting.\n\nwarning: Multiple component warning\nThe original model was done with only one component in mind. to support multiple components, a VDW 1-fluid mixing rule (shown above) is implemented, but it is not tested.\n\nReferences\n\nThol, M., Rutkai, G., Köster, A., Lustig, R., Span, R., & Vrabec, J. (2016). Equation of state for the Lennard-Jones fluid. Journal of physical and chemical reference data, 45(2), 023101. doi:10.1063/1.4945000\n\n\n\n\n\n","category":"type"},{"location":"eos/empiric/#Clapeyron.GERG2008","page":"Empiric Helmholtz Models","title":"Clapeyron.GERG2008","text":"GERG2008::MultiFluid\n\nGERG2008(components;\n        Rgas = 8.314472,\n        reference_state = nothing,\n        verbose = false)\n\ninput Parameters\n\nNone\n\nDescription\n\nThe GERG-2008 Wide-Range Equation of State for Natural Gases and Other Mixtures. valid for 21 compounds (Clapeyron.GERG2008_names).\n\n\na = a⁰ + aʳ\n\na⁰ = ∑xᵢ(a⁰ᵢ(τᵢ,δᵢ) + ln(xᵢ))\nδᵢ = ρ/ρcᵢ\nτᵢ = Tcᵢ/T\na⁰ᵢ = ln(δᵢ) + R∗/R[n⁰ᵢ₋₁ + n⁰ᵢ₋₂τᵢ + n⁰ᵢ₋₃ln(τᵢ) + ∑n⁰ᵢ₋ₖln(abs(sinh(ϑ₀ᵢ₋ₖτᵢ))) + ∑n⁰ᵢ₋ₖln(cosh(ϑ₀ᵢ₋ₖτᵢ))]\nR∗ = 8.314510\nR = 8.314472\n\nτ = Tᵣ/T\nδ = ρ/ρᵣ\n(1/ρᵣ) = ∑∑xᵢxⱼβᵥ₋ᵢⱼγᵥ₋ᵢⱼ[(xᵢ+xⱼ)/(xᵢβᵥ₋ᵢⱼ^2 + xⱼ)]•1/8(1/∛ρcᵢ + 1/∛ρcⱼ)^2\nTᵣ = ∑∑xᵢxⱼβₜ₋ᵢⱼγₜ₋ᵢⱼ[(xᵢ+xⱼ)/(xᵢβₜ₋ᵢⱼ^2 + xⱼ)]•√(TcᵢTcⱼ)\naʳ = ∑xᵢaᵣᵢ(τ,δ) + ∑∑xᵢxⱼFᵢⱼaʳᵢⱼ(τ,δ)\naʳᵢ = ∑nᵢ₋ₖδ^(dᵢ₋ₖ)τ^(tᵢ₋ₖ)  + ∑nᵢ₋ₖδ^(dᵢ₋ₖ)τ^(tᵢ₋ₖ)exp(-δ^cᵢ₋ₖ)\naʳᵢⱼ = ∑nᵢⱼ₋ₖδ^(dᵢⱼ₋ₖ)τ^(tᵢⱼ₋ₖ)  + ∑nᵢⱼ₋ₖδ^(dᵢⱼ₋ₖ)τ^(tᵢⱼ₋ₖ)exp(ηᵢⱼ₋ₖ(δ-εᵢⱼ₋ₖ)^2 + βᵢⱼ₋ₖ(δ-γᵢⱼ₋ₖ))\n\nReferences\n\nKunz, O., & Wagner, W. (2012). The GERG-2008 wide-range equation of state for natural gases and other mixtures: An expansion of GERG-2004. Journal of Chemical and Engineering Data, 57(11), 3032–3091. doi:10.1021/je300655b\n\n\n\n\n\n","category":"function"},{"location":"eos/empiric/#Clapeyron.EOS_LNG","page":"Empiric Helmholtz Models","title":"Clapeyron.EOS_LNG","text":"EOS_LNG::MultiFluid\n\nEOS_LNG(components::Vector{String};\nRgas = 8.314472,\nreference_state = nothing,\nverbose = false)\n\ninput Parameters\n\nNone\n\nDescription\n\nEOS-LNG: A Fundamental Equation of State for the Calculation of Thermodynamic Properties of Liquefied Natural Gases. valid for 21 compounds (Clapeyron.GERG2008_names). the EoS has new binary-specific parameters for methane + n-butane, methane + isobutane, methane + n-pentane, and methane + isopentane.\n\nIt uses the same functional form as GERG2008.\n\nReferences\n\nThol, M., Richter, M., May, E. F., Lemmon, E. W., & Span, R. (2019). EOS-LNG: A fundamental equation of state for the calculation of thermodynamic properties of liquefied natural gases. Journal of Physical and Chemical Reference Data, 48(3), 033102. doi:10.1063/1.5093800\nKunz, O., & Wagner, W. (2012). The GERG-2008 wide-range equation of state for natural gases and other mixtures: An expansion of GERG-2004. Journal of Chemical and Engineering Data, 57(11), 3032–3091. doi:10.1021/je300655b\n\n\n\n\n\n","category":"function"},{"location":"eos/empiric/#Clapeyron.EOS_CG","page":"Empiric Helmholtz Models","title":"Clapeyron.EOS_CG","text":"EOS_LNG::MultiFluid\n\nEOS_LNG(components::Vector{String};\nRgas = R̄,\nreference_state = nothing,\nverbose = false)\n\ninput Parameters\n\nNone\n\nDescription\n\nEOS-LNG: A Fundamental Equation of State for the Calculation of Thermodynamic Properties of Liquefied Natural Gases. valid for 21 compounds (Clapeyron.GERG2008_names). the EoS has new binary-specific parameters for methane + n-butane, methane + isobutane, methane + n-pentane, and methane + isopentane.\n\nIt uses the same functional form as GERG2008.\n\nReferences\n\nEOS-CG: : A Mixture Model for the Calculation of Thermodynamic Properties of CCS Mixtures\n\nIt uses the same functional form as GERG2008.\n\nReferences\n\nNeumann, T., Herrig, S., Bell, I. H., Beckmüller, R., Lemmon, E. W., Thol, M., & Span, R. (2023). EOS-CG-2021: A mixture model for the calculation of thermodynamic properties of CCS mixtures. International Journal of Thermophysics, 44(12). doi:10.1007/s10765-023-03263-6\n\n\n\n\n\n","category":"function"},{"location":"eos/empiric/#Clapeyron.HelmAct","page":"Empiric Helmholtz Models","title":"Clapeyron.HelmAct","text":"HelmAct::MultiFluid\nHelmAct(components;\n    pure_userlocations = String[],\n    activity = PSRKUNIFAC,\n    activity_userlocations = String[],\n    estimate_pure = false,\n    coolprop_userlocations = false,\n    Rgas = R̄,\n    reference_state = nothing,\n    verbose = verbose)\n\ninput Parameters\n\nCoolProp JSON pure fluid files\n\nInput Models\n\nactivity: activity model.\n\nDescription\n\nCreates a Helmholtz + Activity (HelmAct) model:\n\naᵣ = ∑xᵢaᵣᵢ(δ,τ) + Δa\nΔa = gᴱᵣ/RT - log(1+bρ)/log(1+bρref) * ∑xᵢ(aᵣᵢ(δref,τ) - aᵣᵢ(δrefᵢ,τᵢ))\nτᵢ = Tcᵢ/T\nδref = ρref/ρr\nδrefᵢ = ρrefᵢ/ρcᵢ\nb = 1/1.17ρref\n\nwhere gᴱᵣ is the residual part of the excess gibbs free energy obtained from an activity model.\n\nReferences\n\nJäger, A., Breitkopf, C., & Richter, M. (2021). The representation of cross second virial coefficients by multifluid mixture models and other equations of state. Industrial & Engineering Chemistry Research, 60(25), 9286–9295. doi:10.1021/acs.iecr.1c01186\n\n\n\n\n\n","category":"function"},{"location":"eos/empiric/#Mixing-Models","page":"Empiric Helmholtz Models","title":"Mixing Models","text":"","category":"section"},{"location":"eos/empiric/#Clapeyron.LinearMixing","page":"Empiric Helmholtz Models","title":"Clapeyron.LinearMixing","text":"LinearMixing <: MultiFluidDepartureModel\nLinearMixing(components;\nuserlocations = String[],\nverbose = false)\n\nInput parameters\n\nnone\n\nDescription\n\nLinear mixing rule for MultiParameter EoS models:\n\nτ = T̄/T\nδ = V̄/V\nV̄ = ∑xᵢVcⱼ\nT̄ = ∑xᵢTcᵢ\n\nModel Construction Examples\n\n# Because this model does not have parameters, all those constructors are equivalent:\nmixing = LinearMixing()\nmixing = LinearMixing(\"water\")\nmixing = LinearMixing([\"water\",\"carbon dioxide\"])\n\n\n\n\n\n","category":"type"},{"location":"eos/empiric/#Clapeyron.AsymmetricMixing","page":"Empiric Helmholtz Models","title":"Clapeyron.AsymmetricMixing","text":"AsymmetricMixing <: MultiFluidDepartureModel\nAsymmetricMixing(components;\nuserlocations = String[],\nverbose = false)\n\nInput parameters\n\nbeta_v: Pair Parameter (Float64) - binary interaction parameter  (no units)\ngamma_v: Pair Parameter (Float64) - binary interaction parameter  (no units)\nbeta_T: Pair Parameter (Float64) - binary interaction parameter  (no units)\ngamma_T: Pair Parameter (Float64) - binary interaction parameter  (no units)\n\nDescription\n\nAsymmetric mixing rule for MultiParameter EoS models:\n\nτ = T̄/T\nδ = V̄/V\nV̄ = ∑xᵢxⱼ * βᵛᵢⱼ * γᵛᵢⱼ * (xᵢ + xⱼ)/(xᵢ*βᵛᵢⱼ^2 + xⱼ) * Vᵣᵢⱼ\nT̄ = ∑xᵢxⱼ * βᵛᵢⱼ * γᵀᵢⱼ * (xᵢ + xⱼ)/(xᵢ*βᵀᵢⱼ^2 + xⱼ) * Tᵣᵢⱼ\nVᵣᵢⱼ = 0.125*(∛Vcᵢ + ∛Vcⱼ)^3\nTᵣᵢⱼ = √(Tcᵢ*Tcⱼ)\n\nWith the asymmetry present in the β parameters:\n\nβᵛᵢⱼ = 1/βᵛⱼᵢ\nβᵀᵢⱼ = 1/βᵀⱼᵢ\n\nIf there is no data present, the parameters can be estimated:\n\nLinear estimation:\n\nβᵛᵢⱼ = βᵛᵢⱼ = 1\nγᵛᵢⱼ = 4*(Vcᵢ + Vcⱼ)/(∛Vcᵢ + ∛Vcⱼ)^3\nγᵀᵢⱼ = 0.5*(Tcᵢ + Tcⱼ)/√(Tcᵢ*Tcⱼ)\n\nLorentz-Berthelot Estimation:\n\nβᵛᵢⱼ = βᵛᵢⱼ = γᵛᵢⱼ = γᵀᵢⱼ = 1\n\nReferences\n\nR. Klimeck, Ph.D. dissertation, Ruhr-Universit¨at Bochum, 2000\n\n\n\n\n\n","category":"type"},{"location":"eos/empiric/#Clapeyron.LorentzBerthelotMixing","page":"Empiric Helmholtz Models","title":"Clapeyron.LorentzBerthelotMixing","text":"LorentzBerthelotMixing::AsymmetricMixing\nLorentzBerthelotMixing(components;\nuserlocations = String[],\nverbose = false)\n\nInput parameters\n\nk: Pair Parameter (Float64) - binary interaction parameter for temperature  (no units)\nl: Pair Parameter (Float64) - binary interaction parameter for volume (no units)\n\nDescription\n\nLorentz-Berthelot Mixing for MultiParameter EoS models:\n\nτ = T̄/T\nδ = V̄/V\nV̄ = ∑xᵢxⱼ * Vᵣᵢⱼ * (1 - lᵢⱼ)\nT̄ = ∑xᵢxⱼ * Tᵣᵢⱼ * (1 - kᵢⱼ)\nVᵣᵢⱼ = 0.125*(∛Vcᵢ + ∛Vcⱼ)^3\nTᵣᵢⱼ = √(Tcᵢ*Tcⱼ)\n\nmissing parameters will be assumed kᵢⱼ = lᵢⱼ = 0\n\n\n\n\n\n","category":"function"},{"location":"eos/empiric/#Departure-Models","page":"Empiric Helmholtz Models","title":"Departure Models","text":"","category":"section"},{"location":"eos/empiric/#Clapeyron.EmpiricDeparture","page":"Empiric Helmholtz Models","title":"Clapeyron.EmpiricDeparture","text":"EmpiricDeparture <: MultiFluidDepartureModel     EmpiricDeparture(components;     userlocations = String[],     verbose = false)\n\nInput parameters\n\nnone\n\nF: Pair Parameter (Float64) - binary interaction parameter (no units)\nparameters: Pair Parameter (String) - JSON data containing the departure terms for the binary pair\n\nDescription\n\nDeparture that uses empiric departure functions:\n\naᵣ = ∑xᵢaᵣᵢ(δ,τ) + Δa\nΔa = ∑xᵢxⱼFᵢⱼaᵣᵢⱼ(δ,τ)\n\naᵣᵢⱼ = ∑nᵢⱼ₋ₖδ^(dᵢⱼ₋ₖ)*τ^(tᵢⱼ₋ₖ) +\n    ∑nᵢⱼ₋ₖδ^(dᵢⱼ₋ₖ)τ^(tᵢⱼ₋ₖ)*exp(-gᵢⱼ₋ₖδ^lᵢⱼ₋ₖ) +\n    ∑nᵢⱼ₋ₖδ^(dᵢⱼ₋ₖ)τ^(tᵢⱼ₋ₖ)*exp(ηᵢⱼ₋ₖ(δ-εᵢⱼ₋ₖ)^2 + βᵢⱼ₋ₖ(τ-γᵢⱼ₋ₖ)^2)\n\n\n\n\n\n\n","category":"type"},{"location":"eos/empiric/#Clapeyron.departure_functions","page":"Empiric Helmholtz Models","title":"Clapeyron.departure_functions","text":"departure_functions(model::MultiFluid)\n\nif the model is using a EmpiricDeparture departure model, return the matrix of departure functions. you can set a departure in the following way:\n\nusing CoolProp #load CoolProp models\nmodel = MultiFluid([\"helium\",\"methanol\"],mixing = LorentzBerthelotMixing)\ndep_mat = departure_functions(model)\n\ndep = Dict(\n    #reduced CoolProp Departure format, you only need the type and parameters.\n    #ResidualHelmholtzPower would work too.\n    type => \"Exponential\",\n    n => [1,1,1,1],\n    t => [1,1,1,1],\n    d => [1,1,1,1],\n    l => [1,1,1,1],\n)\n\n\ndep_mat[1,2] = create_departure(dep,F)\n\n#if you want to delete a departure model:\n\ndep_mat[1,2] = nothing\nusing SparseArrays\n\n\n\n\n\n","category":"function"},{"location":"eos/empiric/#Clapeyron.create_departure","page":"Empiric Helmholtz Models","title":"Clapeyron.create_departure","text":"create_departure(data,F = 1.0;verbose = false)\n\nCreates a departure model for use in a MultiFluid model with EmpiricDeparture.\n\nIf data is a String and starts with { or [, it will be recognized as JSON text. the text will be parsed as a file location otherwise.  You can pass a Dict or NamedTuple if you want to skip the JSON parsing.\n\nExamples\n\nd1 = create_departure(\"/data/EthanePropane.json\",0.9) # reading from a file\n\ndep = Dict(\n    #reduced CoolProp Departure format, you only need the type and parameters.\n    #ResidualHelmholtzPower would work too.\n    :type => \"Exponential\",\n    :n => [1,1,1,1],\n    :t => [1,1,1,1],\n    :d => [1,1,1,1],\n    :l => [1,1,1,1],\n)\n\nd2 = create_departure(dep) #F is set to 1.0\n\n\n\n\n\n","category":"function"},{"location":"eos/empiric/#Clapeyron.GEDeparture","page":"Empiric Helmholtz Models","title":"Clapeyron.GEDeparture","text":"GEDeparture <: MultiFluidDepartureModel     GEDeparture(components;     activity = UNIFAC,     userlocations = String[],     verbose = false)\n\nInput parameters\n\nnone\n\nk1: Pair Parameter (Float64) - binary, T-dependent interaction parameter [K^-1]\n\nModel parameters\n\nvref: Single Parameter (Float64, calculated) - Reference pure molar volume [m3/mol]\n\nInput models\n\nactivity: activity model\n\nDescription\n\nDeparture that uses the residual excess gibbs energy from an activity model:\n\naᵣ = ∑xᵢaᵣᵢ(δ,τ) + Δa\nΔa = gᴱᵣ/RT - log(1+bρ)/log(1+bρref) * ∑xᵢ(aᵣᵢ(δref,τ) - aᵣᵢ(δrefᵢ,τᵢ))\nτᵢ = Tcᵢ/T\nδref = ρref/ρr\nδrefᵢ = ρrefᵢ/ρcᵢ\nb = 1/1.17ρref\n\nReferences\n\nJäger, A., Breitkopf, C., & Richter, M. (2021). The representation of cross second virial coefficients by multifluid mixture models and other equations of state. Industrial & Engineering Chemistry Research, 60(25), 9286–9295. doi:10.1021/acs.iecr.1c01186\n\n\n\n\n\n","category":"type"},{"location":"eos/empiric/#Clapeyron.QuadraticDeparture","page":"Empiric Helmholtz Models","title":"Clapeyron.QuadraticDeparture","text":"QuadraticDeparture <: MultiFluidDepartureModel\nQuadraticDeparture(components;\nuserlocations = String[],\nverbose = false)\n\nInput parameters\n\nk0: Pair Parameter (Float64) - binary interaction parameter  (no units)\nk1: Pair Parameter (Float64) - binary, T-dependent interaction parameter [K^-1]\n\nDescription\n\nDeparture that uses a quadratic mixing rule:\n\naᵣ = ∑xᵢxⱼaᵣᵢⱼ\naᵣᵢⱼ = 0.5*(aᵣᵢ + aᵣⱼ)*(1 - (k₀ + k₁T))\n\nReferences\n\nJäger, A., Breitkopf, C., & Richter, M. (2021). The representation of cross second virial coefficients by multifluid mixture models and other equations of state. Industrial & Engineering Chemistry Research, 60(25), 9286–9295. doi:10.1021/acs.iecr.1c01186\n\n\n\n\n\n","category":"type"},{"location":"theory/background/#Models","page":"-","title":"Models","text":"","category":"section"},{"location":"theory/background/","page":"-","title":"-","text":"Here, we give a high-level description of equations of state and the models provided by Clapeyron.","category":"page"},{"location":"theory/background/#Equations-of-state","page":"-","title":"Equations of state","text":"","category":"section"},{"location":"theory/background/","page":"-","title":"-","text":"An equation of state is a functional form, f (say), that allows us to obtain a thermodynamic property, F, at given conditions boldsymbolOmega:","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"F = f(boldsymbolOmegaboldsymbolXi).","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"There are many ways one can develop an equation of state, however, these must respect the constraints on the number of properties we can specify, as required by the Gibbs Phase Rule:","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"mathrmDoF = N_mathrmspecies - N_mathrmphase + 2","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"Here, mathrmDoF means \"Degrees of Freedom\"; this is the number of so-called intensive state properties (or, in other words, those that are independent of system size) that we can specify. As we can see, the largest number of degrees of freedom we can have is N_mathrmspecies+1; system size itself is not included so, in practice, this represents one more variable that we can specify, giving N_mathrmspecies+2. Thus, taking the simple case of a single species, we can specify at most three conditions in our system. For a traditional equation of state, we specify volume, V, temperature, T, and the size of the system – for example the number of particles, N, or moles, n; the equation of state then returns the pressure, p. Many modern equations of state are derived using what is known as the canonical ensemble (more information can be found in Statistical Mechanics textbooks) and, accordingly, the three variable chosen are again usually T, V and N; the output of these equations is usually the Helmholtz free energy, A.","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"Many equations of state are based on an underlying molecular model. Consequently, it is also typical for an equation of state to require parameters, boldsymbolXi, to model certain species. The nature of these parameters depends on the equation of state.","category":"page"},{"location":"theory/background/#Ideal-gas-equation-of-state","page":"-","title":"Ideal gas equation of state","text":"","category":"section"},{"location":"theory/background/","page":"-","title":"-","text":"One equation of state that most engineers and scientists should be very familiar with is the ideal gas equation, commonly expressed as:","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"pV = Nk_mathrmBT","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"where p is the pressure, N is the total number of particles and k_mathrmB is the Boltzmann constant. Ideal gas molecules are \"invisible\" to each other; there is zero interaction between ideal gas molecules (this is, in essence, the ideal gas model), so you can think of them as being infinitely small. This equation was first written down (although in slightly different form) in 1834 by Émile Clapeyron (in whose honour Clapeyron is named). Most (if not all) subsequent equations of state are descended from Clapeyron's equation, which is surprisingly appropriate for a wide variety of species in the gas phase at high enough temperature and low enough pressure.","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"Unfortunately, if we wish to determine other thermodynamic properties this equation is a little inconvenient. It would be much easier if it was expressed in the form of the free energy, from which other properties can then be evaluated using standard thermodynamic relationships. Accordingly, we could first integrate the above equation with respect to volume to determine the Helmholtz free energy:","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"A_mathrmideal =- int pdV =- Nk_mathrmBTlnV+c(TN)","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"This is still a little inconvenient, however, since we have to deal with a tricky constant of integration. Fortunately, we can instead derive A_mathrmideal from statistical mechanics (using just a few well-known results from quantum mechanics). Following this route, we obtain (for a pure component (i.e., a single species))","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"fracA_mathrmidealNk_mathrmBT = ln(rhoLambda^3)-1,","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"where rho = NV is the number density, and Lambda is the thermal de Broglie wavelength, which introduces the kinetic contributions to the free energy (strictly speaking, with this notation only translations are included). We can generalise this as a sum over species i for a multi-component mixture:","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"fracA_mathrmidealNk_mathrmBT = left(sum_ix_iln(rho_iLambda_i^3)right)-1,","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"where x_i is the molar composition, and the subscript denote that the variable so decorated relates to species i. This equation represents the MonomerIdeal form in Clapeyron. For the purposes of vapour–liquid equilibrium properties, one can even ignore Lambda_i (since it cancels out in solving the phase equilibrium); we therefore use this as the default BasicIdeal model.","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"The kinetic energy of polyatomic species includes contributions from vibrational and rotational modes of motion, as well as translational; we must also account for these in the ideal free energy. The statistical–mechanical derivation of the ideal free energy becomes a little more complicated but can still be done, resulting in the following expression:","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"fracA_mathrmidealNk_mathrmBT=sum_ix_ibigglnleft(rho_iLambda_i^3right)-fracN_mathrmroti2 ln fracTtheta_mathrmroti+sum^N_mathrmvibi_mathrmvg_imathrmvleftfractheta_mathrmvibimathrmv2T+lnleft(1-exp-(theta_mathrmvibimathrmvT)right)right-1bigg.","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"Here N_mathrmroti, theta_mathrmroti and N_mathrmvibi are the number of rotations, the number of vibrations and the rotational temperature of a species i, respectively; g_imathrmv and theta_mathrmvibimathrmv represent the degeneracy and vibrational temperature of a vibrational mode mathrmv of species i. The WalkerIdeal model provides the necessary parameters to use such an equation. However, the morecommonly used approach is through the use of correlations of the ideal isobaric heat capacity, C_pi^0, such as the ReidIdeal, WilhoitIdeal and AlyLeeIdeal models. From the ideal isobaric heat capacity, it is possible to determine the ideal Helmholtz free energy using the following equation:","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"fracA_mathrmidealNk_mathrmBT = sum_i=1^N_mathrmComponent x_ileftlnfracrho_irho_0     + frac1Nk_mathrmBT int_T_0^T C_pi^0 dT + fracH_0iNk_mathrmBT- frac1Nk_Bint_T_0^T fracC_pi^0T dT -lnfracTT_0-fracS_0iNk_mathrmB - 1right","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"Note that the reference states, rho_0, H_0i and S_0i, can typically be neglected as these will not impact or contribute to most thermodynamic properties of interest.","category":"page"},{"location":"theory/background/#Cubic-equations-of-state","page":"-","title":"Cubic equations of state","text":"","category":"section"},{"location":"theory/background/","page":"-","title":"-","text":"This is the mostpopular class of equations of state. The progenitor of these is the van der Waals (vdW) equation of state, published in 1873, which can be written as:","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"p = fracNk_mathrmBTV-Nb-fracN^2aV^2","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"where a and b are the model parameters. Although the vdW equation was phenomenological in origin, it, too, can be derived from statistical thermodynamics. Strictly speaking, b accounts for the space taken up by the molecules themselves (it corresponds to the excluded volume per molecule) and a quantifies the magnitude of attraction between species. As a result, the first term is often thought of as accounting for the repulsive interactions between molecules, while the second accounts for attractive interactions. In principle, therefore, one could obtain values of a and b for a particular species from (for example) spectroscopic information. However, since a and b can be related to the critical temperature and pressure of the vdW fluid, to relate the equation of state to a particular species, it is conventional to use the critical temperature and pressure of the species to obtain working values of the parameters.","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"Unfortunately, although its simple functional form makes calculations quite straightforward, the vdW equation is inadequate for quantitative modelling, particularly for volumetric properties, and is most useful only for providing a qualitative description of the thermodynamic properties of the fluid. As a result, many other engineering cubic equations have been developed, retaining (as far as possible) the simple mathematical form of van der Waals' equation. The first noteworthy one of these is the Redlich–Kwong (RK) equation:","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"p = fracNk_mathrmBTV-Nb-fracN^2asqrtTV(V+Nb)","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"There is no physical justification for the change in the second term; its origin is entirely empirical. The authors made the modification so that the equation would provide better gas phase fugacities. This equation was subsequently improved upon by Soave, resulting in the SRK equation of state:","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"p = fracNk_mathrmBTV-Nb-fracN^2alpha(Tomega)V(V+Nb)","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"The alpha function requires an additional parameter, the acentric factor (or acentricity), which is effectively a measure of the location of the saturation pressure when TT_mathrmc=07, where T_mathrmc is the critical temperature. The idea behind this is, if you can capture both the critical point and another point along the vapour–pressure curve, you will improve the accuracy of your equation of state. This is indeed what happened. Although Soave described his equation as a \"modified Redlich–Kwong equation\", in truth it is more than this. The introduction of the alpha function represents a giant step forwards; the inclusion of a similar alpha function is probably the key feature in the equation of Peng and Robinson, who introduced their equation of state (PR) to provide improved liquid-phase volumetric properties. In addition to the inclusion of an alpha function, Peng and Robinson further revised the attractive term:","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"p = fracNk_mathrmBTV-Nb-fracN^2alpha(Tomega)V^2+2NbV+b^2N^2","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"The SRK and PR equations of state are comparable in performance, although the latter generally provides liquid densities with a greater degree of accuracy, while the former usually provides better fugacities. However, when it comes to modelling complex species such as polymers (macromolecules), or associating species, both equations struggle to perform well. This is unsurprising, since the underlying molecular model remains, in essence, a \"van der Waalsian sphere\" – in other words,a hard spherical core surrounded by a region of attraction. A more sophisticated molecular model is required to account well for the increased molecular complexities of these species.","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"Before moving on from cubic equations of state we note that, within Clapeyron, the cubic plus association (CPA) equation of state is supported. A CPA equation is the amalgamation of a cubic equation (usually SRK, as in Clapeyron, or PR) with the association term from the SAFT equation, which we will meet later. Strictly speaking, it is neither a cubic nor a SAFT equation of state but, rather, occupies a middle ground between these two classes of equation.","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"Something that may be apparent in all these equations is the fact that these are all functions that return the pressure and, thus, must be integrated to obtain the Helmholtz free energy. Like the ideal gas equation, there will be missing temperature and compositional dependencies which need to be included.","category":"page"},{"location":"theory/background/#Mixtures-with-cubic-equations-of-state","page":"-","title":"Mixtures with cubic equations of state","text":"","category":"section"},{"location":"theory/background/","page":"-","title":"-","text":"One may wonder how to model mixtures using such equations. This can be achieved using mixing rules, in conjunction with combining rules. Although there are many variants, one of the more popular mixing rules is the van der Waals one-fluid mixing rule: the mixture is treated as a hypothetical pure fluid, characterised by parameters bara and barb that are given by","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"bara=sum_isum_jx_ix_ja_ij","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"barb=sum_isum_jx_ix_jb_ij","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"When i=j, a and b are just the normal van der Waals parameters for the pure. However, when ineq j, these parameter characterise the unlike interactions between i and j. We typically need to use combining rules (not to be confused with mixing rules) to determine the unlike parameters. Examples of these include:","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"b_ij=fracb_i+b_j2","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"a_ij = (1-k_ij)sqrta_ia_j","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"where k_ij can be set to 0 but, using either more advanced combining rules or regression to experimental data, can be tuned to improve the effectiveness of the combining rule. Further details on this will be given for the SAFT models.","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"More complicated mixing rules (such as the Wong–Sandler mixing rule) are available and implemented in Clapeyron.","category":"page"},{"location":"theory/background/#SAFT-equations-of-state","page":"-","title":"SAFT equations of state","text":"","category":"section"},{"location":"theory/background/","page":"-","title":"-","text":"In comparison to the cubic equations of state, equations based on the Statistical Associating Fluid Theory (SAFT) are based on a more theoretical approach, although still can be considered as descendants of van der Waals' equation. As mentioned earlier, the van der Waals equation can be derived from statistical mechanics, whereby the Helmholtz free energy of the van der Waals fluid is obtained as","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"fracANk_mathrmBT = fracA_mathrmidealNk_mathrmBT+fracA_mathrmHSNk_mathrmBT+fracA_mathrm1(Nk_mathrmBT)^2;","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"here the ideal and hard-sphere (HS) terms combine to give the repulsive term (of the pressure form of the equation) whilst the A_1 term results in the attractive term. We can see from this that, using the van der Waals equation, species are effectively modelled as hard spheres with dispersive interactions (we sometimes call these London dispersion interactions). The latter two terms can be merged into what is referred to as the monomer or segment term.","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"Whilst, as already noted, this is clearly a step up from the ideal gas, most species can't be modelled effectively as single spheres; they may be highly non-spherical in shape (as is usually the case with large molecules), or they may experience interactions that are more complex than simple dispersion. A classic example of the latter is water; although the water molecule is small and (at first glance) may appear simple, the behaviour of water is very strongly influenced by hydrogen bonding interactions.","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"Using Wertheim's TPT1 theory of association, it is possible to model molecules as chains of spheres; the shape of the model molecule can thereby be tailored to represent that of the real molecule far better than a single sphere. Wertheim's TPT1 theory can also be used to account for intermolecular association interactions (such as dipole–dipole interactions, or hydrogen bonding), which are strongly directional. These are described using associations sites that are located on one or more of the spherical segments comprising the chain molecule. This results in the addition of two extra contributions to the Helmholtz free energy (note that the HS and dispersive terms have been merged into a monomer term):","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"fracANk_mathrmBT = fracA_mathrmidealNk_mathrmBT+fracA_mathrmmonoNk_mathrmBT+fracA_mathrmchainNk_mathrmBT+fracA_mathrmassocNk_mathrmBT","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"The chain term accounts for the formation of chains of spherical segments and is generally expressed as","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"fracA_mathrmchainNk_mathrmBT=-sum_ix_i(m_i-1)lng_ii(d_ii),","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"where g_ii(r_ii) is the pair distribution function for species i (which carries information about the structure of the fluid; it expresses how likely it is that a segment of species i is present at a distance r_ii from another segment of species i). Many SAFT equations differ in how this pair distribution function is expressed. We note here the introduction of the Barker–Henderson hard-sphere diameter, d_ii which is given (dropping the subscripts for clarity) by","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"d = int_0^sigma (1-exp-betaphi(r))dr;","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"here phi(r) is our effective pair potential and beta=1(k_mathrmBT). This effectively gives a temperature dependence to the size of our segment and accounts for our segment becoming softer as temperature rises.","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"The association term accounts for the highly directional associative interactions (for example, hydrogen bonding). For most SAFT equations of state, it is expressed as:","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"fracA_mathrmassocNk_mathrmBT=sum_ix_ileft(sum_aleft(lnX_ia-fracX_ia2right)+fracM_i2right)","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"where X_ia is the fraction of association sites a on species i not bonded to another and M_i is the number of association sites on species i. X_ia can be obtained by solving the following system of equations:","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"X_ia = (1+rhosum_jx_jsum_bX_jbDelta_ijab)^-1","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"An important aspect of the association term is that the above system of equations typically needs to be solved iteratively; this greatly increases the computational cost of the SAFT equations when modelling associating species (compared to modelling non-associating species, for example, or to using cubic equations of state). Delta_ijab is the association strength between site a on species i with site b on species j; this is also an aspect where SAFT equations usually differ but can all be written generally as","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"Delta_ijab = F_ijabK_ijabI_ijab","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"where F_ijab is Mayer's function, given by","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"F = exp-betaepsilon^mathrmassoc-1,","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"where epsilon^mathrmassoc is the potential depth of the association interaction. K and I differ between equations but, generally, these represent the length scale of the interaction and the likelihood that the sites are correctly orientated such that they overlap, respectively.","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"Surprisingly, the monomer term is one of the aspects that most distinguishes the different SAFT equations; no two variants use the same equation. However, in general, the monomer term is composed of more than one term:","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"fracA_mathrmmonoNk_mathrmBT=fracA_mathrmHSNk_mathrmBT+fracA_mathrm1(Nk_mathrmBT)^2+fracA_mathrm2(Nk_mathrmBT)^3+fracA_mathrm3(Nk_mathrmBT)^4+","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"This expression is known as a Barker–Henderson perturbative expansion. These terms generally account for the dispersive interactions between segments; the n^mathrmth order term account for interactions between n segments. In most SAFT equations, this expansion is truncated at just the second-order term.","category":"page"},{"location":"theory/background/#Parameters","page":"-","title":"Parameters","text":"","category":"section"},{"location":"theory/background/","page":"-","title":"-","text":"Although different SAFT equations use different parameters, most share a common set. These include the parameters that characterise the dispersive interactions (which are usually modelled as pair potentials): the potential depth epsilon (usually expressed as epsilon  k_mathrmB, in Kelvin) and the segment size sigma (in Angstrom). We point out here that this potential (and its parameters) is not a bare pair potential, which accounts only for the interactions of two species (in vacuum); it is an effective pair potential, which accounts for the effects of other species being around the interacting pair, in some cases quantum effects and, if associative interactions are not modelled separately, account for non-dispersive interactions.","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"As species can now be modelled as chains of segments, the number of segments, m, also becomes a parameter. One thing to point out about this parameter is that it need not be an integer (despite what its name suggests); non-integer values of m can usually be interpreted as segments merging within the chain.","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"In the case of associating species, SAFT equations usually require a parameter for the potential well depth of the association, epsilon^mathrmassoc (analogously to epsilon, this is usually expressed as epsilon^mathrmassoc  k_mathrmB, in Kelvin) and a parameter characterising the length scale of the interaction (either a bonding volume, kappa^mathrmassoc, usually expressed in Å^3, or a length, r_c^mathrmassoc, either in meters or dimensionless (reduced by the segment size)). In the case of the dispersive and associative interaction parameters, there will also be the equivalent parameters characterising unlike interactions between species in a mixture (which can also be obtained from combining rules).","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"Unfortunately, due to the complex function form of SAFT equations, it is impossible to directly relate these parameters to critical properties, as is done with the engineering cubics. Instead, these parameters are typically obtained by regression using experimental data (typically pure component saturation pressure and saturated liquid density data).","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"We will next go through each of the variants of the SAFT equation available in Clapeyron and what makes these unique.","category":"page"},{"location":"theory/background/#Original-SAFT","page":"-","title":"Original SAFT","text":"","category":"section"},{"location":"theory/background/","page":"-","title":"-","text":"Derived by Chapman et al. (1990), this is the first variant of the SAFT equation of state. This equation can be seen as a `proof of concept' as not many parameters are available (none for mixtures). Nevertheless, a noteworthy feature of this equation is the use of a semi-empirical equation to obtain the hard-sphere diameter that depends on the number of segments of a species (in no other SAFT variant is this done). The hard-sphere pair distribution is used in the chain term; this has a much simpler analytical form than what is chosen for use in some other SAFT equations. The association strength, Delta is evaluated in a unique way as well:","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"Delta_ijab=d_ij^3g_ij^mathrmHSF_ijabkappa_ijab","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"where kappa_ijab is dimensionless. Unfortunately, the implementation of ogSAFT in Clapeyron cannot yet replicate the figures from the original paper. The reason for this is that the monomer / segment term presented in the paper is not the one used to generate the results. The actual term used is developed by Twu et al. (1980) and we are currently attempting to implement this within Clapeyron but it is not clear, as of yet, how it was implemented within the original equation.","category":"page"},{"location":"theory/background/#CK‑SAFT","page":"-","title":"CK‑SAFT","text":"","category":"section"},{"location":"theory/background/","page":"-","title":"-","text":"If the SAFT equation derived by Chapman et al. was the prototype, the variant developed by Huang and Radosz (1990) was the first usable SAFT equation, with over 100 pure component parameters and many unlike parameters available. Many of the computationally intensive parts of ogSAFT are simplified in CKSAFT; a simpler equation is used to obtain the hard-sphere diameter, and the monomer term provided within the paper is the correct one. The chain term is identical in the two equations. Similarly, the association strength only has a minor change:","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"Delta_ijab=sigma_ij^3g_ij^mathrmHSF_ijabkappa_ijab;","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"this slightly reduces the computational cost. However, the most noteworthy simplification came with the association term. As mentioned earlier, the association fraction needs to be solved for iteratively. However, Huang and Radosz proposed approximations of the association fraction that could be used to solve for the association term explicitly, greatly reducing the computational intensity of these calculations. Our current association solver returns analytic solutions for some simple cases (two sites interacting with each other or one self-interacting site). We also point out that Huang and Radosz introduced the concept of association schemes, which helps classify species based on how they interaction through association.","category":"page"},{"location":"theory/background/#SAFT‑VR-SW","page":"-","title":"SAFT‑VR SW","text":"","category":"section"},{"location":"theory/background/","page":"-","title":"-","text":"Gil-Villegas et al. (1997) developed a new class of SAFT equations known as SAFT variable range. Here, more emphasis was placed on the potentials used to characterise dispersion interactions, and a new parameter was introduced through the potential shape. Whilst many versions of SAFT‑VR are proposed, each using different underlying potentials, the one that was chosen as the default was SAFT‑VR square-well (SW) with the additional \"potential shape parameter\" lambda (characterising the width of the potential well). Within this framework, novel expressions for the monomer and chain terms were proposed, both being based on the SW potential. The association term remained largely unchanged, with the association strength having the most noteworthy modification:","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"Delta_ijab=g_ij^mathrmSWF_ijabkappa_ijab.","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"Here, kappa_ijab now carries units of volume. Not many parameters are available for this equation of state, primarily being used to model alkanes and perfluoroalkanes. However, compared to most other SAFT variants, SAFT–VR SW has possibly seen the most extensions, having a group-contribution alternative (SAFT–gamma SW), electrolyte (SAFT–VRE SW) and crossover theory (SAFT‑VRX SW).","category":"page"},{"location":"theory/background/#soft‑SAFT","page":"-","title":"soft‑SAFT","text":"","category":"section"},{"location":"theory/background/","page":"-","title":"-","text":"Developed by Blas and Vega (2001), whereas the SAFT equations discussed up until now had been based on a hard-sphere reference from which to build the equation of state, in soft‑SAFT a Lennard-Jones reference is used instead. Because of this, compared to all other SAFT equations, soft‑SAFT relies heavily on correlations obtained from molecular dynamics simulations to obtain the monomer term, pair distribution function and association strength. Like SAFT‑VR SW, soft‑SAFT does not have an extensive database of parameters, but has been extended multiple times (crossover theory being the more noteworthy extension).","category":"page"},{"location":"theory/background/#PC‑SAFT","page":"-","title":"PC‑SAFT","text":"","category":"section"},{"location":"theory/background/","page":"-","title":"-","text":"Possibly the most popular variant of the SAFT equation, Perturbed-Chain (not polymer-chain) SAFT was developed by Gross and Sadowski (2001) and, like soft‑SAFT, a different reference state is chosen, as compared with previous SAFT equations. This time, we start from the hard-chain (HC), not the hard-sphere, expressing the SAFT equation as:","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"fracANk_mathrmBT = fracA_mathrmidealNk_mathrmBT+fracA_mathrmHCNk_mathrmBT+fracA_mathrmdispNk_mathrmBT+fracA_mathrmassocNk_mathrmBT","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"This isn't as significant a change as one might initially think as, effectively, the hard-sphere and chain terms (which uses a hard-sphere pair distribution function like CK‑SAFT) are combined into the hard-chain term. The dispersion term is then simply another correlation, only this time depending on the number of segments as well. It carries many similarities with CK‑SAFT, using the same expression for the hard-sphere diameter, pair distribution function and association term.","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"The primary reasons behind PC‑SAFT's popularity are threefold. For one, the code for PC‑SAFT is available open-source. Secondly, there is an abundance of parameters available (over 250), including unlike parameters. Finally, many variants of the PC‑SAFT equation have been developed. These include:","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"Polar PC‑SAFT (PPC‑SAFT)\nPC‑Polar SAFT (PCP‑SAFT); yes, these are distinct equations\nElectrolyte PC‑SAFT (ePC‑SAFT)\nElectrolyte PPC‑SAFT (ePPC‑SAFT)\nPolyelectrolyte ePC‑SAFT (epPC‑SAFT)\nCritical-point based PC‑SAFT (CP‑PC‑SAFT)\nCritical-point based PPC‑SAFT (CP‑PPC‑SAFT)\nGroup-contribution PC‑SAFT (GC‑PC‑SAFT)\nGroup-contribution PPC‑SAFT (GC‑PPC‑SAFT)","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"We will aim to provide some of these variants at a later date.","category":"page"},{"location":"theory/background/#sPC‑SAFT","page":"-","title":"sPC‑SAFT","text":"","category":"section"},{"location":"theory/background/","page":"-","title":"-","text":"Known as the simplified PC‑SAFT equation (developed by Von Solms et al. (2003)). Here, the only modifications are to the hard-chain and association terms where, instead of using the generalised expressions for the hard-sphere term and hard-sphere pair distribution function, by averaging the hard-sphere diameter (effectively treating mixtures as being made up of identically sized segments), the pure component versions of these properties are used instead. The benefit of this is that pure component parameters determined for PC‑SAFT can still be used here, and only the unlike parameters need to be modified.","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"Similar to PC‑SAFT, variants of the sPC‑SAFT equation also exist, although nowhere near as extensive. Most notably, a significant group-contribution method is available.","category":"page"},{"location":"theory/background/#SAFT‑VR-Mie","page":"-","title":"SAFT‑VR Mie","text":"","category":"section"},{"location":"theory/background/","page":"-","title":"-","text":"One of the most novel SAFT equations of state, derived by Lafitte et al. (2013), this equation is effectively an extension of the SAFT‑VR framework developed by Gil-Villegas et al. (1997), with further improvements. First of these is extending the Barker–Henderson perturbative expansion to third order instead of second order:","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"fracA_mathrmmonoNk_mathrmBT=fracA_mathrmHSNk_mathrmBT+fracA_mathrm1(Nk_mathrmBT)^2+fracA_mathrm2(Nk_mathrmBT)^3+fracA_mathrm3(Nk_mathrmBT)^4","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"We do point out that, whilst the first two terms are developed following the SAFT‑VR framework, the third-order term is more akin to a correlation regressed using molecular dynamics simulation data for Mie fluids. This third-order term resulted in significant improvements in the modelling of properties near the critical point (without using cross-over theory). The chain term also received further improvements as a result. This is also the only SAFT equation in which the hard-sphere diameter is evaluated analytically, although numerical approximations are needed (we note that the original SAFT‑VR Mie equation used 10-point Gauss–Legendre quadrature, whilst the newer version uses 5-point Gauss–Laguerre quadrature). The Clapeyron.jl implementation of the hard-sphere diameter uses a mixed approach, using 10-point Gauss–Laguerre quadrature for low reduced temperatures (T/ε) and a 10-point Gauss–Legendre integration with a cutoff radius for high temperatures.","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"However, three different versions of the association strength have been developed:","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"Hard-sphere kernel:\nDelta_ijab=sigma_ij^3g_ij^mathrmHSF_ijabK_ijab\nLennard-Jones kernel:\nDelta_ijab=F_ijabK_ijabI_ijab(epsilon_ijsigma_ij)\nMie kernel:\nDelta_ijab=F_ijabK_ijabI_ijab(epsilon_ijsigma_ijlambda_ij)","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"Unfortunately, it seems that there have been inconsistencies between which of these kernels is used in different publications. In the current 'default' SAFT‑VR Mie equation the Lennard-Jones kernel is used; as such, this is the one used in Clapeyron. The Mie kernel is available with the SAFTVRMie15 equation of state.","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"As a Mie potential is characterised by two shape parameters, lambda_mathrma (characterising the attractive part) and lambda_mathrmr (characterising the repulsive part), both of these have become parameters for each species (although lambda_mathrma is usually set to 6). As we have different association terms, we also have different sets of parameters where the only difference is the length scale. In the Lennard-Jones and Mie kernels, K_ijab is the 'bonding volume', whereas, in the hard-sphere kernel, it is a 'bonding length', r_ijab^c.","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"The SAFT‑VR Mie does not have a significantly large repository of parameters (compensated by its group-contribution variant) and has only been extended to electrolytes (SAFT‑VRE Mie and eSAFT‑VR Mie).","category":"page"},{"location":"theory/background/#SAFT‑VRQ-Mie","page":"-","title":"SAFT‑VRQ Mie","text":"","category":"section"},{"location":"theory/background/","page":"-","title":"-","text":"A very recent extension of the SAFT‑VR Mie equation is the SAFT‑VRQ Mie equation developed by Aasen et al. (2019) in which the underlying Mie potential is modified using a Feynman–Hibbs potential, which means that a single species is represented by a sum of three Mie potentials. This method attempts to classically account for quantum effects present in small species such as helium, hydrogen and neon. Unfortunately, this equation is limited to just the monomer term and, even then, it is very computationally intensive.","category":"page"},{"location":"theory/background/#SAFT‑\\gamma-Mie","page":"-","title":"SAFT‑gamma Mie","text":"","category":"section"},{"location":"theory/background/","page":"-","title":"-","text":"The group-contribution version of SAFT‑VR Mie, developed by Papaioannou et al. (2014), the SAFT‑gamma Mie equation rests on the same general framework as SAFT‑VR Mie, although, as it is a group-contribution method, we are able to model heterogeneous chains (in SAFT equations discussed previously, all segments in a chain were the same size). The group‑contribution methodology is based on that developed by Lymperiadis et al. (2008). An interesting aesthetic change is with the number of segments where this is now separated into the shape factor, S, and the number of segments v^*. The latter must now be an integer and the former is a direct measure of how 'fused' the segments are. Approximately 60 groups are currently available for this equation. A noteworthy advantage of using groups is that unlike parameters between groups can be estimated from pure component data; these can then be readily extended to mixtures without further regression.","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"This equation has also been extended to electrolytes through SAFT‑gammaE Mie.","category":"page"},{"location":"theory/background/#Methods","page":"-","title":"Methods","text":"","category":"section"},{"location":"theory/background/#The-problem","page":"-","title":"The problem","text":"","category":"section"},{"location":"theory/background/","page":"-","title":"-","text":"The aim of this document is to outline all of the various tools used to obtain the relevant properties from a SAFT-type equation of state. In short, SAFT equations of state provide the Helmholtz free energy of a system at a given composition mathbfz, volume V and temperature T:","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"A=A(mathbfzVT)","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"Taking derivatives of this function (within the Clapeyron module, this is done using automatic differentiation) can give us a wide range of properties which are given in the appendix. However, it is more common that we are interested in the state of a system at certain conditions (mathbfz_0, p_0 , T_0). The answer to this can be determined from the following, deceptively simple, minimisation of the Gibbs free energy:","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"min G(mathbfz_0p_0T_0)","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"In the case of SAFT-type equations of state, this can be expressed as:","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"min A(mathbfz_0VT_0)+p_0V","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"What isn't obvious in this formulation of the problem is how to identify the variables that are to be optimised. Re-expressing this problem in greater detail:","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"min sum_i=1^n_mathrmphasephi_i(A(mathbfz_iV_iT_0)+p_0V_i)","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"mathrmst left(sum_i=1^n_mathrmphasesphi_iz_jiright)-z_j0=0quadforall j in 1n_mathrmspecies","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"where the subscript i denotes properties related to a phase i, and phi_i is the molar fraction of phase i. One can already see the difficulties behind solving such a problem as we do not often know beforehand how many phases there may be at the conditions (mathbfz_0, p_0 , T_0) and thus, we won't know which variables to optimise. In addition, we will want the global minimum and, particularly in systems with many components, there may be many local minima that we will need to eliminate.","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"Nevertheless, if we know certain things about the system beforehand, we can reduce the problem to one that is easier to solve.","category":"page"},{"location":"theory/background/#Volume-solvers","page":"-","title":"Volume solvers","text":"","category":"section"},{"location":"theory/background/","page":"-","title":"-","text":"Let us make one simplifying assumption: we know that the system exists in a single phase. This greatly simplifies the problem to:","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"min_V A(mathbfz_0VT_0)+p_0V","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"where, as there is no phase split, the only variable we need to optimise is the volume. We can see that this is equivalent to solving for the volume at which the pressure predicted by the equation of state equals p_0:","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"min_V A(mathbfz_0VT_0)+p_0Vrightarrowfracpartial partial V(A(mathbfz_0VT_0)+p_0V)=fracpartial Apartial V(mathbfz_0VT_0)+p_0=-p(mathbfz_0VT_0)+p_0=0","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"Effectively, we can reword this as a root-finding problem. One slight issue with this is that there is often more than one root (there can actually be up to five, even in SAFT-type equations). The true root will be the one that minimises the Gibbs free energy; thus we must first find the candidate phases and determine their Gibbs free energy before reporting the volume.","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"For the cubics, this problem is quite straightforward given that (as the name suggests) all these equations can be rearranged as a cubic equation in V:","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"p_0=fracRT_0V-b-fraca(V-c_1)(V-c_2)rightarrow a_0+a_1V+a_2V^2+a_3V^3=0.","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"Thus, it is very easy to solve for all the roots in a cubic using analytical expressions. However, for other equations of state, we must use non-linear root-finding algorithms. In order to avoid the unstable phases, we try to use initial guesses close to what will be the 'true' phases:","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"Vapour: Since we can use automatic differentiation to obtain the virial coefficient for any model, we can actually obtain an initial guess extremely close to the final solution using\nfracp_0RT_0 = fracn_0V+fracn_0V^2B(T)rightarrow V_0=fracRT_0p_0frac-1+sqrt1+4p_0B(T_0)(RT_0)2.\nLiquid: The best we can do here is to obtain the volume corresponding to a large packing fraction (we typically pick 0.6 to 0.8):\nV_0 = fracN_mathrmApi6times 08msigma^3.\nWe are still looking for ways to improve this but the volume function is quite reliable as of now.","category":"page"},{"location":"theory/background/","page":"-","title":"-","text":"One other issue to consider when solving this problem is that, within the liquid phase, the gradients are very large; this can be difficult for algorithms to handle (even when providing the exact derivatives through automatic differentiation). We try to reduce magnitude of these derivatives by solving for the logarithm of the volume instead.","category":"page"},{"location":"properties/multi/#Contents","page":"Multiphase Properties","title":"Contents","text":"","category":"section"},{"location":"properties/multi/","page":"Multiphase Properties","title":"Multiphase Properties","text":"Pages = [\"multi.md\"]","category":"page"},{"location":"properties/multi/#Index","page":"Multiphase Properties","title":"Index","text":"","category":"section"},{"location":"properties/multi/","page":"Multiphase Properties","title":"Multiphase Properties","text":"Pages = [\"multi.md\"]","category":"page"},{"location":"properties/multi/#Multi-component-properties","page":"Multiphase Properties","title":"Multi component properties","text":"","category":"section"},{"location":"properties/multi/#Clapeyron.bubble_pressure","page":"Multiphase Properties","title":"Clapeyron.bubble_pressure","text":"bubble_pressure(model::EoSModel, T, x, method = ChemPotBubblePressure())\n\nCalculates the bubble pressure and properties at a given temperature. Returns a tuple, containing:\n\nBubble Pressure [Pa]\nliquid volume at Bubble Point [m³]\nvapour volume at Bubble Point [m³]\nGas composition at Bubble Point\n\nBy default, uses equality of chemical potentials, via ChemPotBubblePressure\n\n\n\n\n\n","category":"function"},{"location":"properties/multi/#Clapeyron.bubble_temperature","page":"Multiphase Properties","title":"Clapeyron.bubble_temperature","text":"bubble_temperature(model::EoSModel, p, x,method::BubblePointMethod = ChemPotBubbleTemperature())\n\nCalculates the bubble temperature and properties at a given pressure. Returns a tuple, containing:\n\nBubble Temperature [K]\nliquid volume at Bubble Point [m³]\nvapour volume at Bubble Point [m³]\nGas composition at Bubble Point\n\nBy default, uses equality of chemical potentials, via ChemPotBubbleTemperature\n\n\n\n\n\n","category":"function"},{"location":"properties/multi/#Clapeyron.dew_pressure","page":"Multiphase Properties","title":"Clapeyron.dew_pressure","text":"dew_pressure(model::EoSModel, T, y,method = ChemPotDewPressure())\n\nCalculates the dew pressure and properties at a given temperature. Returns a tuple, containing:\n\nDew Pressure [Pa]\nliquid volume at Dew Point [m³]\nvapour volume at Dew Point [m³]\nLiquid composition at Dew Point\n\nBy default, uses equality of chemical potentials, via ChemPotDewPressure\n\n\n\n\n\n","category":"function"},{"location":"properties/multi/#Clapeyron.dew_temperature","page":"Multiphase Properties","title":"Clapeyron.dew_temperature","text":"dew_temperature(model::EoSModel, p, y, method = ChemPotDewTemperature())\n\ncalculates the dew temperature and properties at a given pressure. Returns a tuple, containing:\n\nDew Temperature [K]\nliquid volume at Dew Point [m³]\nvapour volume at Dew Point [m³]\nLiquid composition at Dew Point\n\nBy default, uses equality of chemical potentials, via ChemPotDewTemperature\n\n\n\n\n\n","category":"function"},{"location":"properties/multi/#Clapeyron.azeotrope_pressure","page":"Multiphase Properties","title":"Clapeyron.azeotrope_pressure","text":"azeotrope_pressure(model::EoSModel, T; v0 = x0_azeotrope_pressure(model,T))\n\ncalculates the azeotrope pressure and properties at a given temperature. Returns a tuple, containing:\n\nAzeotrope Pressure [Pa]\nliquid volume at Azeotrope Point [m³]\nvapour volume at Azeotrope Point [m³]\nAzeotrope composition\n\n\n\n\n\n","category":"function"},{"location":"properties/multi/#Clapeyron.azeotrope_temperature","page":"Multiphase Properties","title":"Clapeyron.azeotrope_temperature","text":"azeotrope_temperature(model::EoSModel, T; v0 = x0_bubble_pressure(model,T,[0.5,0.5]))\n\nCalculates the azeotrope temperature and properties at a given pressure. Returns a tuple, containing:\n\nAzeotrope Temperature [K]\nliquid volume at Azeotrope Point [m³]\nvapour volume at Azeotrope Point [m³]\nAzeotrope composition\n\n\n\n\n\n","category":"function"},{"location":"properties/multi/#Clapeyron.LLE_pressure","page":"Multiphase Properties","title":"Clapeyron.LLE_pressure","text":"LLE_pressure(model::EoSModel, T, x; v0 = x0_LLE_pressure(model,T,x))\n\ncalculates the Liquid-Liquid equilibrium pressure and properties at a given temperature.\n\nReturns a tuple, containing:\n\nLLE Pressure [Pa]\nliquid volume of composition x₁ = x at LLE Point [m³]\nliquid volume of composition x₂ at LLE Point  [m³]\nLiquid composition x₂\n\n\n\n\n\n","category":"function"},{"location":"properties/multi/#Clapeyron.LLE_temperature","page":"Multiphase Properties","title":"Clapeyron.LLE_temperature","text":"LLE_temperature(model::EoSModel, p, x; T0 = x0_LLE_temperature(model,p,x))\n\ncalculates the Liquid-Liquid equilibrium temperature and properties at a given pressure.\n\nReturns a tuple, containing:\n\nLLE Pressure [Pa]\nliquid volume of composition x₁ = x at LLE Point [m³]\nliquid volume of composition x₂ at LLE Point  [m³]\nLiquid composition x₂\n\n\n\n\n\n","category":"function"},{"location":"properties/multi/#Clapeyron.VLLE_pressure","page":"Multiphase Properties","title":"Clapeyron.VLLE_pressure","text":"VLLE_pressure(model::EoSModel, T; v0 = x0_LLE_pressure(model,T))\n\ncalculates the Vapor-Liquid-Liquid equilibrium pressure and properties of a binary mixture at a given temperature.\n\nReturns a tuple, containing:\n\nVLLE Pressure [Pa]\nLiquid volume of composition x₁ at VLLE Point [m³]\nLiquid volume of composition x₂ at VLLE Point  [m³]\nVapour volume of composition y at VLLE Point  [m³]\nLiquid composition x₁\nLiquid composition x₂\nLiquid composition y\n\n\n\n\n\n","category":"function"},{"location":"properties/multi/#Clapeyron.VLLE_temperature","page":"Multiphase Properties","title":"Clapeyron.VLLE_temperature","text":"VLLE_temperature(model::EoSModel, p; T0 = x0_LLE_temperature(model,p))\n\ncalculates the Vapor-Liquid-Liquid equilibrium temperature and properties of a binary mixture at a given temperature.\n\nReturns a tuple, containing:\n\nVLLE temperature [K]\nLiquid volume of composition x₁ at VLLE Point [m³]\nLiquid volume of composition x₂ at VLLE Point  [m³]\nVapour volume of composition y at VLLE Point  [m³]\nLiquid composition x₁\nLiquid composition x₂\nLiquid composition y\n\n\n\n\n\n","category":"function"},{"location":"properties/multi/#Clapeyron.crit_mix","page":"Multiphase Properties","title":"Clapeyron.crit_mix","text":"crit_mix(model::EoSModel,z;v0=x=x0_crit_mix(model,z))\n\nReturns the critical mixture point at a ginven composition.\n\nReturns a tuple, containing:\n\nCritical Mixture Temperature [K]\nCritical Mixture Pressure [Pa]\nCritical Mixture Volume [m³]\n\n\n\n\n\n","category":"function"},{"location":"properties/multi/#Clapeyron.UCEP_mix","page":"Multiphase Properties","title":"Clapeyron.UCEP_mix","text":"UCEP_mix(model::EoSModel;v0=x0_UCEP_mix(model))\n\nCalculates the Upper Critical End Point of a binary mixture.\n\nreturns:\n\nUCEP Temperature [K]\nUCEP Pressure [Pa]\nliquid volume at UCEP Point [m³]\nvapour volume at UCEP Point [m³]\nliquid molar composition at UCEP Point\nvapour molar composition at UCEP Point\n\n\n\n\n\n","category":"function"},{"location":"properties/multi/#Clapeyron.UCST_pressure","page":"Multiphase Properties","title":"Clapeyron.UCST_pressure","text":"UCST_pressure(model::EoSModel,T;v0=x0_UCST_pressure(model,T))\nUCST_mix(model::EoSModel,T;v0=x0_UCST_pressure(model,T))\n\nCalculates the Upper critical solution point of a mixture at a given Temperature.\n\nreturns:\n\nUCST Pressure [Pa]\nvolume at UCST Point [m³]\nmolar composition at UCST Point\n\n\n\n\n\n","category":"function"},{"location":"properties/multi/#Clapeyron.UCST_temperature","page":"Multiphase Properties","title":"Clapeyron.UCST_temperature","text":"UCST_temperature(model::EoSModel,p,x;v0 = nothing)\n\nCalculates the Upper critical solution point of a mixture at a given pressure.\n\ninputs:\n\nmodel: EoS model\np: pressure [Pa]\nv0 (optional): an initial guess,consisting of a tuple of initial temperature, volume and composition.\n\nreturns:\n\nUCST Temperature [K]\nvolume at UCST Point [m³]\nmolar composition at UCST Point\n\n\n\n\n\n","category":"function"},{"location":"properties/multi/#Clapeyron.gibbs_solvation","page":"Multiphase Properties","title":"Clapeyron.gibbs_solvation","text":"gibbs_solvation(model::EoSModel, T; threaded=true, vol0=(nothing,nothing))\n\nCalculates the solvation free energy as:\n\ng_solv = -R̄*T*log(K)\n\nwhere the first component is the solvent and second is the solute.\n\n\n\n\n\n","category":"function"},{"location":"properties/multi/#Clapeyron.cross_second_virial","page":"Multiphase Properties","title":"Clapeyron.cross_second_virial","text":"cross_second_virial(model,T,z)\n\nDefault units: [m^3]\n\nCalculates the second cross virial coefficient (B₁₂) of a binary mixture, using the definition:\n\nB̄ = x₁^2*B₁₁ + 2x₁x₂B₁₂ + x₂^2*B₂₂\nB₁₂ = (B̄ - x₁^2*B₁₁ - x₂^2*B₂₂)/2x₁x₂\n\ninfo: Composition-dependent property\nThe second cross virial coefficient calculated from a equation of state can present a dependency on composition [1], but normally, experiments for obtaining the second virial coefficient are made by mixing the same volume of two gases. you can calculate B12 in this way by using (Clapeyron.equivolcrosssecond_virial)[@ref]\n\nReferences\n\nJäger, A., Breitkopf, C., & Richter, M. (2021). The representation of cross second virial coefficients by multifluid mixture models and other equations of state. Industrial & Engineering Chemistry Research, 60(25), 9286–9295. doi:10.1021/acs.iecr.1c01186\n\n\n\n\n\n","category":"function"},{"location":"properties/multi/#Clapeyron.equivol_cross_second_virial","page":"Multiphase Properties","title":"Clapeyron.equivol_cross_second_virial","text":"equivol_cross_second_virial(model::EoSModel,T,p_exp = 200000.0)\n\ncalculates the second cross virial coefficient, by simulating the mixing of equal volumes of pure gas, at T,P conditions. The equal volume of each pure gas sets an specific molar amount for each component. Details of the experiment can be found at [1].\n\nExample\n\nmodel = SAFTVRQMie([\"helium\",\"neon\"])\nB12 = equivol_cross_second_virial(model,)\n\n\nReferences\n\nBrewer, J., & Vaughn, G. W. (1969). Measurement and correlation of some interaction second virial coefficients from − 125° to 50°C. I. The Journal of Chemical Physics, 50(7), 2960–2968. doi:10.1063/1.1671491\n\n\n\n\n\n","category":"function"},{"location":"properties/multi/#Clapeyron.sle_solubility","page":"Multiphase Properties","title":"Clapeyron.sle_solubility","text":"sle_solubility(model::CompositeModel, p, T, z; solute)\n\nCalculates the solubility of each component within a solution of the other components, at a given temperature and composition. Returns a matrix containing the composition of the SLE phase boundary for each component. If solute is specified, returns only the solubility of the specified component.\n\nCan only function when solid and fluid models are specified within a CompositeModel.\n\n\n\n\n\nsle_solubility(model::CompositeModel, p, T, z; solute)\n\nCalculates the solubility of each component within a solution of the other components, at a given temperature and composition. Returns a matrix containing the composition of the SLE phase boundary for each component. If solute is specified, returns only the solubility of the specified component.\n\nCan only function when solid and fluid models are specified within a CompositeModel.\n\n\n\n\n\n","category":"function"},{"location":"properties/multi/#Clapeyron.slle_solubility","page":"Multiphase Properties","title":"Clapeyron.slle_solubility","text":"slle_solubility(model::CompositeModel, p, T)\n\nCalculates the phase boundary for solid-liquid-liquid equilibriumm of a ternary mixture, at a given temperature and pressure. Returns a matrix containing the composition of the two liquids phases.\n\nCan only function when solid and liquid models are specified within a CompositeModel and when the third component is the solute.\n\n\n\n\n\n","category":"function"},{"location":"properties/multi/#Clapeyron.eutectic_point","page":"Multiphase Properties","title":"Clapeyron.eutectic_point","text":"eutectic_point(model::CompositeModel, p)\n\nCalculates the eutectic point of a binary mixture (at a given pressure). Returns a tuple containing the eutectic temperature and the composition at the eutectic point.\n\nCan only function when solid and liquid models are specified within a CompositeModel.\n\n\n\n\n\n","category":"function"},{"location":"properties/multi/#Bubble/Dew-methods","page":"Multiphase Properties","title":"Bubble/Dew methods","text":"","category":"section"},{"location":"properties/multi/#Clapeyron.ChemPotBubblePressure","page":"Multiphase Properties","title":"Clapeyron.ChemPotBubblePressure","text":"ChemPotBubblePressure(kwargs...)\n\nFunction to compute bubble_pressure via chemical potentials. It directly solves the equality of chemical potentials system of equations.\n\nInputs:\n\ny0 = nothing: optional, initial guess for the vapor phase composition\np0 = nothing: optional, initial guess for the bubble pressure [Pa]\nvol0 = nothing: optional, initial guesses for the liquid and vapor phase volumes\natol = 1e-8: optional, absolute tolerance of the non linear system of equations\nrtol = 1e-12: optional, relative tolerance of the non linear system of equations\nmax_iters = 1000: optional, maximum number of iterations\nnonvolatiles = nothing: optional, Vector of strings containing non volatile compounds. those will be set to zero on the vapour phase.\n\n\n\n\n\n","category":"type"},{"location":"properties/multi/#Clapeyron.FugBubblePressure","page":"Multiphase Properties","title":"Clapeyron.FugBubblePressure","text":"FugBubblePressure(kwargs...)\n\nFunction to compute bubble_pressure via fugacity coefficients. First it uses successive substitution to update the phase composition and a outer newtown loop to update the pressure. If no convergence is reached after itmax_newton iterations, the system is solved using a multidimensional non-linear system of equations.\n\nInputs:\n\ny0 = nothing: optional, initial guess for the vapor phase composition\np0 = nothing: optional, initial guess for the bubble pressure [Pa]\nvol0 = nothing: optional, initial guesses for the liquid and vapor phase volumes\nitmax_newton = 10: optional, number of iterations to update the pressure using newton's method\nitmax_ss = 5: optional, number of iterations to update the liquid phase composition using successive substitution\ntol_x = 1e-8: optional, tolerance to stop successive substitution cycle\ntol_p = 1e-8: optional, tolerance to stop newton cycle\ntol_of = 1e-8: optional, tolerance to check if the objective function is zero.\nnonvolatiles = nothing: optional, Vector of strings containing non volatile compounds. those will be set to zero on the vapour phase.\n\n\n\n\n\n","category":"type"},{"location":"properties/multi/#Clapeyron.ActivityBubblePressure","page":"Multiphase Properties","title":"Clapeyron.ActivityBubblePressure","text":"ActivityBubblePressure(kwargs...)\n\nFunction to compute bubble_pressure using Activity Coefficients. On activity coefficient models it solves the problem via succesive substitucion. On helmholtz-based models, it uses the Chapman approximation for activity coefficients.\n\nInputs:\n\ngas_fug = true: if the solver uses gas fugacity coefficients. on ActivityModel is set by default to false\npoynting = true: if the solver use the poynting correction on the liquid fugacity coefficients. on ActivityModel is set by default to false\ny0 = nothing: optional, initial guess for the vapor phase composition\np0 = nothing: optional, initial guess for the bubble pressure [Pa]\nvol0 = nothing: optional, initial guesses for the liquid and vapor phase volumes\natol = 1e-8: optional, absolute tolerance of the non linear system of equations\nrtol = 1e-12: optional, relative tolerance of the non linear system of equations\nitmax_ss = 40: optional, maximum number of sucesive substitution iterations\n\n\n\n\n\n","category":"type"},{"location":"properties/multi/#Clapeyron.ChemPotBubbleTemperature","page":"Multiphase Properties","title":"Clapeyron.ChemPotBubbleTemperature","text":"ChemPotBubbleTemperature(kwargs...)\n\nFunction to compute bubble_temperature via chemical potentials. It directly solves the equality of chemical potentials system of equations.\n\nInputs:\n\ny = nothing: optional, initial guess for the vapor phase composition.\nT0 = nothing: optional, initial guess for the bubble temperature [K].\nvol0 = nothing: optional, initial guesses for the liquid and vapor phase volumes\natol = 1e-8: optional, absolute tolerance of the non linear system of equations\nrtol = 1e-12: optional, relative tolerance of the non linear system of equations\nmax_iters = 1000: optional, maximum number of iterations\nnonvolatiles = nothing: optional, Vector of strings containing non volatile compounds. those will be set to zero on the vapour phase.\n\n\n\n\n\n","category":"type"},{"location":"properties/multi/#Clapeyron.FugBubbleTemperature","page":"Multiphase Properties","title":"Clapeyron.FugBubbleTemperature","text":"FugBubbleTemperature(kwargs...)\n\nMethod to compute bubble_temperature via fugacity coefficients. First it uses successive substitution to update the phase composition and a outer newtown loop to update the temperature. If no convergence is reached after itmax_newton iterations, the system is solved using a multidimensional non-linear system of equations.\n\nInputs:\n\ny = nothing: optional, initial guess for the vapor phase composition.\nT0 = nothing: optional, initial guess for the bubble temperature [K].\nvol0 = nothing: optional, initial guesses for the liquid and vapor phase volumes\nitmax_newton = 10: optional, number of iterations to update the temperature using newton's method\nitmax_ss = 5: optional, number of iterations to update the liquid phase composition using successive substitution\ntol_x = 1e-8: optional, tolerance to stop successive substitution cycle\ntol_T = 1e-8: optional, tolerance to stop newton cycle\ntol_of = 1e-8: optional, tolerance to check if the objective function is zero.\nnonvolatiles: optional, Vector of strings containing non volatile compounds. those will be set to zero on the vapour phase.\n\n\n\n\n\n","category":"type"},{"location":"properties/multi/#Clapeyron.ActivityBubbleTemperature","page":"Multiphase Properties","title":"Clapeyron.ActivityBubbleTemperature","text":"ActivityBubbleTemperature(kwargs...)\n\nFunction to compute bubble_temperature using Activity Coefficients. On activity coefficient models it solves the problem via succesive substitucion. On helmholtz-based models, it uses the Chapman approximation for activity coefficients.\n\nInputs:\n\ngas_fug = true: if the solver uses gas fugacity coefficients. on ActivityModel is set by default to false\npoynting = true: if the solver use the poynting correction on the liquid fugacity coefficients. on ActivityModel is set by default to false\ny0 = nothing: optional, initial guess for the vapor phase composition\nT0 = nothing: optional, initial guess for the bubble temperature [K]\nvol0 = nothing: optional, initial guesses for the liquid and vapor phase volumes\natol = 1e-8: optional, absolute tolerance of the non linear system of equations\nrtol = 1e-12: optional, relative tolerance of the non linear system of equations\nitmax_ss = 40: optional, maximum number of sucesive substitution iterations\n\n\n\n\n\n","category":"type"},{"location":"properties/multi/#Clapeyron.ChemPotDewPressure","page":"Multiphase Properties","title":"Clapeyron.ChemPotDewPressure","text":"ChemPotDewPressure(kwargs...)\n\nFunction to compute dew_pressure via chemical potentials. It directly solves the equality of chemical potentials system of equations.\n\nInputs:\n\nx0 = nothing: optional, initial guess for the liquid phase composition\np0 = nothing: optional, initial guess for the dew pressure [Pa]\nvol0 = nothing: optional, initial guesses for the liquid and vapor phase volumes\natol = 1e-8: optional, absolute tolerance of the non linear system of equations\nrtol = 1e-12: optional, relative tolerance of the non linear system of equations\nmax_iters = 1000: optional, maximum number of iterations\nnoncondensables = nothing: optional, Vector of strings containing non condensable compounds. those will be set to zero on the liquid phase.\n\n\n\n\n\n","category":"type"},{"location":"properties/multi/#Clapeyron.FugDewPressure","page":"Multiphase Properties","title":"Clapeyron.FugDewPressure","text":"FugDewPressure(kwargs...)\n\nMethod to compute dew_pressure via fugacity coefficients. First it uses successive substitution to update the phase composition and a outer newtown loop to update the pressure. If no convergence is reached after itmax_newton iterations, the system is solved using a multidimensional non-linear system of equations.\n\nInputs:\n\nx0 = nothing: optional, initial guess for the liquid phase composition\np0 = nothing: optional, initial guess for the dew pressure [Pa]\nvol0 = nothing: optional, initial guesses for the liquid and vapor phase volumes\nitmax_newton = 10: optional, number of iterations to update the pressure using newton's method\nitmax_ss = 5: optional, number of iterations to update the liquid phase composition using successive substitution\ntol_x = 1e-8: optional, tolerance to stop successive substitution cycle\ntol_p = 1e-8: optional, tolerance to stop newton cycle\ntol_of = 1e-8: optional, tolerance to check if the objective function is zero.\nnoncondensables = nothing: optional, Vector of strings containing non condensable compounds. those will be set to zero on the liquid phase.\n\n\n\n\n\n","category":"type"},{"location":"properties/multi/#Clapeyron.ActivityDewPressure","page":"Multiphase Properties","title":"Clapeyron.ActivityDewPressure","text":"ActivityDewPressure(kwargs...)\n\nFunction to compute dew_pressure using Activity Coefficients. On activity coefficient models it solves the problem via succesive substitucion. On helmholtz-based models, it uses the Chapman approximation for activity coefficients.\n\nInputs:\n\ngas_fug = true: if the solver uses gas fugacity coefficients. on ActivityModel is set by default to false\npoynting = true: if the solver use the poynting correction on the liquid fugacity coefficients. on ActivityModel is set by default to false\nx0 = nothing: optional, initial guess for the liquid phase composition\np0 = nothing: optional, initial guess for the dew pressure [Pa]\nvol0 = nothing: optional, initial guesses for the liquid and vapor phase volumes\natol = 1e-8: optional, absolute tolerance of the non linear system of equations\nrtol = 1e-12: optional, relative tolerance of the non linear system of equations\nitmax_ss = 40: optional, maximum number of sucesive substitution iterations\n\n\n\n\n\n","category":"type"},{"location":"properties/multi/#Clapeyron.ChemPotDewTemperature","page":"Multiphase Properties","title":"Clapeyron.ChemPotDewTemperature","text":"ChemPotDewTemperature(kwargs...)\n\nFunction to compute dew_temperature via chemical potentials. It directly solves the equality of chemical potentials system of equations.\n\nInputs:\n\nx0 = nothing: optional, initial guess for the liquid phase composition\nT0  =nothing: optional, initial guess for the dew temperature [K]\nvol0 = nothing: optional, initial guesses for the liquid and vapor phase volumes\natol = 1e-8: optional, absolute tolerance of the non linear system of equations\nrtol = 1e-12: optional, relative tolerance of the non linear system of equations\nmax_iters = 1000: optional, maximum number of iterations\nnoncondensables = nothing: optional, Vector of strings containing non condensable compounds. those will be set to zero on the liquid phase.\n\n\n\n\n\n","category":"type"},{"location":"properties/multi/#Clapeyron.FugDewTemperature","page":"Multiphase Properties","title":"Clapeyron.FugDewTemperature","text":"FugDewTemperature(kwargs...)\n\nMethod to compute dew_temperature via fugacity coefficients. First it uses successive substitution to update the phase composition and a outer newtown loop to update the temperature. If no convergence is reached after itmax_newton iterations, the system is solved using a multidimensional non-linear system of equations.\n\nInputs:\n\nx0 = nothing: optional, initial guess for the liquid phase composition\nT0 = nothing: optional, initial guess for the dew temperature [K]\nvol0 = nothing: optional, initial guesses for the liquid and vapor phase volumes\nitmax_newton = 10: optional, number of iterations to update the temperature using newton's method\nitmax_ss = 5: optional, number of iterations to update the liquid phase composition using successive substitution\ntol_x = 1e-8: optional, tolerance to stop successive substitution cycle\ntol_T = 1e-8: optional, tolerance to stop newton cycle\ntol_of = 1e-8: optional, tolerance to check if the objective function is zero.\nnoncondensables = nothing: optional, Vector of strings containing non condensable compounds. those will be set to zero on the liquid phase.\n\n\n\n\n\n","category":"type"},{"location":"properties/multi/#Clapeyron.ActivityDewTemperature","page":"Multiphase Properties","title":"Clapeyron.ActivityDewTemperature","text":"ActivityDewTemperature(kwargs...)\n\nFunction to compute dew_temperature using Activity Coefficients. On activity coefficient models it solves the problem via succesive substitucion. On helmholtz-based models, it uses the Chapman approximation for activity coefficients.\n\nInputs:\n\ngas_fug = true: if the solver uses gas fugacity coefficients. on ActivityModel is set by default to false\npoynting = true: if the solver use the poynting correction on the liquid fugacity coefficients. on ActivityModel is set by default to false\nx0 = nothing: optional, initial guess for the liquid phase composition\nT0 = nothing: optional, initial guess for the dew temperature [K]\nvol0 = nothing: optional, initial guesses for the liquid and vapor phase volumes\natol = 1e-8: optional, absolute tolerance of the non linear system of equations\nrtol = 1e-12: optional, relative tolerance of the non linear system of equations\nitmax_ss = 40: optional, maximum number of sucesive substitution iterations\n\n\n\n\n\n","category":"type"},{"location":"properties/multi/#Consistency-and-Stability","page":"Multiphase Properties","title":"Consistency and Stability","text":"","category":"section"},{"location":"properties/multi/#Clapeyron.gibbs_duhem","page":"Multiphase Properties","title":"Clapeyron.gibbs_duhem","text":"gibbs_duhem(model,V,T,z=[1.0])\n\nperforms a Gibbs-Duhem check on the input conditions:\n\n∑zᵢμᵢ - G ≈ 0\n\nWhere G is the total gibbs energy. it can help diagnose if a user-defined eos is consistent.\n\nreturn |∑zᵢμᵢ - G|, ∑zᵢμᵢ and G at the specified conditions.\n\n\n\n\n\n","category":"function"},{"location":"properties/multi/#Clapeyron.isstable","page":"Multiphase Properties","title":"Clapeyron.isstable","text":"isstable(model,p,T,z)::Bool\n\nPerforms stability tests for a (p,T,z) pair, and warn if any tests fail. returns true/false.\n\nChecks, in order of complexity:\n\nmechanical stability: isothermal compressibility is not negative.\ndiffusive stability: all eigenvalues of ∂²A/∂n² are positive.\nchemical stability: there isn't any other combinations of compositions at p(V,T),T that are more stable than the input composition.\n\nFor checking (V,T,z) pairs, use Clapeyron.VT_isstable(model,V,T,z) instead.\n\n\n\n\n\n","category":"function"},{"location":"properties/multi/#Clapeyron.VT_mechanical_stability","page":"Multiphase Properties","title":"Clapeyron.VT_mechanical_stability","text":"VT_mechanical_stability(model,V,T,z = SA[1.0])::Bool\n\nPerforms a mechanical stability for a (V,T,z) pair, returns true/false. Checks if isothermal compressibility is not negative.\n\nnote: Note\nThis function does not have a p,T counterpart, because if we calculate the volume via volume(model,p,T,z), it will be, by definition, a mechanically stable phase.\n\n\n\n\n\n","category":"function"},{"location":"properties/multi/#Clapeyron.VT_diffusive_stability","page":"Multiphase Properties","title":"Clapeyron.VT_diffusive_stability","text":"VT_diffusive_stability(model,V,T,z)::Bool\n\nPerforms a diffusive stability for a (V,T,z) pair, returns true/false. Checks if all eigenvalues of ∂²A/∂n² are positive. Returns false if the eos calculation failed. this normally occurs when evaluating on densities lower than the maximum density (given by Clapeyron.lb_volume(model,T,z))\n\n\n\n\n\n","category":"function"},{"location":"properties/multi/#Clapeyron.VT_chemical_stability","page":"Multiphase Properties","title":"Clapeyron.VT_chemical_stability","text":"VT_chemical_stability(model,V,T,z)::Bool\n\nPerforms a chemical stability check using the tangent plane distance criterion, using the tpd function\n\n\n\n\n\n","category":"function"},{"location":"properties/multi/#Clapeyron.tpd","page":"Multiphase Properties","title":"Clapeyron.tpd","text":"tpd(model,p,T,z;break_first = false,lle = false,tol_trivial = 1e-5, di = nothing)\n\nCalculates the Tangent plane distance function (tpd). It returns:\n\na vector with trial phase compositions where tpd < 0\na vector with the tpd values\na vector with symbols indicating the phase of the input composition\na vector with symbols indicating the phase of the trial composition\n\nIt iterates over each two-phase combination, starting from pure trial compositions, it does succesive substitution, then Gibbs optimization.\n\nIf the vectors are empty, then the procedure couldn't find a negative tpd. That is an indication that the phase is (almost) surely stable.\n\n\n\n\n\n","category":"function"},{"location":"properties/multi/#Clapeyron.spinodal_pressure","page":"Multiphase Properties","title":"Clapeyron.spinodal_pressure","text":"spinodal_pressure(model::EoSModel, T, x; v0, phase)\n\nCalculates the spinodal pressure and volume for a given temperature and composition. Returns a tuple, containing:\n\nspinodal pressure [Pa]\nspinodal volume [m³]    \n\nCalculates either the liquid or the vapor spinodal point depending on the given starting volume v0 or the phase. The keyword phase is ignored if v0 is given.\n\n\n\n\n\n","category":"function"},{"location":"properties/multi/#Clapeyron.spinodal_temperature","page":"Multiphase Properties","title":"Clapeyron.spinodal_temperature","text":"spinodal_temperature(model::EoSModel, p, x; T0, v0, phase)\n\nCalculates the spinodal pressure and volume for a given pressure and composition. Returns a tuple, containing:\n\nspinodal temperature [K]\nspinodal volume [m³]    \n\nCalculates either the liquid or the vapor spinodal point depending on the given starting temperature T0 and volume v0 or the phase. The keyword phase is ignored if T0 or v0 is given.\n\n\n\n\n\n","category":"function"},{"location":"properties/multi/#TP-Flash","page":"Multiphase Properties","title":"TP Flash","text":"","category":"section"},{"location":"properties/multi/#Clapeyron.tp_flash","page":"Multiphase Properties","title":"Clapeyron.tp_flash","text":"tp_flash(model, p, T, n, method::TPFlashMethod = DETPFlash())\n\nRoutine to solve non-reactive multicomponent flash problem. The default method uses Global Optimization. see DETPFlash\n\nInputs:\n\nT, Temperature\np, Pressure\nn, vector of number of moles of each species\n\nOutputs - Tuple containing:\n\nxᵢⱼ, Array of mole fractions of species j in phase i\nnᵢⱼ, Array of mole numbers of species j in phase i, [mol]\nG, Gibbs Free Energy of Equilibrium Mixture [J]\n\n\n\n\n\n","category":"function"},{"location":"properties/multi/#Clapeyron.DETPFlash","page":"Multiphase Properties","title":"Clapeyron.DETPFlash","text":"DETPFlash(; numphases = 2,\nmax_steps = 1e4*(numphases-1),\npopulation_size =20,\ntime_limit = Inf,\nverbose = false,\nlogspace = false,\nequilibrium = :auto)\n\nMethod to solve non-reactive multicomponent flash problem by finding global minimum of Gibbs Free Energy via Differential Evolution.\n\nUser must assume a number of phases, numphases. If true number of phases is smaller than numphases, model should predict either (a) identical composition in two or more phases, or (b) one phase with negligible total number of moles. If true number of phases is larger than numphases, a thermodynamically unstable solution will be predicted.\n\nThe optimizer will stop at max_steps evaluations or at time_limit seconds\n\nThe equilibrium keyword allows to restrict the search of phases to just liquid-liquid equilibria (equilibrium = :lle). the default searches for liquid and gas phases.\n\n\n\n\n\n","category":"type"},{"location":"properties/multi/#Clapeyron.RRTPFlash","page":"Multiphase Properties","title":"Clapeyron.RRTPFlash","text":"RRTPFlash{T}(;kwargs...)\n\nMethod to solve non-reactive multicomponent flash problem by Rachford-Rice equation.\n\nOnly two phases are supported. if K0 is nothing, it will be calculated via the Wilson correlation.\n\nKeyword Arguments:\n\nequilibrium: :vle for liquid vapor equilibria, :lle for liquid liquid equilibria, :unknown if not specified\nK0: initial guess for the constants K\nx0: initial guess for the composition of phase x\ny0: initial guess for the composition of phase y\nvol0: initial guesses for phase x and phase y volumes\nK_tol: tolerance to stop the calculation\nss_iters: number of Successive Substitution iterations to perform\nnacc: accelerate successive substitution method every nacc steps. Should be a integer bigger than 3. Set to 0 for no acceleration.\nsecond_order: wheter to solve the gibbs energy minimization using the analytical hessian or not\nnoncondensables: arrays with names (strings) of components non allowed on the liquid phase. In the case of LLE equilibria, corresponds to the x phase\nnonvolatiles: arrays with names (strings) of components non allowed on the vapour phase. In the case of LLE equilibria, corresponds to the y phase\nflash_result::FlashResult: can be provided instead of x0,y0 and vol0 for initial guesses\n\n\n\n\n\n","category":"type"},{"location":"properties/multi/#Clapeyron.MichelsenTPFlash","page":"Multiphase Properties","title":"Clapeyron.MichelsenTPFlash","text":"MichelsenTPFlash{T}(;kwargs...)\n\nMethod to solve non-reactive multicomponent flash problem by Michelsen's method.\n\nOnly two phases are supported. if K0 is nothing, it will be calculated via the Wilson correlation.\n\nKeyword Arguments:\n\nequilibrium: :vle for liquid vapor equilibria, :lle for liquid liquid equilibria, :unknown if not specified\nK0: initial guess for the constants K\nx0: initial guess for the composition of phase x\ny0: initial guess for the composition of phase y\nvol0: initial guesses for phase x and phase y volumes\nK_tol: tolerance to stop the calculation\nss_iters: number of Successive Substitution iterations to perform\nnacc: accelerate successive substitution method every nacc steps. Should be a integer bigger than 3. Set to 0 for no acceleration.\nsecond_order: wheter to solve the gibbs energy minimization using the analytical hessian or not\nnoncondensables: arrays with names (strings) of components non allowed on the liquid phase. In the case of LLE equilibria, corresponds to the x phase\nnonvolatiles: arrays with names (strings) of components non allowed on the vapour phase. In the case of LLE equilibria, corresponds to the y phase\nflash_result::FlashResult: can be provided instead of x0,y0 and vol0 for initial guesses\n\n\n\n\n\n","category":"type"},{"location":"properties/multi/#Clapeyron.MultiPhaseTPFlash","page":"Multiphase Properties","title":"Clapeyron.MultiPhaseTPFlash","text":"MultiPhaseTPFlash(;kwargs...)\n\nMethod to solve non-reactive multiphase (np phases), multicomponent (nc components) flash problem.\n\nThe flash algorithm uses successive stability tests to find new phases [1], and then tries to solve the system via rachford-rice and succesive substitution for nc * np * ss_iters iterations.\n\nIf the Rachford-Rice SS fails to converge, it proceeds to solve the system via gibbs minimization in VT-space using lnK-β-ρ as variables [3].\n\nThe algorithm finishes when SS or the gibbs minimization converges and all resulting phases are stable.\n\nIf the result of the phase equilibria is not stable, then it proceeds to add/remove phases again, for a maximum of phase_iters iterations.\n\nKeyword Arguments:\n\nK0 (optional), initial guess for the constants K\nx0 (optional), initial guess for the composition of phase x\ny0 (optional), initial guess for the composition of phase y\nn0 (optional), initial guess for all compositions. it can be a matrix or a vector of vectors.\nK_tol = sqrt(eps(Float64)), tolerance to stop the calculation (norm(lnK,1) < K_tol)\nss_iters = 4, number of Successive Substitution iterations to perform\nnacc = 3, accelerate successive substitution method every nacc steps. Should be a integer bigger than 3. Set to 0 for no acceleration.\nsecond_order = true, whether to solve the gibbs energy minimization using the analytical hessian or not. If set to false, the gibbs minimization will be done using L-BFGS.\nfull_tpd = false, whether to start with a simple K-split or using an intensive TPD search first.\nmax_phases = typemax(Int), the algorithm stops if there are more than min(max_phases,nc) phases\nphase_iters = 20, the maximum number of solve-add/remove-phase iterations\n\nReferences\n\nThermopack - Thermodynamic equilibrium algorithms reimplemented in a new framework. (2020, September 08). https://github.com/thermotools/thermopack. Retrieved May 4, 2024, from https://github.com/thermotools/thermopack/blob/main/docs/memo/flash/flash.pdf\nOkuno, R., Johns, R. T. T., & Sepehrnoori, K. (2010). A new algorithm for Rachford-Rice for multiphase compositional simulation. SPE Journal, 15(02), 313–325. doi:10.2118/117752-pa\nAdhithya, T. B., & Venkatarathnam, G. (2021). New pressure and density based methods for isothermal-isobaric flash calculations. Fluid Phase Equilibria, 537(112980), 112980. doi:10.1016/j.fluid.2021.112980\n\n\n\n\n\n","category":"type"},{"location":"properties/multi/#Clapeyron.MCFlashJL","page":"Multiphase Properties","title":"Clapeyron.MCFlashJL","text":"MCFlashJL(;     method = MultiComponentFlash.SSIFlash(),     storage = nothing,     V = NaN,     K = nothing,     kwargs.... )\n\nUses MultiComponentFlash.jl two-phase flash solver. allows passing storage to minimize allocations. That storage can be created by calling MultiComponentFlash.flash_storage(model,p,T,z,method::MCFlashJL)\n\nnote: Note\nThis method requires MultiComponentFlash to be loaded in the current session (using MultiComponentFlash) and julia >= v1.9\n\n\n\n\n\n","category":"type"},{"location":"properties/multi/#Clapeyron.numphases","page":"Multiphase Properties","title":"Clapeyron.numphases","text":"numphases(method::FlashMethod)\n\nReturn the number of phases supported by a flash method. By default it is set to 2. If the method allows it, you can set the number of phases by doing method(;numphases = n).\n\n\n\n\n\n","category":"function"},{"location":"properties/multi/#Clapeyron.supports_reduction","page":"Multiphase Properties","title":"Clapeyron.supports_reduction","text":"supports_reduction(method::FlashMethod)::Bool\n\nChecks if a Flash method supports index reduction (the ability to prune model components with compositions lower than a threshold). All current Clapeyron.jl methods support index reduction, but some methods that alllow passing a cache could have problems.\n\n\n\n\n\n","category":"function"},{"location":"properties/multi/#General-Flash","page":"Multiphase Properties","title":"General Flash","text":"","category":"section"},{"location":"properties/multi/","page":"Multiphase Properties","title":"Multiphase Properties","text":"Clapeyron.FlashResult\nClapeyron.FlashData\nClapeyron.FlashSpecifications\nClapeyron.xy_flash\nClapeyron.GeneralizedXYFlash\nClapeyron.ph_flash\nClapeyron.ps_flash\nClapeyron.qt_flash\nClapeyron.qp_flash\nClapeyron.ts_flash\nClapeyron.vt_flash","category":"page"},{"location":"properties/single/#Contents","page":"Single phase Properties","title":"Contents","text":"","category":"section"},{"location":"properties/single/","page":"Single phase Properties","title":"Single phase Properties","text":"Pages = [\"single.md\"]","category":"page"},{"location":"properties/single/#Index","page":"Single phase Properties","title":"Index","text":"","category":"section"},{"location":"properties/single/","page":"Single phase Properties","title":"Single phase Properties","text":"Pages = [\"single.md\"]","category":"page"},{"location":"properties/single/#Fluid-Single-component-properties","page":"Single phase Properties","title":"Fluid Single component properties","text":"","category":"section"},{"location":"properties/single/#Clapeyron.saturation_pressure","page":"Single phase Properties","title":"Clapeyron.saturation_pressure","text":"saturation_pressure(model::EoSModel, T)\nsaturation_pressure(model::EoSModel,T,method::SaturationMethod)\nsaturation_pressure(model,T,x0::Union{Tuple,Vector})\n\nPerforms a single component saturation equilibrium calculation, at the specified temperature T, of one mol of pure sustance specified by model Returns (p₀, Vₗ, Vᵥ) where p₀ is the saturation pressure (in Pa), Vₗ is the liquid saturation volume (in m³) and Vᵥ is the vapour saturation volume (in m³).\n\nIf the calculation fails, returns  (NaN, NaN, NaN)\n\nBy default, it uses ChemPotVSaturation\n\nExamples:\n\njulia> pr = PR([\"water\"])\nPR{BasicIdeal, PRAlpha, NoTranslation, vdW1fRule} with 1 component:\n  \"water\"\nContains parameters: a, b, Tc, Pc, Mw\n\njulia> p,vl,vv = saturation_pressure(pr,373.15) #default, uses Clapeyron.ChemPotVSaturation\n(96099.38979351855, 2.2674781912892906e-5, 0.03201681565699426)\n\njulia> p,vl,vv = saturation_pressure(pr,373.15,IsoFugacitySaturation()) #iso fugacity\n(96099.38979351871, 2.2674781912892933e-5, 0.03201681565699359)\n\njulia> p,vl,vv = saturation_pressure(pr,373.15,IsoFugacitySaturation(p0 = 1.0e5)) #iso fugacity, with starting point\n(96099.38979351871, 2.2674781912892933e-5, 0.03201681565699547)\n\n\n\n\n\n","category":"function"},{"location":"properties/single/#Clapeyron.saturation_temperature","page":"Single phase Properties","title":"Clapeyron.saturation_temperature","text":"saturation_temperature(model::EoSModel, p, kwargs...)\nsaturation_temperature(model::EoSModel, p, method::SaturationMethod)\nsaturation_temperature(model, p, T0::Number)\n\nPerforms a single component saturation temperature equilibrium calculation, at the specified pressure T, of one mol of pure sustance specified by model\n\nReturns (T₀, Vₗ, Vᵥ) where p₀ is the saturation Temperature (in K), Vₗ is the liquid saturation volume (in m³) and Vᵥ is the vapour saturation volume (in m³).\n\nIf the calculation fails, returns  (NaN, NaN, NaN)\n\nBy default, it uses AntoineSaturation\n\nExamples:\n\njulia-repl\n\njulia> pr = PR([\"water\"])\nPR{BasicIdeal, PRAlpha, NoTranslation, vdW1fRule} with 1 component:\n  \"water\"\nContains parameters: a, b, Tc, Pc, Mw\n\njulia> Ts,vl,vv = saturation_temperature(pr,1e5) # AntoineSaturation by default\n(374.24014010712983, 2.269760164801948e-5, 0.030849387955737825)\n\njulia> saturation_pressure(pr,Ts)\n(100000.00004314569, 2.269760164804427e-5, 0.03084938795785433)\n\n\n\n\n\n","category":"function"},{"location":"properties/single/#Clapeyron.enthalpy_vap","page":"Single phase Properties","title":"Clapeyron.enthalpy_vap","text":"enthalpy_vap(model::EoSModel, T,method = ChemPotVSaturation(x0_sat_pure(model,T)))\n\nCalculates ΔH, the difference between saturated vapour and liquid enthalpies at temperature T, in J\n\n\n\n\n\n","category":"function"},{"location":"properties/single/#Clapeyron.acentric_factor","page":"Single phase Properties","title":"Clapeyron.acentric_factor","text":"acentric_factor(model::EoSModel;crit = crit_pure(model), satmethod = ChemPotVSaturation())\n\ncalculates the acentric factor using its definition:\n\nω = -log10(psatᵣ) -1, at Tᵣ = 0.7\n\nTo do so, it calculates the critical temperature (using crit_pure) and performs a saturation calculation (with saturation_pressure(model,0.7Tc,satmethod))\n\n\n\n\n\n","category":"function"},{"location":"properties/single/#Solid–Fluid-Single-component-properties","page":"Single phase Properties","title":"Solid–Fluid Single component properties","text":"","category":"section"},{"location":"properties/single/#Clapeyron.melting_pressure","page":"Single phase Properties","title":"Clapeyron.melting_pressure","text":"pm,vs,vl = melting_pressure(model::CompositeModel,T;v0=x0_melting_pressure(model,T))\n\nCalculates the melting pressure of a CompositeModel containing a solid and fluid phase EoS, at a specified pressure. You can pass a tuple of initial values for the volumes (vs0,vl0).\n\nreturns:\n\nMelting Pressure [Pa]\nmelting solid volume at specified temperature [m³]\nmelting liquid volume at specified temperature [m³]\n\n\n\n\n\n","category":"function"},{"location":"properties/single/#Clapeyron.melting_temperature","page":"Single phase Properties","title":"Clapeyron.melting_temperature","text":"pm,vs,vl = melting_temperature(model::CompositeModel,T;v0=x0_melting_pressure(model,T))\n\nCalculates the melting temperature of a CompositeModel containing a solid and fluid phase EoS, at a specified pressure. You can pass a tuple of initial values for the volumes (vs0,vl0).\n\nreturns:\n\nMelting Temperature [K]\nmelting solid volume at specified pressure [m³]\nmelting liquid volume at specified pressure [m³]\n\n\n\n\n\n","category":"function"},{"location":"properties/single/#Clapeyron.sublimation_pressure","page":"Single phase Properties","title":"Clapeyron.sublimation_pressure","text":"psub,vs,vv = sublimation_pressure(model::CompositeModel,T;v0=x0_sublimation_pressure(model,T))\n\nCalculates the sublimation pressure of a CompositeModel containing a solid and fluid phase EoS, at a specified pressure. You can pass a tuple of initial values for the volumes (vs0,vv0).\n\nreturns:\n\nSublimation Pressure [Pa]\nSublimation solid volume at specified temperature [m³]\nSublimation vapour volume at specified temperature [m³]\n\n\n\n\n\n","category":"function"},{"location":"properties/single/#Clapeyron.sublimation_temperature","page":"Single phase Properties","title":"Clapeyron.sublimation_temperature","text":"pm,vs,vl = sublimation_temperature(model::CompositeModel,T;v0=x0_sublimation_pressure(model,T))\n\nCalculates the sublimation temperature of a CompositeModel containing a solid and fluid phase EoS, at a specified pressure. You can pass a tuple of initial values for the volumes (vs0,vl0).\n\nreturns:\n\nSublimation Temperature [K]\nsublimation solid volume at specified pressure [m³]\nsublimation vapour volume at specified pressure [m³]\n\n\n\n\n\n","category":"function"},{"location":"properties/single/#Clapeyron.triple_point","page":"Single phase Properties","title":"Clapeyron.triple_point","text":"Tt,pt,vs,vl,vv = triple_point(model::CompositeModel;v0 = x0_triple_point(model))\n\nCalculates the triple point of a CompositeModel containing solid and fluid phase EoS.\n\nreturns:\n\nTriple point Temperature [K]\nTriple point Pressure [Pa]\nsolid volume at Triple Point [m³]\nliquid volume at Triple Point [m³]\nvapour volume at Triple Point [m³]\n\n\n\n\n\n","category":"function"},{"location":"properties/single/#Saturation-methods","page":"Single phase Properties","title":"Saturation methods","text":"","category":"section"},{"location":"properties/single/#Clapeyron.ChemPotVSaturation","page":"Single phase Properties","title":"Clapeyron.ChemPotVSaturation","text":"ChemPotVSaturation <: SaturationMethod\nChemPotVSaturation(V0)\nChemPotVSaturation(;vl = nothing,\n                    vv = nothing,\n                    crit = nothing,\n                    crit_retry = true\n                    f_limit = 0.0,\n                    atol = 1e-8,\n                    rtol = 1e-12,\n                    max_iters = 10^4)\n\nDefault saturation_pressure Saturation method used by Clapeyron.jl. It uses equality of Chemical Potentials with a volume basis. If no volumes are provided, it will use  x0_sat_pure. If those initial guesses fail and the specification is near critical point, it will try one more time, using Corresponding States instead. when crit_retry is true, if the initial solve fail, it will try to obtain a better estimate by calculating the critical point. f_limit, atol, rtol, max_iters are passed to the non linear system solver.\n\n\n\n\n\n","category":"type"},{"location":"properties/single/#Clapeyron.ChemPotDensitySaturation","page":"Single phase Properties","title":"Clapeyron.ChemPotDensitySaturation","text":"ChemPotDensitySaturation <: SaturationMethod\nChemPotDensitySaturation(;vl = nothing,\n                        vv = nothing,\n                        crit = nothing,\n                        f_limit = 0.0,\n                        atol = 1e-8,\n                        rtol = 1e-12,\n                        max_iters = 10^4)\n\nSaturation method for saturation_pressure. It uses equality of Chemical Potentials with a density basis. If no volumes are provided, it will use  x0_sat_pure.  vl  and vl are initial guesses for the liquid and vapour volumes. f_limit, atol, rtol, max_iters are passed to the non linear system solver.\n\n\n\n\n\n","category":"type"},{"location":"properties/single/#Clapeyron.IsoFugacitySaturation","page":"Single phase Properties","title":"Clapeyron.IsoFugacitySaturation","text":"IsoFugacitySaturation <: SaturationMethod\nIsoFugacitySaturation(;p0 = nothing,\n    vl = nothing,\n    vv = nothing,\n    crit = nothing,\n    max_iters = 20,\n    p_tol = sqrt(eps(Float64)))\n\nSaturation method for saturation_pressure. Uses the isofugacity criteria. Ideal for Cubics or other EoS where the volume calculations are cheap.  If p0 is not provided, it will be calculated via x0_psat.\n\n\n\n\n\n","category":"type"},{"location":"properties/single/#Clapeyron.ClapeyronSaturation","page":"Single phase Properties","title":"Clapeyron.ClapeyronSaturation","text":"ClapeyronSaturation <: SaturationMethod\nClapeyronSaturation(T0 = nothing, crit = nothing, satmethod = ChemPotVSaturation())\n\nSaturation method for saturation_temperature. It solves iteratively saturation_temperature(model,Ti,satmethod) until convergence, by using the Clapeyron equation:\n\ndp/dT = ΔS/ΔV\n\nIt descends from the critical point (or T0, if provided). Reliable, but slow.\n\nIt is recommended that T0 > Tsat, as the temperature decrease iteration series is more stable. Default method for saturation_temperature until Clapeyron 0.3.7\n\n\n\n\n\n","category":"type"},{"location":"properties/single/#Clapeyron.AntoineSaturation","page":"Single phase Properties","title":"Clapeyron.AntoineSaturation","text":"AntoineSaturation <: SaturationMethod\nAntoineSaturation(;T0 = nothing,\n                    vl = nothing,\n                    vv = nothing,\n                    f_limit = 0.0,\n                    atol = 1e-8,\n                    rtol = 1e-12,\n                    max_iters = 10^4,\n                    crit = nothing,\n                    crit_retry = false)\n\nSaturation method for saturation_temperature .Default method for saturation temperature from Clapeyron 0.3.7. It solves the Volume-Temperature system of equations for the saturation condition.\n\nIf only T0 is provided, vl and vv are obtained via x0_sat_pure. If T0 is not provided, it will be obtained via x0_saturation_temperature. It is recommended to overload x0_saturation_temperature, as the default starting point calls crit_pure, resulting in slower than ideal times. f_limit, atol, rtol, max_iters are passed to the non linear system solver.\n\n\n\n\n\n","category":"type"},{"location":"properties/electrolytes/#Contents","page":"Electrolyte Properties","title":"Contents","text":"","category":"section"},{"location":"properties/electrolytes/","page":"Electrolyte Properties","title":"Electrolyte Properties","text":"Pages = [\"electrolytes.md\"]","category":"page"},{"location":"properties/electrolytes/#Properties","page":"Electrolyte Properties","title":"Properties","text":"","category":"section"},{"location":"properties/electrolytes/#Clapeyron.mean_ionic_activity_coefficient","page":"Electrolyte Properties","title":"Clapeyron.mean_ionic_activity_coefficient","text":"mean_ionic_activity_coefficient(model::ESElectrolyteModel,salts,p,T,m,zsolvent=[1.])\n\nCalculate the mean ionic activity coefficient of selection of salts at a given pressure, temperature and molality. These are defined as:\n\nγ± = φ±/φ±₀ * ∑zsolv/∑z\n\nExample:\n\nmodel = ePCSAFT([\"water\"],[\"sodium\",\"chloride\"])\n\nsalts = [(\"sodium chloride\",(\"sodium\"=>1,\"chloride\"=>1))]\n\np = 1e5\nT = 298.15\nm = [1.0]\n\nγ± = mean_ionic_activity_coefficient(model,salts,p,T,m)\n\nIf multiple solvents are present, the composition of the solvent can be specified with the zsolvent keyword argument.\n\n\n\n\n\n","category":"function"},{"location":"properties/electrolytes/#Clapeyron.mean_ionic_activity_coefficient_sat","page":"Electrolyte Properties","title":"Clapeyron.mean_ionic_activity_coefficient_sat","text":"mean_ionic_activity_coefficient_sat(model::ESElectrolyteModel,salts,T,m,zsolvent=[1.])\n\nCalculate the mean ionic activity coefficient of selection of salts at the saturation point at a certain temperature and molality. These are defined as:\n\nγ± = φ±/φ±₀ * ∑zsolv/∑z\n\nExample:\n\nmodel = ePCSAFT([\"water\"],[\"sodium\",\"chloride\"])\n\nsalts = [(\"sodium chloride\",(\"sodium\"=>1,\"chloride\"=>1))]\n\nT = 298.15\nm = [1.0]\n\nγ± = mean_ionic_activity_coefficient_sat(model,salts,T,m)\n\nIf multiple solvents are present, the composition of the solvent can be specified with the zsolvent keyword argument.\n\n\n\n\n\n","category":"function"},{"location":"properties/electrolytes/#Clapeyron.osmotic_coefficient","page":"Electrolyte Properties","title":"Clapeyron.osmotic_coefficient","text":"osmotic_coefficient(model::ESElectrolyteModel,salts,p,T,m,zsolvent=[1.])\n\nCalculate the osmotic coefficient of selection of solvents at a given pressure, temperature and molality. These are defined as:\n\nϕ = -1/(∑νi*mi*Mw)*log(asolv)\n\nExample:\n\nmodel = ePCSAFT([\"water\"],[\"sodium\",\"chloride\"])\n\nsalts = [(\"sodium chloride\",(\"sodium\"=>1,\"chloride\"=>1))]\n\np = 1e5\nT = 298.15\nm = [1.0]\n\nϕ = osmotic_coefficient(model,salts,p,T,m)\n\nIf multiple solvents are present, the composition of the solvent can be specified with the zsolvent keyword argument.\n\n\n\n\n\n","category":"function"},{"location":"properties/electrolytes/#Clapeyron.osmotic_coefficient_sat","page":"Electrolyte Properties","title":"Clapeyron.osmotic_coefficient_sat","text":"osmotic_coefficient_sat(model::ESElectrolyteModel,salts,T,m,zsolvent=[1.])\n\nCalculate the osmotic coefficient of selection of solvents at the saturation point at a certain temperature and molality. These are defined as:\n\nϕ = -1/(∑νi*mi*Mw)*log(asolv)\n\nExample:\n\nmodel = ePCSAFT([\"water\"],[\"sodium\",\"chloride\"])\n\nsalts = [(\"sodium chloride\",(\"sodium\"=>1,\"chloride\"=>1))]\n\nT = 298.15\nm = [1.0]\n\nϕ = osmotic_coefficient(model,salts,T,m)\n\nIf multiple solvents are present, the composition of the solvent can be specified with the zsolvent keyword argument.\n\n\n\n\n\n","category":"function"},{"location":"properties/electrolytes/#Helper-functions","page":"Electrolyte Properties","title":"Helper functions","text":"","category":"section"},{"location":"properties/electrolytes/#Clapeyron.molality_to_composition","page":"Electrolyte Properties","title":"Clapeyron.molality_to_composition","text":"molality_to_composition(model::ElectrolyteModel,salts,m,zsolv=[1.])\n\nConvert molality (mol/kg) to composition for a given model, salts, molality, and solvent composition.\n\n\n\n\n\n","category":"function"},{"location":"tutorials/basics_model_construction/#Getting-Started-–-Model-Construction","page":"Getting Started - Model Construction","title":"Getting Started – Model Construction","text":"","category":"section"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"All functions in Clapeyron revolve around an object we refer to as the model. These models are intended to hold all of the information required to model a given system within a specific equation of state. The absolute simplest of these is the BasicIdeal model, which models species as an ideal gas with only translational modes of motion. It can be constructed simply using:","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"julia> model = BasicIdeal([\"water\"])\nBasicIdeal()","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"This model is unique as it is the only model object that does not hold any information as the ideal gas is a universal model that does not depend on the chemical identity of the species. Nevertheless, one can use this model to obtain properties such as the volume and isobaric heat capacity at a given temperature and pressure:","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"julia> volume(model,1e5,298.15)\n0.02478957029602388\n\njulia> isobaric_heat_capacity(model,1e5,298.15)\n20.786156545383097","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"At this stage, we point out that all values within Clapeyron are in SI units, unless otherwise specified.","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"From here, we will now consider how models are constructed in different equations of state.","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"tip: Defining your own parameters\nFor guidance on how to define your own parameters, please examine the User-Defined Parameters section of the docs.","category":"page"},{"location":"tutorials/basics_model_construction/#Generic-Models","page":"Getting Started - Model Construction","title":"Generic Models","text":"","category":"section"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"Although BasicIdeal does provide the universal definition for the ideal gas model, it does fall short in one aspect: accounting for modes of motion beyond translation, such as rotations and vibrations. Accounting for these contributions does involve providing chemical-specific parameters. Thankfully, Clapeyron has a built-in databank of parameters for all supported equations of state. As an example, we consider carbon dioxide modelled by the ReidIdeal model, as opposed to the basic ideal model:","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"julia> model1 = BasicIdeal([\"carbon dioxide\"])\nBasicIdeal()\n\njulia> model2 = ReidIdeal([\"carbon dioxide\"])\nReidIdeal with 1 component:\n \"carbon dioxide\"\nContains parameters: coeffs","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"The difference between these models is best observed when one considers the isobaric heat capacity:","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"julia> isobaric_heat_capacity(model1,1e5,298.15)\n20.786156545383097\n\njulia> isobaric_heat_capacity(model2,1e5,298.15)\n37.16203981139605","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"The difference in values can be attributed to the missing rotational and vibration contributions. This difference is important to bear in mind when considering similar properties in other equations of state.","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"Nevertheless, due to the need for species-specific parameters, this model2 contains much more information than for the BasicIdeal model:","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"Component names:\njulia> model2.components\n1-element Vector{String}:\n\"carbon dioxide\"\nReferences for the equation of state:\njulia> model2.references\n\"10.1063/1.3060771\"\nThe species-specific parameters:\njulia> model2.params\nClapeyron.ReidIdealParam for [\"carbon dioxide\"] with 1 param:\ncoeffs::SingleParam{NTuple{4, Float64}}\n\njulia> model2.params.coeffs\nSingleParam{NTuple{4, Float64}}(\"Reid Coefficients\") with 1 component:\n\"carbon dioxide\" => (19.8, 0.0734, -5.6e-5, 1.72e-8)","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"One can also create a model for mixtures in a similar fashion:","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"julia> model3 = ReidIdeal([\"carbon dioxide\",\"methane\"])\nReidIdeal with 2 components:\n \"carbon dioxide\"\n \"methane\"\nContains parameters: coeffs\n\njulia> model3.params.coeffs\nSingleParam{NTuple{4, Float64}}(\"Reid Coefficients\") with 2 components:\n \"carbon dioxide\" => (19.8, 0.0734, -5.6e-5, 1.72e-8)\n \"methane\" => (19.25, 0.0521, 1.2e-5, -1.13e-8)","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"Ideal gas models are by far the simplest case to consider when building models. Other equations of state have additional features which will be discussed next. Of interest to general users may be the group-contribution models.","category":"page"},{"location":"tutorials/basics_model_construction/#Cubic-Models","page":"Getting Started - Model Construction","title":"Cubic Models","text":"","category":"section"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"tip: List of Models\nA full list of cubic equations of state is available (see Cubics).","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"At the surface, cubic models are quite simple as well. As an example, consider a mixture of methanol and benzene in Peng–Robinson (PR):","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"julia> model = PR([\"methanol\",\"benzene\"])\nPR{BasicIdeal, PRAlpha, NoTranslation, vdW1fRule} with 2 components:\n \"methanol\"\n \"benzene\"\nContains parameters: a, b, Tc, Pc, Mw\n\njulia> model.components\n2-element Vector{String}:\n \"methanol\"\n \"benzene\"\n\njulia> model.references\n1-element Vector{String}:\n \"10.1021/I160057A011\"\n\njulia> model.params.a\n2×2 PairParam{Float64}([\"methanol\", \"benzene\"]) with values:\n 1.02049  1.4453\n 1.4453   2.04695","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"Note that, as we are dealing with a mixture, we need to include binary parameters (parameters that depend on two species). This is stored as shown in the case of a.","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"Cubics are unique due to their modular nature (we can swap out pieces of the equation to hopefully make a more accurate model). This includes:","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"Alpha functions, which improve the prediction the pure component saturation curves:\njulia> model = PR([\"methanol\",\"benzene\"];alpha=TwuAlpha)\nPR{BasicIdeal, TwuAlpha, NoTranslation, vdW1fRule} with 2 components:\n\"methanol\"\n\"benzene\"\nContains parameters: a, b, Tc, Pc, Mw\n\njulia> model.alpha\nTwuAlpha with 2 components:\n\"methanol\"\n\"benzene\"\nContains parameters: M, N, L\nVolume translation methods, which improve the prediction of the liquid volume:\njulia> model = PR([\"methanol\",\"benzene\"];translation=PenelouxTranslation)\nPR{BasicIdeal, PRAlpha, PenelouxTranslation, vdW1fRule} with 2 components:\n\"methanol\"\n\"benzene\"\nContains parameters: a, b, Tc, Pc, Mw\n\njulia> model.translation\nPenelouxTranslation with 2 components:\n\"methanol\"\n\"benzene\"\nContains parameters: Vc, v_shift\nMixing rules, which can improve the predicted phase behaviour. These come in two flavours:\nGeneric one-fluid mixing rules such as the van der Waals one-fluid mixing rule (the default in all cubics):\njulia> model = PR([\"methanol\",\"benzene\"])\nPR{BasicIdeal, PRAlpha, NoTranslation, vdW1fRule} with 2 components:\n\"methanol\"\n\"benzene\"\nContains parameters: a, b, Tc, Pc, Mw\n\njulia> model.mixing\nvdW1fRule()\nG_E-mixing rules where an activity coefficient model is used in conjunction with the cubic equation of state:\njulia> model = PR([\"methanol\",\"benzene\"];mixing=HVRule,activity=UNIFAC)\nPR{BasicIdeal, PRAlpha, NoTranslation, HVRule{UNIFAC{PR{BasicIdeal, PRAlpha, NoTranslation, vdW1fRule}}}} with 2 components:\n\"methanol\"\n\"benzene\"\nContains parameters: a, b, Tc, Pc, Mw\n\njulia> model.mixing\nHVRule{UNIFAC{PR{BasicIdeal, PRAlpha, NoTranslation, vdW1fRule}}} with 2 components:\n\"methanol\"\n\"benzene\"\n\njulia> model.mixing.activity\nUNIFAC{PR{BasicIdeal, PRAlpha, NoTranslation, vdW1fRule}} with 2 components:\n\"methanol\": \"CH3OH\" => 1\n\"benzene\": \"ACH\" => 6\nGroup Type: UNIFACDortmund\nContains parameters: A, B, C, R, Q\nWhilst one could combine all the parts listed above in endless ways, there are some default combinations which we provide. These are typically referred to as predictive cubics: Predictive SRK (PSRK) and Volume-Translated PR (VTPR).","category":"page"},{"location":"tutorials/basics_model_construction/#Activity-Coefficient-Models","page":"Getting Started - Model Construction","title":"Activity Coefficient Models","text":"","category":"section"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"tip: List of Models\nA full list of activity coefficient models is available (see Activity Models).","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"As hinted at above, Clapeyron also supports activity coefficient models. These can be assembled in a similar fashion to our previous models:","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"julia> model = Wilson([\"water\",\"ethanol\"])\nWilson{PR{BasicIdeal, PRAlpha, NoTranslation, vdW1fRule}} with 2 components:\n \"water\"\n \"ethanol\"\nContains parameters: g, Tc, Pc, ZRA, Mw\n\njulia> model.params.g\n2×2 PairParam{Float64}([\"water\", \"ethanol\"]) with values:\n    0.0   3988.52\n 1360.12     0.0\n\njulia> model.puremodel\nClapeyron.EoSVectorParam{PR{BasicIdeal, PRAlpha, NoTranslation, vdW1fRule}} with 2 components:\n \"water\"\n \"ethanol\"","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"The first noteworthy change is that, where most binary parameters we considered were previously symmetric, activity coefficient models have asymmetric parameters (g_ijneq g_ji). More importantly, while activity coefficient models are intended to model the liquid phase, through Raoult's law, they can be used to model vapour–liquid equilibrium. For this to work, they need a model which can predict the saturation pressure of the pure components. This is why you'll field the puremodel field within the model for activity coefficient models (as shown above). By default, this is set to Peng–Robinson. However, one can change this using the puremodel optional argument:","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"julia> model = Wilson([\"water\",\"ethanol\"]; puremodel=PCSAFT)\nWilson{PCSAFT{BasicIdeal, Float64}} with 2 components:\n \"water\"\n \"ethanol\"\nContains parameters: g, Tc, Pc, ZRA, Mw","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"This pure model plays an important role in modelling the bulk properties of activity coefficient models as these approaches only predict excess properties:","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"X^E = X^textmixing-sum_ix_i X^textpure","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"To obtain X^textmixing, X^textpure is obtained using the puremodel. Note that this means that, for all activity coefficient models, as they are pressure/volume independent, all assume ideal volume of mixing.","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"warning: Coming changes\nIn a future update, Activity Coefficient Models will only be able to model the liquid phase by default. To model both the vapour and liquid phase, users will need to construct the model using Composite Models.","category":"page"},{"location":"tutorials/basics_model_construction/#COSMO‑SAC-Models","page":"Getting Started - Model Construction","title":"COSMO‑SAC Models","text":"","category":"section"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"Clapeyron.jl also supports COSMO‑SAC-based models. However, we only provide the activity coefficient model and not the quantum chemistry level calculations required to obtain the sigma profiles. As such, the required parameters for COSMO‑SAC are now the sigma profiles, which are stored as vectors:","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"julia> model = COSMOSAC02([\"water\",\"ethanol\"])\nCOSMOSAC02{PR{BasicIdeal, PRAlpha, NoTranslation, vdW1fRule}} with 2 components:\n \"water\"\n \"ethanol\"\nContains parameters: Pi, V, A\n\njulia> model.params.Pi\nSingleParam{Vector{Float64}}(\"Pi\") with 2 components:\n \"water\" => [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.104369  …  2.153543, 0.524173, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n \"ethanol\" => [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.294716  …  0.755815, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"Note that, in comparison to other activity coefficient models, COSMO‑SAC models will be quite a bit slower. Furthermore, due to the size of the sigma profiles, we do not store a full database of parameters locally. The parameters are usually obtained from the NIST database by specifying the use_nist_database=true optional argument. Please verify the NIST database's license before usage.","category":"page"},{"location":"tutorials/basics_model_construction/#SAFT-Models","page":"Getting Started - Model Construction","title":"SAFT Models","text":"","category":"section"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"tip: List of Models\nA full list of SAFT equations of state is available (see SAFT and CPA Models).","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"Where most models use either single or binary parameters, SAFT models introduce a third type of parameter: association parameters. These can be best seen when building the model:","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"julia> model = PCSAFT([\"water\",\"1-propanol\"])\nPCSAFT{BasicIdeal, Float64} with 2 components:\n \"water\"\n \"1-propanol\"\nContains parameters: Mw, segment, sigma, epsilon, epsilon_assoc, bondvol\n\njulia> model.sites\nSiteParam with 2 components:\n \"water\": \"e\" => 1, \"H\" => 1\n \"1-propanol\": \"e\" => 1, \"H\" => 1\n\njulia> model.params.epsilon_assoc\nAssocParam{Float64}([\"water\", \"1-propanol\"]) with 2 values:\n(\"water\", \"e\") >=< (\"water\", \"H\"): 2500.7\n(\"1-propanol\", \"e\") >=< (\"1-propanol\", \"H\"): 2276.8","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"When adding association, we allow for interactions between sites on species, hence why the sites field has been added. The association parameters are also stored in a slightly different way as well.","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"One thing to note is that, unless cross-associating parameters are provided within the database, Clapeyron will not assume any other association interactions. To include these, one can use the AssocOptions struct where, as well as other numerical settings, users can specify to use a combining rule:","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"julia> model = PCSAFT([\"water\",\"1-propanol\"];assoc_options=AssocOptions(combining=:esd))\nPCSAFT{BasicIdeal, Float64} with 2 components:\n \"water\"\n \"1-propanol\"\nContains parameters: Mw, segment, sigma, epsilon, epsilon_assoc, bondvol\n\njulia> model.params.epsilon_assoc\nAssocParam{Float64}([\"water\", \"1-propanol\"]) with 4 values:\n(\"water\", \"e\") >=< (\"water\", \"H\"): 2500.7\n(\"1-propanol\", \"e\") >=< (\"water\", \"H\"): 2388.75\n(\"1-propanol\", \"H\") >=< (\"water\", \"e\"): 2388.75\n(\"1-propanol\", \"e\") >=< (\"1-propanol\", \"H\"): 2276.8","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"This may be important when trying to obtain accurate predictions for mixtures.","category":"page"},{"location":"tutorials/basics_model_construction/#Cubic-Plus-Association","page":"Getting Started - Model Construction","title":"Cubic Plus Association","text":"","category":"section"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"Another class of equation of state that doesn't really fit in either cubics or SAFT equations is CPA, where the two approaches are combined. As a result, the features available in both approaches are extended to CPA:","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"julia> model = CPA([\"methanol\",\"ethane\"])\nCPA{BasicIdeal, RK{BasicIdeal, CPAAlpha, NoTranslation, vdW1fRule}} with 2 components:\n \"methanol\"\n \"ethane\"\nContains parameters: a, b, c1, Tc, epsilon_assoc, bondvol, Mw\n\njulia> model = CPA([\"methanol\",\"ethane\"];cubicmodel=PR,mixing=HVRule,activity=UNIFAC)\nCPA{BasicIdeal, PR{BasicIdeal, CPAAlpha, NoTranslation, HVRule{UNIFAC{PR{BasicIdeal, PRAlpha, NoTranslation, vdW1fRule}}}}} with 2 components:\n \"methanol\"\n \"ethane\"\nContains parameters: a, b, c1, Tc, epsilon_assoc, bondvol, Mw","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"Making our CPA implementation one of the most extensible available.","category":"page"},{"location":"tutorials/basics_model_construction/#Empirical-Equations-of-State","page":"Getting Started - Model Construction","title":"Empirical Equations of State","text":"","category":"section"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"Clapeyron also supports high accuracy, empirical equations of state. These differ from the previous equations of state primarily because of large number of parameters needed to model a single species. An example of this would be IAPWS‑95 (for water):","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"julia> model = IAPWS95()\nMultiParameter Equation of state for water:\n Polynomial power terms: 7\n Exponential terms: 44\n Gaussian bell-shaped terms: 3\n Non Analytic terms: 2","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"As these equations of state typically have common terms, rather than specifying the parameters, we highlight what terms the equation of state is made up of, as shown above.","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"tip: List of Models\nA full list of Empirical equations of state is available (see Empirical Helmholtz Models). The list of available systems can be expanded by including the CoolProp.jl extension (see Extension – CoolProp).","category":"page"},{"location":"tutorials/basics_model_construction/#Composite-Models","page":"Getting Started - Model Construction","title":"Composite Models","text":"","category":"section"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"Not every equation of state provides a global representation of the phase space of a system (for example, activity coefficient models only consider the liquid phase). In these cases, we need to combine various models together to obtain the 'full' representation. CompositeModels allows users to mix-and-match all of our available models.","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"struct CompositeModel{𝕃,𝕊} <: EoSModel\n    components::Vector{String}\n    fluid::𝕃\n    solid::𝕊\nend","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"The simplest case to consider is where we use the ideal gas model to represent the vapour phase, a correlation for the liquid (RackettLiquid) and saturation curve (LeeKeslerSat):","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"julia> model = CompositeModel([\"water\"])\nComposite Model:\n Gas Model: BasicIdeal()\n Liquid Model: RackettLiquid(\"water\")\n Saturation Model: LeeKeslerSat(\"water\")","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"The possibilities with this methodology are truly limitless. A useful example is in the case of Solid–liquid equilibrium calculations.","category":"page"},{"location":"tutorials/basics_model_construction/#Group-Contribution-Models","page":"Getting Started - Model Construction","title":"Group-Contribution Models","text":"","category":"section"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"Many of the classes of equations of state discussed above also have group-contribution variants. These methods allow us to assemble species from groups in the cases where pure component parameters are not available. Examples include UNIFAC and SAFTgammaMie. Let us consider SAFTgammaMie first:","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"julia> model = SAFTgammaMie([(\"butane\",[\"CH3\"=>2,\"CH2\"=>2])])\nSAFTgammaMie{BasicIdeal, SAFTVRMie{BasicIdeal}} with 1 component:\n \"butane\": \"CH3\" => 2, \"CH2\" => 2\nGroup Type: SAFTgammaMie\nContains parameters: segment, shapefactor, lambda_a, lambda_r, sigma, epsilon, epsilon_assoc, bondvol\n\njulia> model.params.epsilon\n2×2 PairParam{Float64}([\"CH3\", \"CH2\"]) with values:\n 256.77  350.77\n 350.77  473.39\n\njulia> model.groups\nGroupParam(:SAFTgammaMie) with 1 component:\n \"butane\": \"CH3\" => 2, \"CH2\" => 2","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"As we can see, we have assembled butane from two methyl and methylene groups. As such, the parameters within SAFT‑gamma Mie now pertain to the groups, rather than the species. We also have a new field, groups, which provides all the details on the multiplicity of each group.","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"tip: Available Groups\nA full list of groups available for each equation of state is available in their respective docs.","category":"page"},{"location":"tutorials/basics_model_construction/#Structured-groups","page":"Getting Started - Model Construction","title":"Structured groups","text":"","category":"section"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"There is an additional class of group-contribution model where not only does the group multiplicity have to be specified, but the number of bonds between groups must also be specified. An example of this is structSAFTgammaMie:","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"julia> model = sSAFTgammaMie([(\"butane\",[\"CH3\"=>2,\"CH2\"=>1],[(\"CH3\",\"CH2\")=>2,(\"CH2\",\"CH2\")=>1])])\nstructSAFTgammaMie{BasicIdeal, SAFTVRMie{BasicIdeal}} with 1 component:\n \"butane\": \"CH3\" => 2, \"CH2\" => 1\nGroup Type: SAFTgammaMie\nContains parameters: segment, shapefactor, lambda_a, lambda_r, sigma, epsilon, epsilon_assoc, bondvol","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"Note how we must now provide the number of times each group is bonded with one another. The only other equation of state which requires this is gcPCPSAFT.","category":"page"},{"location":"tutorials/basics_model_construction/#Automatic-Group-Contribution-Identification","page":"Getting Started - Model Construction","title":"Automatic Group Contribution Identification","text":"","category":"section"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"The process of group identification can get quite tedious, specially when dealing with larger species. One way to generate group contribution fragmentations is by using the SMILES specification to parse the chemical structure of a particular species, and subdivide said structure into a particular set of groups.","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"We recommend using GCIdentifier.jl as a tool to generate group contribution fragmentations from SMILES strings. For example we can generate an UNIFAC model of ibuprofen and water in the following way:","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"julia> _,groups_ibuprofen = get_groups_from_smiles(\"CC(Cc1ccc(cc1)C(C(=O)O)C)C\", UNIFACGroups)\n(\"CC(Cc1ccc(cc1)C(C(=O)O)C)C\", [\"COOH\" => 1, \"CH3\" => 3, \"CH\" => 1, \"ACH\" => 4, \"ACCH2\" => 1, \"ACCH\" => 1])\n\njulia> model = UNIFAC([\"water\" => [\"H2O\" => 1],\"ibuprofen\" => groups_ibuprofen])","category":"page"},{"location":"tutorials/basics_model_construction/","page":"Getting Started - Model Construction","title":"Getting Started - Model Construction","text":"For more information about","category":"page"},{"location":"eos/correlations/#Index","page":"Property Correlations","title":"Index","text":"","category":"section"},{"location":"eos/correlations/","page":"Property Correlations","title":"Property Correlations","text":"Pages = [\"ideal.md\"]","category":"page"},{"location":"eos/correlations/#Correlation-Models","page":"Property Correlations","title":"Correlation Models","text":"","category":"section"},{"location":"eos/correlations/","page":"Property Correlations","title":"Property Correlations","text":"Correlation models are, as their name says, fitted equations that express one property of a compound. They meant to be used in conjunction with other models (like Activity models that require a saturated liquid volume), or via a CompositeModel. Because they only overload one property, the way to define a correlation is different than normal EoSModels.","category":"page"},{"location":"eos/correlations/#Saturation-Correlations","page":"Property Correlations","title":"Saturation Correlations","text":"","category":"section"},{"location":"eos/correlations/","page":"Property Correlations","title":"Property Correlations","text":"Saturation Correlations are any EoSModel that are subtypes of SaturationModel return psat(T) and the upper limit (Tc,Pc) pair. To define saturation correlations, you need to overload:","category":"page"},{"location":"eos/correlations/","page":"Property Correlations","title":"Property Correlations","text":"function crit_pure(model::MySaturationModel <: SaturationModel)\n    ...\n    return (Tc,Pc,NaN)\nend\n\nfunction Clapeyron.saturation_pressure_impl(model::MySaturationModel <: SaturationModel,T,::SaturationCorrelation)\n    ...\n    return (psat,NaN,NaN)\nend","category":"page"},{"location":"eos/correlations/#Saturation-Models-and-Types","page":"Property Correlations","title":"Saturation Models and Types","text":"","category":"section"},{"location":"eos/correlations/#Clapeyron.SaturationModel","page":"Property Correlations","title":"Clapeyron.SaturationModel","text":"SaturationModel <: EoSModel\n\nAbstract type for Saturation correlation models.\n\n\n\n\n\n","category":"type"},{"location":"eos/correlations/#Clapeyron.SaturationCorrelation","page":"Property Correlations","title":"Clapeyron.SaturationCorrelation","text":"SaturationCorrelation <: SaturationMethod\n\nsaturation method used for dispatch on saturation correlations.\n\n\n\n\n\n","category":"type"},{"location":"eos/correlations/#Clapeyron.LeeKeslerSat","page":"Property Correlations","title":"Clapeyron.LeeKeslerSat","text":"LeeKeslerSat <: SaturationModel\n\nLeeKeslerSat(components;\nuserlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nTc: Single Parameter (Float64) - Critical Temperature [K]\nPc: Single Parameter (Float64) - Critical Pressure [Pa]\nacentricfactor: Single Parameter (Float64) - acentric factor\n\nDescription\n\nLee-Kesler correlation for saturation pressure:\n\npsat(T) = f₀ + ω•f₁\nTr = T/Tc\nf₀ = 5.92714 - 6.09648/Tr - 1.28862•log(Tr) + 0.169347•Tr⁶\nf₁ = 15.2518 - 15.6875/Tr - 13.4721•log(Tr) + 0.43577•Tr⁶\n\nModel Construction Examples\n\n# Using the default database\nsat = LeeKeslerSat(\"water\") #single input\nsat = LeeKeslerSat([\"water\",\"ethanol\"]) #multiple components\n\n# User-provided parameters, passing files or folders\nsat = LeeKeslerSat([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"critical.csv\"])\n\n# User-provided parameters, passing parameters directly\n\nsat = LeeKeslerSat([\"neon\",\"hydrogen\"];\n        userlocations = (;Tc = [44.492,33.19],\n                        Pc = [2679000, 1296400],\n                        acentricfactor = [-0.03,-0.21])\n                    )\n\nReferences\n\nLee, B. I., & Kesler, M. G. (1975). A generalized thermodynamic correlation based on three-parameter corresponding states. AIChE journal. American Institute of Chemical Engineers, 21(3), 510–527. doi:10.1002/aic.690210313\n\n\n\n\n\n","category":"type"},{"location":"eos/correlations/#Clapeyron.DIPPR101Sat","page":"Property Correlations","title":"Clapeyron.DIPPR101Sat","text":"DIPPR101Sat <: SaturationModel\n\nDIPPR101Sat(components;\nuserlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nTc: Single Parameter (Float64) - Critical Temperature [K]\nPc: Single Parameter (Float64) - Critical Pressure [Pa]\nA: Single Parameter (Float64)\nB: Single Parameter (Float64)\nC: Single Parameter (Float64)\nD: Single Parameter (Float64)\nE: Single Parameter (Float64)\nTmin: Single Parameter (Float64)  - mininum Temperature range [K]\nTmax: Single Parameter (Float64)  - maximum Temperature range [K]\n\nModel Parameters\n\nTc: Single Parameter (Float64) - Critical Temperature [K]\nPc: Single Parameter (Float64) - Critical Pressure [Pa]\nA: Single Parameter (Float64)\nB: Single Parameter (Float64)\nC: Single Parameter (Float64)\nD: Single Parameter (Float64)\nE: Single Parameter (Float64)\nTmin: Single Parameter (Float64)  - mininum Temperature range [K]\nTmax: Single Parameter (Float64)  - maximum Temperature range [K]\n\nDescription\n\nDIPPR 101 Equation for saturation pressure:\n\npsat(T) = exp(A + B/T + C•log(T) + D•T^E)\n\nReferences\n\nDesign Institute for Physical Properties, 1996. DIPPR Project 801 DIPPR/AIChE\n\n\n\n\n\n","category":"type"},{"location":"eos/correlations/#Liquid-Volume-Correlations","page":"Property Correlations","title":"Liquid Volume Correlations","text":"","category":"section"},{"location":"eos/correlations/","page":"Property Correlations","title":"Property Correlations","text":"Liquid Volume Correlations are any EoSModel that are subtypes of LiquidVolumeModel. They return volume(model,p,T,z, phase = :liquid).","category":"page"},{"location":"eos/correlations/#Clapeyron.RackettLiquid","page":"Property Correlations","title":"Clapeyron.RackettLiquid","text":"RackettLiquid(components;\nuserlocations::Vector{String}=String[],\nverbose::Bool=false)\n\nInput parameters\n\nTc: Single Parameter (Float64) - Critical Temperature [K]\nPc: Single Parameter (Float64) - Critical Pressure [Pa]\nVc: Single Parameter (Float64) - Critical Volume [m³/mol]\n\nModel Parameters\n\nTc: Single Parameter (Float64) - Critical Temperature [K]\nPc: Single Parameter (Float64) - Critical Pressure [Pa]\nZc: Single Parameter (Float64) - Critical Compressibility Factor\n\nDescription\n\nRackett Equation of State for saturated liquids. it is independent of the pressure.\n\nTr = T/Tc\nV = (R̄Tc/Pc)Zc^(1+(1-Tr)^(2/7))\n\nModel Construction Examples\n\n# Using the default database\nmodel = RackettLiquid(\"water\") #single input\nmodel = RackettLiquid([\"water\",\"ethanol\"]) #multiple components\n\n# User-provided parameters, passing files or folders\nmodel = RackettLiquid([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"critical.csv\"])\n\n# User-provided parameters, passing parameters directly\n\nmodel = RackettLiquid([\"neon\",\"hydrogen\"];\n        userlocations = (;Tc = [44.492,33.19],\n                        Vc = [4.25e-5, 6.43e-5],\n                        Pc = [2679000, 1296400])\n                    )\n\nReferences\n\nRackett, H. G. (1970). Equation of state for saturated liquids. Journal of Chemical and Engineering Data, 15(4), 514–517. doi:10.1021/je60047a012\n\n\n\n\n\n","category":"type"},{"location":"eos/correlations/#Clapeyron.YamadaGunnLiquid","page":"Property Correlations","title":"Clapeyron.YamadaGunnLiquid","text":"YamadaGunnLiquid(components;\n            userlocations::Vector{String}=String[],\n            verbose::Bool=false)::RackettLiquid\n\nInput parameters\n\nTc: Single Parameter (Float64) - Critical Temperature [K]\nPc: Single Parameter (Float64) - Critical Pressure [Pa]\nacentricfactor: Single Parameter (Float64) - Acentric Factor\n\nModel Parameters\n\nTc: Single Parameter (Float64) - Critical Temperature [K]\nPc: Single Parameter (Float64) - Critical Pressure [Pa]\nZc: Single Parameter (Float64) - Critical Compressibility Factor\n\nDescription\n\nThe Yamada-Gunn equation of state is a modification of the Rackett equation of state that uses a different approach to calculate the compressibility factor Zc:\n\nTr = T/Tc\nZc = 0.29056 - 0.08775ω\nV = (R̄Tc/Pc)Zc^(1+(1-Tr)^(2/7))\n\nIt can be used as a substitute of RackettLiquid when Vc is not known.\n\nModel Construction Examples\n\n# Using the default database\nmodel = YamadaGunnLiquid(\"water\") #single input\nmodel = YamadaGunnLiquid([\"water\",\"ethanol\"]) #multiple components\n\n# User-provided parameters, passing files or folders\nmodel = YamadaGunnLiquid([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"critical.csv\"])\n\n# User-provided parameters, passing parameters directly\n\nmodel = YamadaGunnLiquid([\"neon\",\"hydrogen\"];\n        userlocations = (;Tc = [44.492,33.19],\n                        Pc = [2679000, 1296400],\n                        acentricfactor = [-0.03,-0.21])\n                    )\n\nReferences\n\nRackett, H. G. (1970). Equation of state for saturated liquids. Journal of Chemical and Engineering Data, 15(4), 514–517. doi:10.1021/je60047a012\nGunn, R. D., & Yamada, T. (1971). A corresponding states correlation of saturated liquid volumes. AIChE Journal. American Institute of Chemical Engineers, 17(6), 1341–1345. doi:10.1002/aic.690170613\n\n\n\n\n\n","category":"function"},{"location":"eos/correlations/#Clapeyron.COSTALD","page":"Property Correlations","title":"Clapeyron.COSTALD","text":"COSTALD(components; \n            userlocations::Vector{String}=String[], \n            verbose::Bool=false)\n\nInput parameters\n\nTc: Single Parameter (Float64) - Critical Temperature [K]\nVc: Single Parameter (Float64) - Critical Volume [m³/mol]\nacentricfactor: Single Parameter (Float64) - Acentric Factor\n\nDescription\n\nCOSTALD Equation of State for saturated liquids. it is independent of the pressure.\n\nModel Construction Examples\n\n# Using the default database\nmodel = COSTALD(\"water\") #single input\nmodel = COSTALD([\"water\",\"ethanol\"]) #multiple components\n\n# User-provided parameters, passing files or folders\nmodel = COSTALD([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"critical.csv\"])\n\n# User-provided parameters, passing parameters directly\n\nmodel = COSTALD([\"neon\",\"hydrogen\"];\n        userlocations = (;Tc = [44.492,33.19],\n                        Vc = [4.25e-5, 6.43e-5],\n                        acentricfactor = [-0.03,-0.21])\n                    )\n\nReferences\n\nHankinson, R. W., & Thomson, G. H. (1979). A new correlation for saturated densities of liquids and their mixtures. AIChE Journal. American Institute of Chemical Engineers, 25(4), 653–663. doi:10.1002/aic.690250412\n\n\n\n\n\n","category":"type"},{"location":"eos/correlations/#Virial-Models","page":"Property Correlations","title":"Virial Models","text":"","category":"section"},{"location":"eos/correlations/","page":"Property Correlations","title":"Property Correlations","text":"Virial models are defined in terms of the second virial coefficient, B(T,z). The reduced residual Helmholtz energy is defined as:","category":"page"},{"location":"eos/correlations/","page":"Property Correlations","title":"Property Correlations","text":"fracA_mathrmresNk_mathrmBT = fracBV,","category":"page"},{"location":"eos/correlations/","page":"Property Correlations","title":"Property Correlations","text":"To implement a virial model, it is necessary to overload Clapeyron.second_virial_coefficient_impl(model::<:SecondVirialModel,T,z).","category":"page"},{"location":"eos/correlations/#Clapeyron.AbbottVirial","page":"Property Correlations","title":"Clapeyron.AbbottVirial","text":"AbbottVirial <: SecondVirialModel\nAbbottVirial(components;\n            idealmodel = BasicIdeal,\n            userlocations = String[],\n            ideal_userlocations = String[],\n            verbose = false)\n\nInput parameters\n\nTc: Single Parameter (Float64) - Critical Temperature [K]\nPc: Single Parameter (Float64) - Critical Pressure [Pa]\nacentricfactor: Single Parameter (Float64) - Acentric Factor\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\nVirial model using Corresponding State Principles:\n\nB = ∑xᵢxⱼBᵢⱼ\nBᵢⱼ = BrᵢⱼRTcᵢⱼ/Pcᵢⱼ\nBrᵢⱼ = B₀ + ωᵢⱼB₁\nB₀ = 0.083 + 0.422/Trᵢⱼ^1.6\nB₁ = 0.139 - 0.172/Trᵢⱼ^4.2\nTrᵢⱼ = T/Tcᵢⱼ\nTcᵢⱼ = √TcᵢTcⱼ\nPcᵢⱼ = (Pcᵢ + Pcⱼ)/2\nωᵢⱼ = (ωᵢ + ωⱼ)/2\n\nModel Construction Examples\n\n# Using the default database\nmodel = AbbottVirial(\"water\") #single input\nmodel = AbbottVirial([\"water\",\"ethanol\"]) #multiple components\nmodel = AbbottVirial([\"water\",\"ethanol\"], idealmodel = ReidIdeal) #modifying ideal model\n\n# Passing a prebuilt model\n\nmy_idealmodel = MonomerIdeal([\"neon\",\"hydrogen\"];userlocations = (;Mw = [20.17, 2.]))\nmodel = AbbottVirial([\"neon\",\"hydrogen\"],idealmodel = my_idealmodel)\n\n# User-provided parameters, passing files or folders\nmodel = AbbottVirial([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"critical.csv\"])\n\n# User-provided parameters, passing parameters directly\n\nmodel = AbbottVirial([\"neon\",\"hydrogen\"];\n        userlocations = (;Tc = [44.492,33.19],\n                        Pc = [2679000, 1296400],\n                        Mw = [20.17, 2.],\n                        acentricfactor = [-0.03,-0.21])\n                    )\n\nReferences\n\nSmith, H. C. Van Ness Joseph M. Introduction to Chemical Engineering Thermodynamics 4E 1987.\n\n\n\n\n\n","category":"type"},{"location":"eos/correlations/#Clapeyron.TsonopoulosVirial","page":"Property Correlations","title":"Clapeyron.TsonopoulosVirial","text":"TsonopoulosVirial <: SecondVirialModel\nTsonopoulosVirial(components;\n        idealmodel = BasicIdeal,\n        userlocations = String[],\n        ideal_userlocations = String[],\n        verbose = false)\n\nInput parameters\n\nTc: Single Parameter (Float64) - Critical Temperature [K]\nPc: Single Parameter (Float64) - Critical Pressure [Pa]\nacentricfactor: Single Parameter (Float64) - Acentric Factor\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\n\nInput models\n\nidealmodel: Ideal Model\n\nDescription\n\nVirial model using Corresponding State Principles:\n\nB = ∑xᵢxⱼBᵢⱼ\nBᵢⱼ = BrᵢⱼRTcᵢⱼ/Pcᵢⱼ\nBrᵢⱼ = B₀ + ωᵢⱼB₁\nB₀ = 0.1445 - 0.330/Trᵢⱼ - 0.1385/Trᵢⱼ^2 - 0.0121/Trᵢⱼ^3 - 0.000607/Trᵢⱼ^8\nB₁ = 0.0637 + 0.331/Trᵢⱼ - 0.423/Trᵢⱼ^2 - 0.423/Trᵢⱼ^3 - 0.008/Trᵢⱼ^8\nTrᵢⱼ = T/Tcᵢⱼ\nTcᵢⱼ = √TcᵢTcⱼ\nPcᵢⱼ = (Pcᵢ + Pcⱼ)/2\nωᵢⱼ = (ωᵢ + ωⱼ)/2\n\nModel Construction Examples\n\n# Using the default database\nmodel = TsonopoulosVirial(\"water\") #single input\nmodel = TsonopoulosVirial([\"water\",\"ethanol\"]) #multiple components\nmodel = TsonopoulosVirial([\"water\",\"ethanol\"], idealmodel = ReidIdeal) #modifying ideal model\n\n# Passing a prebuilt model\n\nmy_idealmodel = MonomerIdeal([\"neon\",\"hydrogen\"];userlocations = (;Mw = [20.17, 2.]))\nmodel = TsonopoulosVirial([\"neon\",\"hydrogen\"],idealmodel = my_idealmodel)\n\n# User-provided parameters, passing files or folders\nmodel = TsonopoulosVirial([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"critical.csv\"])\n\n# User-provided parameters, passing parameters directly\n\nmodel = TsonopoulosVirial([\"neon\",\"hydrogen\"];\n        userlocations = (;Tc = [44.492,33.19],\n                        Pc = [2679000, 1296400],\n                        Mw = [20.17, 2.],\n                        acentricfactor = [-0.03,-0.21])\n                    )\n\nReferences\n\nTsonopoulos, C. (1974). An empirical correlation of second virial coefficients. AIChE Journal. American Institute of Chemical Engineers, 20(2), 263–272. doi:10.1002/aic.690200209\n\n\n\n\n\n","category":"type"},{"location":"eos/correlations/#Clapeyron.EoSVirial2","page":"Property Correlations","title":"Clapeyron.EoSVirial2","text":"EoSVirial2 <: SecondVirialModel\nEoSVirial2(model;idealmodel = idealmodel(model))\n\nInput models\n\nmodel: Model providing second virial coefficient is obtained\nidealmodel: Ideal Model\n\nDescription\n\nVirial model, that just calls the second virial coefficient of the underlying model.\n\nB(T,z) = B(model,T,z)\n\n\n\n\n\n","category":"type"},{"location":"eos/correlations/#Solid-Models","page":"Property Correlations","title":"Solid Models","text":"","category":"section"},{"location":"eos/correlations/","page":"Property Correlations","title":"Property Correlations","text":"Solid models provide simple approximations to the excess chemical potential in the solid phase. Intended to be used in conjunction with a liquid model within a CompositeModel.","category":"page"},{"location":"eos/correlations/#Clapeyron.SolidHfus","page":"Property Correlations","title":"Clapeyron.SolidHfus","text":"SolidHfusModel <: EoSModel\n\nSolidHfus(components;\nuserlocations = String[],\nverbose::Bool=false)\n\nParameters\n\nHfus: Single Parameter (Float64) - Enthalpy of Fusion at 1 bar [J/mol]\nTm: Single Parameter (Float64) - Melting Temperature [K]\nCpSL: Single Parameter (Float64) (optional) - Heat Capacity of the Solid-Liquid Phase Transition [J/mol/K]\n\nDescription\n\nApproximation of the excess chemical potential in the solid phase (CpSL is not necessary by default):\n\nln(xᵢγᵢ) = Hfusᵢ*T*(1/Tmᵢ-1/T)-CpSLᵢ/R̄*(Tmᵢ/T-1-log(Tmᵢ/T))\n\n\n\n\n\n","category":"type"},{"location":"eos/correlations/#Clapeyron.SolidKs","page":"Property Correlations","title":"Clapeyron.SolidKs","text":"SolidKsModel <: EoSModel\n\nSolidKs(components;\nuserlocations = String[],\nverbose::Bool=false)\n\nParameters\n\nHfus: Single Parameter (Float64) - Enthalpy of Fusion at 1 bar [J/mol]\nTm: Single Parameter (Float64) - Melting Temperature [K]\nCpSL: Single Parameter (Float64) - Heat Capacity of the Solid-Liquid Phase Transition [J/mol/K]\n\nDescription\n\nApproximation of the excess chemical potential in the solid phase, using enthalpies and gibbs energies of formation:\n\nln(xᵢγᵢ) = -Gformᵢ*T/Trefᵢ - Hformᵢ*(1 - T/Trefᵢ)\n\n\n\n\n\n","category":"type"},{"location":"tutorials/extensions_coolprop/#Extensions-–-CoolProp","page":"Extensions – CoolProp","title":"Extensions – CoolProp","text":"","category":"section"},{"location":"tutorials/extensions_coolprop/","page":"Extensions – CoolProp","title":"Extensions – CoolProp","text":"Clapeyron.jl supports using all the single fluid helmholtz models available in CoolProp, by loading the corresponding JSON data into a SingleFluid or MultiFluid model.","category":"page"},{"location":"tutorials/extensions_coolprop/","page":"Extensions – CoolProp","title":"Extensions – CoolProp","text":"# let's try to load the R134a fluid model available in CoolProp\njulia> model = SingleFluid(\"r134a\")\nERROR: cannot found component file pentane.\nTry loading the CoolProp library (`using CoolProp`).\n\njulia> using CoolProp  # the CoolProp extension is loaded automatically when CoolProp is loaded\n\njulia> model = SingleFluid(\"r134a\")\nMultiParameter Equation of state for pentane:\n Polynomial power terms: 5\n Exponential terms: 6\n Gaussian bell-shaped terms: 5","category":"page"},{"location":"tutorials/extensions_coolprop/","page":"Extensions – CoolProp","title":"Extensions – CoolProp","text":"The properties calculated by Clapeyron.jl match the ones calculated by CoolProp:","category":"page"},{"location":"tutorials/extensions_coolprop/","page":"Extensions – CoolProp","title":"Extensions – CoolProp","text":"julia> mass_density(model,1e5,200.0)\n1510.617461131427\n\njulia> PropsSI(\"D\",\"P\",1e5,\"T\",200.0,\"R134a\")\n1510.6174611314268","category":"page"},{"location":"tutorials/extensions_coolprop/","page":"Extensions – CoolProp","title":"Extensions – CoolProp","text":"For ideal properties, the SingleFluidIdeal and EmpiricIdeal models are available. Those models can be combined with another residual model:","category":"page"},{"location":"tutorials/extensions_coolprop/","page":"Extensions – CoolProp","title":"Extensions – CoolProp","text":"# reference equations of state, ideal part\nid = MultiFluidIdeal([\"r134a\",\"carbon dioxide\"])\n# PCSAFT for the mixture model\nmodel = PCSAFT([\"r134a\",\"carbon dioxide\"],idealmodel = id)","category":"page"},{"location":"user_guide/custom_methods/#Definitions","page":"-","title":"Definitions","text":"","category":"section"},{"location":"user_guide/custom_methods/","page":"-","title":"-","text":"Within Clapeyron, we provide a few methods which we use to obtain thermodynamic properties (you can find out more details on how we implement these methods in our background information):","category":"page"},{"location":"user_guide/custom_methods/","page":"-","title":"-","text":"[volume(model, p, T, z)](@ref Clapeyron.volume): Obtains the volume of a system at a given temperature, pressure and composition. If the phase is unknown, it will find the vapour and liquid roots and return the one that minimises the Gibbs free energy. This function is called by all of our bulk property methods.\n[saturation_pressure(model, T)](@ref Clapeyron.saturation_pressure): Obtains the saturation pressures and volumes for a pure species.\n[crit_pure(model)](@ref Clapeyron.crit_pure): Obtains the critical point for a pure species.","category":"page"},{"location":"user_guide/custom_methods/","page":"-","title":"-","text":"Clearly this is not an exhaustive list and we make absolutely no guarantees as to the quality of these methods. However, if you have a new method or algorithm you would like to implement or test out, it is possible to do so.","category":"page"},{"location":"user_guide/custom_methods/#Custom-initial-guesses-example","page":"-","title":"Custom initial guesses example","text":"","category":"section"},{"location":"user_guide/custom_methods/","page":"-","title":"-","text":"One of the most common reasons for our methods to fail (that we've seen) is due to poor initial guesses. If you are experiencing issues with our saturation_pressure method specifically, you could try modifying the initial guess for a particular equation of state (see the custom models documentation for explanation on abstract types):","category":"page"},{"location":"user_guide/custom_methods/","page":"-","title":"-","text":"function Clapeyron.x0_sat_pure(model::PCSAFTModel,T,z=SA[1.0])\n  # Obtain the volume lower bound for that particular system\n  Vlb = lb_volume(model,z)*one(T)\n\n  # Relative to the lower bound, define your initial guesses.\n  return Vlb*1.5,Vlb*100\nend","category":"page"},{"location":"user_guide/custom_methods/","page":"-","title":"-","text":"Note that we do need prefix x0_sat_pure with Clapeyron. as we do not export this function normally; including this function in our script with force Clapeyron to use it instead of the default. These modifications can also be done for x0_crit_pure although crit_pure has proven to be quite reliable.","category":"page"},{"location":"user_guide/custom_methods/#Custom-volume-solver","page":"-","title":"Custom volume solver","text":"","category":"section"},{"location":"user_guide/custom_methods/","page":"-","title":"-","text":"For something a bit more substantial, you can also modify the volume function itself. We do this with cubics (there is a direct procedure for obtaining the volume roots) and ideal models (the volume is the ideal gas). The default solver method (volume) can be overloaded by defining:","category":"page"},{"location":"user_guide/custom_methods/","page":"-","title":"-","text":"function Clapeyron.volume_impl(model::MyEoSModel,p,T,z=SA[1.0],phase=:unknown,threaded=false,vol0=nothing)\n\n  # INSERT YOUR ALGORITHM HERE\n\n  return vol\nend","category":"page"},{"location":"user_guide/custom_methods/","page":"-","title":"-","text":"Clapeyron will automatically call your implementation when your model is evaluated.","category":"page"},{"location":"user_guide/custom_methods/#Custom-saturation-solver","page":"-","title":"Custom saturation solver","text":"","category":"section"},{"location":"user_guide/custom_methods/","page":"-","title":"-","text":"For saturation solvers (saturation_pressure,saturation_temperature) you can dispatch on a different saturation method. Let's create one, that just evaluates Antoine coefficients:","category":"page"},{"location":"user_guide/custom_methods/","page":"-","title":"-","text":"struct DirectAntoine{C} <: Clapeyron.SaturationMethod\n  A::Float64\n  B::Float64\n  C::Float64\n  crit::C\nend\n\n# Defining interface, check Clapeyron.SaturationMethod for more information.\n# All saturation methods require passing crit as a keyword.\n\nDirectAntoine(A,B,C;crit = nothing) = DirectAntoine(A,B,C,crit)\n\nfunction Clapeyron.saturation_temperature_impl(model::EoSModel,T,method::DirectAntoine)\n  A = method.A\n  B = method.B\n  C = method.C\n  p = exp(A + B/(T+C))\n  vl = volume(model,p,T,phase = :l)\n  vv = volume(model,p,T,phase = :v)\n  return p,vl,vv\nend","category":"page"},{"location":"user_guide/custom_methods/","page":"-","title":"-","text":"You can now call saturation_pressure(model,T,method) where method = DirectAntoine(A,B,C). At the moment, the default algorithm iterates directly over volumes (ChemPotVSaturation), but we also have saturation via isofugacity (IsofugacitySaturation) and superancillaries for cubics (SuperAncSaturation). The same thing can be done with saturation_temperature.","category":"page"},{"location":"user_guide/custom_methods/#Custom-TP-Flash-solver","page":"-","title":"Custom TP-Flash solver","text":"","category":"section"},{"location":"user_guide/custom_methods/","page":"-","title":"-","text":"We support the same procedure to define your custom Temperature–pressure flash methods:","category":"page"},{"location":"user_guide/custom_methods/","page":"-","title":"-","text":"struct MyRachfordRice{K} <: Clapeyron.TPFlashMethod\n  K0::K\nend\n\n# defining interface, check Clapeyron.TPFlashMethod for more information\nnumphases(::MyRachfordRice) = 2\n# we perform index reduction, to create smaller models in case one component has zero composition.\nfunction Clapeyron.index_reduction(method::MyRachfordRice,non_zero_indices)\n  return MyRachfordRice(index_reduction(method.K0,non_zero_indices))\nend\n\nfunction Clapeyron.tp_flash_impl(model::EoSModel,p,T,z,method::MyRachfordRice)\n  # perform Rachford–Rice,returns x, y, α₀\n  # ...\n  X = vcat(x',y')\n  n = X.*[1-α₀\n                α₀]  .* sum(z)\n  g = (gibbs_free_energy(model,p,T,x)*(1-α₀)+gibbs_free_energy(model,p,T,y)*α₀)/R̄/T\n  return X,n,g\nend","category":"page"},{"location":"user_guide/custom_methods/#I-have-a-better-method...","page":"-","title":"I have a better method...","text":"","category":"section"},{"location":"user_guide/custom_methods/","page":"-","title":"-","text":"If your custom methods end up being more efficient than ours or you develop one that we do not currently support, please do start a pull request and we will gladly add it to the package!","category":"page"},{"location":"properties/basic/#Contents","page":"Basic Properties","title":"Contents","text":"","category":"section"},{"location":"properties/basic/","page":"Basic Properties","title":"Basic Properties","text":"Pages = [\"basic.md\"]","category":"page"},{"location":"properties/basic/#Index","page":"Basic Properties","title":"Index","text":"","category":"section"},{"location":"properties/basic/","page":"Basic Properties","title":"Basic Properties","text":"Pages = [\"basic.md\"]","category":"page"},{"location":"properties/basic/#Primitive-functions","page":"Basic Properties","title":"Primitive functions","text":"","category":"section"},{"location":"properties/basic/","page":"Basic Properties","title":"Basic Properties","text":"Almost all models in Clapeyron based on Helmholtz free energy have at least one of the following functions defined:","category":"page"},{"location":"properties/basic/#Clapeyron.eos","page":"Basic Properties","title":"Clapeyron.eos","text":"eos(model::EoSModel, V, T, z=SA[1.0])\n\nReturns the total Helmholtz free energy.\n\nInputs:\n\nmodel::EoSModel Thermodynamic model to evaluate\nV Total volume, in [m³]\nT Temperature, in [K]\nz mole amounts, in [mol], by default is @SVector [1.0]\n\nOutputs:\n\nTotal Helmholtz free energy, in [J]\n\nby default, it calls R̄*T*∑(z)*(a_ideal(ideal_model,V,T,z) + a_res(model,V,T,z)) where ideal_model == idealmodel(model), where a_res is the reduced residual Helmholtz energy and a_ideal is the reduced ideal Helmholtz energy. You can mix and match ideal models if you provide:\n\n[idealmodel](@ref)(model): extracts the ideal model from your Thermodynamic model\n[a_res](@ref)(model,V,T,z): residual reduced Helmholtz free energy\n\n\n\n\n\n","category":"function"},{"location":"properties/basic/#Clapeyron.eos_res","page":"Basic Properties","title":"Clapeyron.eos_res","text":"eos_res(model::EoSModel, V, T, z=SA[1.0])\n\nReturns the residual Helmholtz free energy.\n\nInputs:\n\nmodel::EoSModel Thermodynamic model to evaluate\nV Total volume, in [m³]\nT Temperature, in [K]\nz mole amounts, in [mol], by default is @SVector [1.0]\n\nOutputs:\n\nResidual Helmholtz free energy, in [J]\n\nby default, it calls R̄*T*∑(z)*(a_res(model,V,T,z)) where a_res is the reduced residual Helmholtz energy.\n\n\n\n\n\n","category":"function"},{"location":"properties/basic/#Clapeyron.idealmodel","page":"Basic Properties","title":"Clapeyron.idealmodel","text":"idealmodel(model::EoSModel)\n\nretrieves the ideal model from the input's model. if the model is already an idealmodel, return nothing\n\nExamples:\n\njulia> pr = PR([\"water\"],idealmodel = MonomerIdeal)\nPR{MonomerIdeal, PRAlpha, NoTranslation, vdW1fRule} with 1 component:\n \"water\"\nContains parameters: a, b, Tc, Pc, Mw\njulia> ideal = idealmodel(pr)\nMonomerIdeal with 1 component:\n \"water\"\nContains parameters: Mw\njulia> idealmodel(ideal) == nothing\ntrue\n\n\n\n\n\n","category":"function"},{"location":"properties/basic/#Clapeyron.a_res","page":"Basic Properties","title":"Clapeyron.a_res","text":"a_res(model::EoSModel, V, T, z,args...)\n\nReduced residual Helmholtz free energy.\n\nInputs:\n\nmodel::EoSModel Thermodynamic model to evaluate\nV Total volume, in [m³]\nT Temperature, in [K]\nz mole amounts, in [mol], by default is @SVector [1.0]\n\nOutputs:\n\nResidual Helmholtz free energy, no units\n\nYou can define your own EoS by adding a method to a_res that accepts your custom model.\n\n\n\n\n\n","category":"function"},{"location":"properties/basic/#Automatic-Differentiation-functions","page":"Basic Properties","title":"Automatic Differentiation functions","text":"","category":"section"},{"location":"properties/basic/","page":"Basic Properties","title":"Basic Properties","text":"All bulk properties in Clapeyron are calculated via a combination of these Automatic Differentiation Primitives over eos or eos_res:","category":"page"},{"location":"properties/basic/#Clapeyron.∂f∂T","page":"Basic Properties","title":"Clapeyron.∂f∂T","text":"∂f∂T(model,V,T,z=SA[1.0])\n\nreturns ∂f/∂T at constant total volume and composition, where f is the total helmholtz energy, given by eos(model,V,T,z)\n\n\n\n\n\n","category":"function"},{"location":"properties/basic/#Clapeyron.∂f∂V","page":"Basic Properties","title":"Clapeyron.∂f∂V","text":"∂f∂V(model,V,T,z)\n\nreturns ∂f/∂V at constant temperature and composition, where f is the total helmholtz energy, given by eos(model,V,T,z), and V is the total volume\n\n\n\n\n\n","category":"function"},{"location":"properties/basic/#Clapeyron.∂f","page":"Basic Properties","title":"Clapeyron.∂f","text":"∂f(model,V,T,z)\n\nreturns zeroth order (value) and first order derivative information of the total helmholtz energy (given by eos(model,V,T,z)). the result is given in two values:\n\ngrad_f,fval = ∂2f(model,V,T,z)\n\nwhere:\n\nfval   = f(V,T) = eos(model,V,T,z)\n\ngrad_f = [ ∂f/∂V; ∂f/∂T]\n\n\nWhere V is the total volume, T is the temperature and f is the total helmholtz energy.\n\n\n\n\n\n","category":"function"},{"location":"properties/basic/#Clapeyron.p∂p∂V","page":"Basic Properties","title":"Clapeyron.p∂p∂V","text":"p∂p∂V(model,V,T,z=SA[1.0])\n\nreturns p and ∂p/∂V at constant temperature, where p is the pressure = pressure(model,V,T,z) and V is the total Volume.\n\n\n\n\n\n","category":"function"},{"location":"properties/basic/#Clapeyron.∂2f","page":"Basic Properties","title":"Clapeyron.∂2f","text":"∂2f(model,V,T,z)\n\nreturns zeroth order (value), first order and second order derivative information of the total helmholtz energy (given by eos(model,V,T,z)). the result is given in three values:\n\nhess_f,grad_f,fval = ∂2f(model,V,T,z)\n\nwhere: ``` fval   = f(V,T) = eos(model,V,T,z)\n\ngrad_f = [ ∂f/∂V; ∂f/∂T]\n\nhess_f = [ ∂²f/∂V²; ∂²f/∂V∂T           ∂²f/∂V∂T; ∂²f/∂V²]  ```\n\nWhere V is the total volume, T is the temperature and f is the total helmholtz energy.\n\n\n\n\n\n","category":"function"},{"location":"properties/basic/#Clapeyron.∂2p","page":"Basic Properties","title":"Clapeyron.∂2p","text":"∂2p(model,V,T,z)\n\nreturns zeroth order (value), first order and second order derivative information of the pressure. the result is given in three values:\n\nhess_p,grad_p,pval = ∂2p(model,V,T,z)\n\nwhere: ``` pval   = p(V,T) = pressure(model,V,T,z)\n\ngrad_p = [ ∂p/∂V; ∂p/∂T]\n\nhess_p = [ ∂²p/∂V²; ∂²p/∂V∂T           ∂²p/∂V∂T; ∂²p/∂V²]  ```\n\nWhere V is the total volume, T is the temperature and p is the pressure.\n\n\n\n\n\n","category":"function"},{"location":"properties/basic/#Clapeyron.f_hess","page":"Basic Properties","title":"Clapeyron.f_hess","text":"f_hess(model,V,T,z)\n\nreturns the second order volume (V) and temperature (T) derivatives of the total helmholtz energy (given by eos(model,V,T,z)). the result is given in a 2x2 SMatrix, in the form:\n\n[ ∂²f/∂V²  ∂²f/∂V∂T  ∂²f/∂V∂T  ∂²f/∂T²]\n\nuse this instead of the ∂2f if you only need second order information. ∂2f also gives zeroth and first order derivative information, but due to a bug in the used AD, it allocates more than necessary.\n\n\n\n\n\n","category":"function"},{"location":"properties/basic/#Clapeyron.∂²³f","page":"Basic Properties","title":"Clapeyron.∂²³f","text":"∂²³f(model,V,T,z=SA[1.0])\n\nreturns ∂²A/∂V² and ∂³A/∂V³, in a single ForwardDiff pass. used mainly in crit_pure objective function\n\n\n\n\n\n","category":"function"},{"location":"properties/basic/#Thermodynamic-Method-Dispatch-types","page":"Basic Properties","title":"Thermodynamic Method Dispatch types","text":"","category":"section"},{"location":"properties/basic/#Clapeyron.ThermodynamicMethod","page":"Basic Properties","title":"Clapeyron.ThermodynamicMethod","text":"ThermodynamicMethod\n\nAbstract type for all thermodynamic methods.\n\nnormally, a thermodynamic method has the form: property(model,state..,method::ThermodynamicMethod). All methods used in this way subtype ThermodynamicMethod.\n\nExamples\n\nSaturation pressure:\n\nmodel = PR([\"water\"])\nTsat = 373.15\nsaturation_pressure(model,Tsat) #using default method (chemical potential with volume base)\nsaturation_pressure(model,Tsat,SuperAncSaturation()) #solve using cubic superancillary\n\nBubble point pressure\n\nmodel = PCSAFT([\"methanol\",\"cyclohexane\"])\nT = 313.15\nz = [0.5,0.5]\nbubble_pressure(model,T,z) #using default method (chemical potential equality)\nbubble_pressure(model,T,z,FugBubblePressure(y0 = = [0.6,0.4], p0 = 5e4)) #using isofugacity criteria with starting points\n\n\n\n\n\n","category":"type"},{"location":"properties/basic/#Clapeyron.SaturationMethod","page":"Basic Properties","title":"Clapeyron.SaturationMethod","text":"SaturationMethod <: ThermodynamicMethod\n\nAbstract type for saturation_temperature and saturation_pressure routines. Should at least support passing the crit keyword, containing the critical point, if available.\n\n\n\n\n\n","category":"type"},{"location":"properties/basic/#Clapeyron.BubblePointMethod","page":"Basic Properties","title":"Clapeyron.BubblePointMethod","text":"BubblePointMethod <: ThermodynamicMethod\n\nAbstract type for bubble_pressure and bubble_temperature routines.\n\nShould at least support passing the y0 keyword, containing an initial vapour phase, if available.\n\n\n\n\n\n","category":"type"},{"location":"properties/basic/#Clapeyron.DewPointMethod","page":"Basic Properties","title":"Clapeyron.DewPointMethod","text":"DewPointMethod <: ThermodynamicMethod\n\nAbstract type for dew_pressure and dew_temperature routines.\n\nShould at least support passing the x0 keyword, containing an initial vapour phase, if available.\n\n\n\n\n\n","category":"type"},{"location":"properties/basic/#Clapeyron.TPFlashMethod","page":"Basic Properties","title":"Clapeyron.TPFlashMethod","text":"TPFlashMethod <: ThermodynamicMethod\n\nAbstract type for tp_flash routines.\n\n\n\n\n\n","category":"type"},{"location":"properties/basic/#Reference-States","page":"Basic Properties","title":"Reference States","text":"","category":"section"},{"location":"properties/basic/#Clapeyron.ReferenceState","page":"Basic Properties","title":"Clapeyron.ReferenceState","text":"ReferenceState(type::Symbol = :no_set;T0 = NaN;P0 = NaN,H0 = NaN,S0 = NaN,phase = :unknown,z0 = Float64[])\n\nParameter used to define a reference state for enthalpy and entropy, normally stored in the ideal model.  when set, it calculates a set of a0 and a1 values such as the entropy and enthalpy at a specified point are fixed.\n\nthe type argument accepts the following standalone options:\n\n:no_set: it returns the current defaults stablished by the equation of state.\n:ashrae: h = s = 0 at -40°C saturated liquid\n:iir: h = 200.0 kJ/kg, s=1.0 kJ/kg/K at 0C saturated liquid\n:nbp: h = s = 0 at 1 atm saturated liquid\n:stp: h = s = 0 at 1 bar, 0°C fluid of the most stable phase\n:stp_old: h = s = 0 at 1 atm, 0°C fluid of the most stable phase\n:ntp: h = s = 0 at 1 atm, 20°C fluid of the most stable phase\n\nit also accepts the following options, that require additional specifications:\n\n:volume h = H0, s = S0, at T = T0, v = volume(model,P0,T0,z0,phase = phase)\n:saturation_pressure h = H0, s = S0, at T = T0, saturated phase (specified by the phase argument)\n:saturation_temperature h = H0, s = S0, at p = P0, saturated phase (specified by the phase argument)\n\nIf z0 is not specified, the reference state calculation will be done for each component separately.\n\nExamples\n\njulia> model = PCSAFT([\"water\",\"pentane\"],idealmodel = ReidIdeal,reference_state = ReferenceState(:nbp))\nPCSAFT{ReidIdeal, Float64} with 2 components:\n \"water\"\n \"pentane\"\nContains parameters: Mw, segment, sigma, epsilon, epsilon_assoc, bondvol\n\njulia> model2 = PCSAFT([\"water\",\"pentane\"],idealmodel = ReidIdeal,reference_state = :nbp) #equivalent\nPCSAFT{ReidIdeal, Float64} with 2 components:\n \"water\"\n \"pentane\"\nContains parameters: Mw, segment, sigma, epsilon, epsilon_assoc, bondvol\n\njulia> pure = split_model(model)\n2-element Vector{PCSAFT{ReidIdeal, Float64}}:\n PCSAFT{ReidIdeal, Float64}(\"water\")\n PCSAFT{ReidIdeal, Float64}(\"pentane\")\n\njulia> T,vl,_ = saturation_temperature(pure[1],101325.0) #saturated liquid at 1 atm\n(373.2706553019503, 2.0512186595412677e-5, 0.03006573003253086)\n\njulia> enthalpy(pure[1],101325.0,T)\n-5.477897970382323e-6\n\njulia> entropy(pure[1],101325.0,T)\n5.009221069190994e-9\n\n\n\n\n\n","category":"type"},{"location":"properties/basic/#Clapeyron.reference_state","page":"Basic Properties","title":"Clapeyron.reference_state","text":"reference_state(model)::Union{ReferenceState,Nothing}\n\nReturns the reference state of the input model, if available. Returns nothing otherwise.\n\nExamples\n\njulia> reference_state(PCSAFT(\"water\"))\nfalse\n\njulia> has_reference_state(PCSAFT(\"water\",idealmodel = ReidIdeal))\ntrue\n\njulia> reference_state(PCSAFT(\"water\",idealmodel = MonomerIdeal)) #has reference state, it is not initialized.\nReferenceState(String[], Float64[], Float64[], NaN, NaN, Float64[], Float64[], Float64[], :unknown, :no_set)\n\njulia> reference_state(PCSAFT(\"water\",idealmodel = MonomerIdeal, reference_state = ReferenceState(:nbp))) #has an initialized reference state\nReferenceState([\"water\"], [33107.133379491206], [17.225988924236503], NaN, NaN, [0.0], [0.0], [0.0], :unknown, :nbp)\n\n\n\n\n\n","category":"function"},{"location":"properties/basic/#Clapeyron.has_reference_state","page":"Basic Properties","title":"Clapeyron.has_reference_state","text":"has_reference_state(model)::Bool\n\nChecks if the input EoSModel has a reference state. Returns true/false\n\nExamples\n\njulia> has_reference_state(PCSAFT(\"water\"))\nfalse\n\njulia> has_reference_state(PCSAFT(\"water\",idealmodel = ReidIdeal))\ntrue\n\nNote that the default idealmodel (BasicIdeal) does not allow for setting reference states.\n\n\n\n\n\n","category":"function"},{"location":"tutorials/tp_flash/#*Tp*-Flash-algorithms","page":"Tp Flash algorithms","title":"Tp Flash algorithms","text":"","category":"section"},{"location":"tutorials/tp_flash/#Vapour–liquid-equilibrium","page":"Tp Flash algorithms","title":"Vapour–liquid equilibrium","text":"","category":"section"},{"location":"tutorials/tp_flash/#Liquid–liquid-equilibrium","page":"Tp Flash algorithms","title":"Liquid–liquid equilibrium","text":"","category":"section"},{"location":"tutorials/tp_flash/#Vapour–liquid–liquid-equilibrium","page":"Tp Flash algorithms","title":"Vapour–liquid–liquid equilibrium","text":"","category":"section"},{"location":"tutorials/user_defined_parameters/#User-Defined-Parameters","page":"User-defined Parameters","title":"User-Defined Parameters","text":"","category":"section"},{"location":"tutorials/user_defined_parameters/","page":"User-defined Parameters","title":"User-defined Parameters","text":"While Clapeyron has an extensive database for most equations of state, users may need to define their own parameters. This is possible in Clapeyron whenever constructing your models using the userlocations optional argument:","category":"page"},{"location":"tutorials/user_defined_parameters/","page":"User-defined Parameters","title":"User-defined Parameters","text":"julia> model = PCSAFT([\"your_species\"]; userlocations=[\"your_parameters.csv\"])","category":"page"},{"location":"tutorials/user_defined_parameters/","page":"User-defined Parameters","title":"User-defined Parameters","text":"Note that, in cases like cubics where one model can be constructed from multiple other models, you may need to specify the parameters for the submodels separately:","category":"page"},{"location":"tutorials/user_defined_parameters/","page":"User-defined Parameters","title":"User-defined Parameters","text":"julia> model = PR([\"your_species\"]; userlocations=[\"your_parameters.csv\"],\n                                    alpha_userlocations=[\"your_alpha_parameters.csv\"])","category":"page"},{"location":"tutorials/user_defined_parameters/","page":"User-defined Parameters","title":"User-defined Parameters","text":"There are two ways which users can specify their own parameters. The preferred way is to use CSVs. However, we also allow users to define parameters straight in the REPL.","category":"page"},{"location":"tutorials/user_defined_parameters/#Defining-parameters-using-CSVs","page":"User-defined Parameters","title":"Defining parameters using CSVs","text":"","category":"section"},{"location":"tutorials/user_defined_parameters/","page":"User-defined Parameters","title":"User-defined Parameters","text":"By default, parameters in Clapeyron are stored in CSV files. This was to make them easily readable and modifiable. You find our database online for examples. Nevertheless, recalling that we allow for three types of parameters (SingleParam, PairParam and AssocParam), we have three types of CSV files:","category":"page"},{"location":"tutorials/user_defined_parameters/","page":"User-defined Parameters","title":"User-defined Parameters","text":"Like parameters: These files contain parameters only referring to a single species:\nClapeyron Database File  \n{MODEL NAME} Like Parameters  \nspecies param1 param2\nwater 1234 5.678\nTo ensure that you contain all the appropriate parameters, please check the docs for the respective equation of state. The only equation of state that requires additional parameters is SAFT equations where users must also specify the occurrence of each site type (n_X) present.\nUnlike parameters: These files contain parameters relating to a pair of species:\nClapeyron Database File  \n{MODEL NAME} Unlike Parameters  \nspecies1 species2 param\nwater methanol 0.910\nWith the exception of activity coefficient models, these parameters are optional. Within Clapeyron, if a binary parameter is not specified, a combining rule will be used instead to obtain the unlike parameter. Furthermore, if a binary interaction parameter such as k_ij (for epsilon in SAFT or a in cubics) or l_ij (for sigma in SAFT or b in cubics) instead of the raw pair parameters, Clapeyron will use them in the combining rule. By default, unlike parameters are treated as symmetric (ij=ji). In the case of activity coefficient models, unlike parameters must be specified. As unlike parameters in activity coefficient models are almost always asymmetric, users must specify the param_12 and param_21 parameters in separate rows where the order is determined by which species is species1 and species2.\nAssociation parameters: These files contain those parameters involved in modelling association interactions:\nClapeyron Database File    \n{MODEL NAME} Assoc Parameters    \nspecies1 site1 species2 site2 param\nwater H water e 1.234\nwater H methanol e 5.678\nmethanol H water e 9.101\nFor association parameters, users must specify the species (ij) and sites (ab) involved. However, to avoid having to specify a large number of parameters, it is generally assumed that ijab=jiba which should always be true. To allow for a greater degree of flexibility, we do not assume that ijab=ijba as shown above. In Clapeyron, if a set of association parameters isn't specified, it is assumed that those association interactions do not occur. The exception to this is if a combining rule is specified within AssocOptions (see relevant docs).","category":"page"},{"location":"tutorials/user_defined_parameters/","page":"User-defined Parameters","title":"User-defined Parameters","text":"note: Specifying group parameters\nIn group-contribution based approaches, rather than giving the name of the species under the species headers, give the group names. The rest will work the same way.","category":"page"},{"location":"tutorials/user_defined_parameters/","page":"User-defined Parameters","title":"User-defined Parameters","text":"If ever you are unsure, please check our database online to see if the structure of your files make sense.","category":"page"},{"location":"tutorials/user_defined_parameters/","page":"User-defined Parameters","title":"User-defined Parameters","text":"We offer two options to creating CSVs in the REPL:","category":"page"},{"location":"tutorials/user_defined_parameters/","page":"User-defined Parameters","title":"User-defined Parameters","text":"Using ParamTable: you can specify :single, :pair and :assoc tables which just need to match the column layout in the original tables:","category":"page"},{"location":"tutorials/user_defined_parameters/","page":"User-defined Parameters","title":"User-defined Parameters","text":"data = (species = [\"water\"], Mw = [18.0])\nfile = ParamTable(:single,data,name=\"water_mw\")\nmodel = PR([\"water\"],user_locations = [file])","category":"page"},{"location":"tutorials/user_defined_parameters/","page":"User-defined Parameters","title":"User-defined Parameters","text":"Using raw CSVs: you can literally write the CSV out as a string within the REPL and just substitute this in:","category":"page"},{"location":"tutorials/user_defined_parameters/","page":"User-defined Parameters","title":"User-defined Parameters","text":"csv_data = \"\"\"Clapeyron Database File,\n       my water like parameters\n       species,Mw\n       water,18.0\n       \"\"\"\nmodel = PR([\"water\"],user_locations = [csv_data])","category":"page"},{"location":"tutorials/user_defined_parameters/","page":"User-defined Parameters","title":"User-defined Parameters","text":"We prefer that users use the CSV approach as they are much easier to visualise and modify. However, it is a more tedious approach. As such, we provide a more direct way described below.","category":"page"},{"location":"tutorials/user_defined_parameters/#Defining-parameters-within-the-REPL","page":"User-defined Parameters","title":"Defining parameters within the REPL","text":"","category":"section"},{"location":"tutorials/user_defined_parameters/","page":"User-defined Parameters","title":"User-defined Parameters","text":"Still using the userlocations argument, we can specify the parameters used directly within the REPL. For example, in the case of a cubic:","category":"page"},{"location":"tutorials/user_defined_parameters/","page":"User-defined Parameters","title":"User-defined Parameters","text":"julia> model = PR([\"water\",\"methanol\"]; userlocations = (;\n                    Tc = [647.13,512.64],\n                    Pc = [2.19e7,8.14e6],\n                    Mw = [18.0,32.0],\n                    k  = [ 0.00 -0.01;\n                          -0.01  0.00]),\n                                  alpha_userlocations = (;\n        acentricfactor = [0.343,0.566]))\nPR{BasicIdeal, PRAlpha, NoTranslation, vdW1fRule} with 2 components:\n \"water\"\n \"methanol\"\nContains parameters: a, b, Tc, Pc, Mw","category":"page"},{"location":"tutorials/user_defined_parameters/","page":"User-defined Parameters","title":"User-defined Parameters","text":"Single-component parametes are specified as vectors and pair parameters are specified as matrices. Note that you do still need to specify the submodel parameters separately (in the case of the alpha function above).","category":"page"},{"location":"tutorials/user_defined_parameters/","page":"User-defined Parameters","title":"User-defined Parameters","text":"As an additional example, let us now consider a similar case in a SAFT-type equation of state:","category":"page"},{"location":"tutorials/user_defined_parameters/","page":"User-defined Parameters","title":"User-defined Parameters","text":"model = SAFTVRMie([\"water\",\"methanol\"]; userlocations=(;\n       Mw            = [18.01,32.04],\n       segment       = [1.0,1.67034],\n       epsilon       = [266.68 278.45;\n                        278.45 307.69],\n       sigma         = [3.0063,3.2462],\n       lambda_a      = [6.,6.],\n       lambda_r      = [17.02,7.6134],\n       n_H           = [2,1],\n       n_e           = [2,2],\n       epsilon_assoc = Dict(((\"water\",\"e\"),(\"water\",\"H\")) => 1985.4,\n                            ((\"methanol\",\"e\"),(\"methanol\",\"H\")) => 2062.1,\n                            ((\"methanol\",\"e\"),(\"water\",\"H\")) => 1993.5,\n                            ((\"water\",\"e\"),(\"methanol\",\"H\")) => 1993.5),\n       bondvol       = Dict(((\"water\",\"e\"),(\"water\",\"H\")) => 1.0169e-28,\n                            ((\"methanol\",\"e\"),(\"methanol\",\"H\")) => 1.0657e-28,\n                            ((\"methanol\",\"e\"),(\"water\",\"H\")) => 1.0411e-28,\n                            ((\"water\",\"e\"),(\"methanol\",\"H\")) => 1.0411e-28)))","category":"page"},{"location":"tutorials/user_defined_parameters/","page":"User-defined Parameters","title":"User-defined Parameters","text":"As we can see, with certain equations of state, this method of specifying parameters can become unwieldy. This is why we recommend using CSVs instead. Also note that, if you only specify pure component parameters for a parameter that should include pair parameters (such as sigma above), combining rules will be used to obtain the remaining parameters. If you specify all of the pair parameters, they will be used instead (in the case of epsilon). For the cubic equation of state earlier, we specified k, which will be used to obtain the unlike a parameters. Further, if we had not specified the cross-association parameters between methanol and water, unless we specified otherwise in AssocOptions, these interactions would not be included.","category":"page"},{"location":"api/parameters/#Contents","page":"Parameters","title":"Contents","text":"","category":"section"},{"location":"api/parameters/","page":"Parameters","title":"Parameters","text":"Pages = [\"parameters.md\"]","category":"page"},{"location":"api/parameters/#Index","page":"Parameters","title":"Index","text":"","category":"section"},{"location":"api/parameters/","page":"Parameters","title":"Parameters","text":"Pages = [\"parameters.md\"]","category":"page"},{"location":"api/parameters/#Parsing-Parameters-from-Files","page":"Parameters","title":"Parsing Parameters from Files","text":"","category":"section"},{"location":"api/parameters/#Clapeyron.ParamOptions","page":"Parameters","title":"Clapeyron.ParamOptions","text":"ParamOptions(;kwargs...)\n\nStruct containing all the options related to parameter parsing:\n\nuserlocations = String[]: List of used-defined locations to search.\ngroup_userlocations = String[]: List of used-defined group locations to search.\nasymmetricparams::Vector{String} = String[]: List of pair parameters that follow that param[i,j] ≠ param[j,i]. if not set on asymmetric pairs, the asymmetric values will be overwritten!\nignore_headers::Vector{String} = [\"dipprnumber\", \"smiles\"]: List of ignored headers.\nignore_missing_singleparams::Vector{String} = String[]: List of parameters where checking for missing parameter values (in SingleParam) or the diagonal (on PairParam) are ignored.\nverbose::Bool = false: If true, show all operations done by getparams displayed in the terminal. this includes the warnings emmited by CSV.jl\nspecies_columnreference::String =\"species\": column name to check for components. in pair and association params, it will check for #species#1 and #species#2, where #species# is the value of this option.\nsite_columnreference::String =\"site\": column name to check for sites in association params, it will check for #site#1 and #site#2, where #site# is the value of this option.\nnormalisecomponents::Bool = true: If true, performs normalization of strings, on the CSV and input components\nn_sites_columns::Dict{String,String} = Dict( \"e\" => \"n_e\",\"e1\" => \"n_e1\",\"e2\" => \"n_e2\",\"H\" => \"n_H\"): dictionary to look number of sites. the number of sites is stored as columns in a single parameter csv file. for example, the number of sites of name e will be looked on the column n_e\nreturn_sites::Bool = true: If set to false, association params will be ignored and sites will not be created, even if they exist in the list of locations.\ncomponent_delimiter::String = \"~|~\": When there are multiple component names to match, seperate them by this delimiter.\n\n\n\n\n\n","category":"type"},{"location":"api/parameters/#Clapeyron.getparams","page":"Parameters","title":"Clapeyron.getparams","text":"params = getparams(components,locations;kwargs...)\n\nreturns a Dict{String,ClapeyronParam} containing all the parameters found for the list of components in the available CSVs. locations are the locations relative to Clapeyron database. the available keywords are the ones used ∈ ParamOptions if return_sites is set to true, getparams will add a \"sites\" value in the params result, containing a SiteParam built with the input parameters.\n\nSingle to Pair promotion\n\nWhen reading multiple CSVs, if a parameter name appears in a single paramter file and in a pair parameter file, the single parameter values will be promoted to be the diagonal values of the pair interaction matrix:\n\nmy_parameter_single.csv\n\nClapeyron Database File\nlike parameters\nspecies,a\nsp1,1000\nsp2,700\nsp3,850\n\nmy_parameter_pair.csv\n\nClapeyron Database File\npair parameters\nspecies1,species2,a\nsp1,sp2,875\nsp2,sp3,792\nsp3,sp1,960\n\njulia> res = getparams([\"sp1\",\"sp2\"],userlocations = [my_parameter_single.csv,my_parameter_pair.csv])\nDict{String, Clapeyron.ClapeyronParam} with 1 entry:\n  \"a\" => PairParam{Int64}(\"a\")[\"sp1\", \"sp2\"]\n\njulia> res[\"a\"].values\n2×2 Matrix{Int64}:\n 1000  875\n  875  700\n\nThis promotion fails only happens in Single-Pair combinations. it fails otherwise.\n\nIn-memory CSV parsing\n\nif you pass any string starting with Clapeyron Database File, it will be parsed as a CSV instead of being used as a filepath:\n\njulia> x = \"\"\"Clapeyron Database File,\n       in memory like parameters\n       species,a,b\n       sp1,1000,0.05\n       sp2,700,0.41\n       \"\"\"\n\"Clapeyron Database File,\nin memory parameters [csvtype = like,grouptype = in_memory_read]\nspecies,a,b\nsp1,1000,0.05\nsp2,700,0.41\n\"\njulia> Clapeyron.getparams([\"sp1\",\"sp2\"],userlocations = [x])\nDict{String, Clapeyron.ClapeyronParam} with 2 entries:\n  \"b\" => SingleParam{Float64}(\"b\")[\"sp1\", \"sp2\"]\n  \"a\" => SingleParam{Int64}(\"a\")[\"sp1\", \"sp2\"]\n\nSpecial prefixes\n\nThere are some special prefixes that are used by the parser to signal some specific behaviour to be done at parsing time, for one CSV or a group of them:\n\n@DB: replaces the path by the current Clapeyron default database. When doing getparams(components,[\"location\"]), the paths are lowered to getparams(components,userlocations = [\"@DB/location\"]).\n\nIn a way, is a path shortcut used internally by Clapeyron to parse it's own database. you can change the path where @DB points to (or add other path shortcuts), via adding a corresponding entry to the Clapeyron.SHORT_PATHS Dict.\n\n@REPLACE: Any filepath starting with @REPLACE will clear all previous appearances of the parameter names found in the CSV that contains the prefix.\n@REMOVEDEFAULTS: it is used alone, and needs to be passed at the first position of the vector of userlocations. it will skip parsing of the default parameters:\n\nThe effect of the the parser can be summarized by the following examples:\n\nmodel = PCSAFT([\"water\"],userlocations = [\"@REMOVEDEFAULTS\"]) #fails, no parameters found, no CSV parsed\nmodel = PCSAFT([\"water\"],userlocations = [\"@REPLACE/empty_params.csv\"]) #fails, no parameters found, default parameters parsed and then removed\nmodel = PCSAFT([\"water\"],userlocations = [\"@REPLACE/my_pcsaft_kij.csv\"]) #success, default kij parameters replaced by the ones on `my_pcsaft_kij.csv`\nmodel = PCSAFT([\"water\"],userlocations = [\"@REMOVEDEFAULTS\",\"@DB/SAFT/PCSAFT\",\"@DB/properties/molarmass.csv\"]) #sucess. default parameters csv removed, and parsed again, using the @DB prefix to point to the default database.\n\nYou can use the @REPLACE keyword in a in-memory CSV by adding it at the start of the string, followed by an space:\n\n#This will replace all previous parsed occurences of `a` and `b`\nx_replace = \"\"\"@REPLACE Clapeyron Database File,\nin memory like parameters\nspecies,a,b\nsp1,1000,0.05\nsp2,700,0.41\n\"\"\"\n\nCSV type detection and group type\n\nThe second line of the csv is used for comments and to identify the type of CSV used. for example:\n\nx = \"\"\"Clapeyron Database File\n       in memory like parameters\n       species,a,b\n       sp1,1000,0.05\n       sp2,700,0.41\n       \"\"\"\n\nWill be parsed as a table with single parameter data. if you want more flexibility, you can instead pass the csvtype between brackets:\n\nx = \"\"\"Clapeyron Database File\n       i can write anything here, unlike, association [csvtype = like] but the csv type is already specified.\n       species,a,b\n       sp1,1000,0.05\n       sp2,700,0.41\n       \"\"\"\n\nadditionaly, there are some cases when you want to absolutely sure that your types don't clash with the default values. this is the case with different group parametrizations of UNIFAC (Dormund, VTPR, PSRK):\n\njulia> model = UNIFAC([\"methanol\",\"ethanol\"])\nUNIFAC{PR{BasicIdeal, PRAlpha, NoTranslation, vdW1fRule}} with 2 components:\n \"methanol\": \"CH3OH\" => 1\n \"ethanol\": \"CH2\" => 1, \"CH3\" => 1, \"OH (P)\" => 1\nGroup Type: UNIFACDortmund\nContains parameters: A, B, C, R, Q\n\njulia> model = PSRKUNIFAC([\"methanol\",\"ethanol\"])\nUNIFAC{BasicIdeal} with 2 components:\n \"methanol\": \"CH3OH\" => 1\n \"ethanol\": \"CH2\" => 1, \"CH3\" => 1, \"OH\" => 1\nGroup Type: PSRK\nContains parameters: A, B, C, R, Q\n\nThe models are the same (UNIFAC), but the group parametrizations are different. this is specified with the grouptype keyword. for example, if we see UNIFAC_groups.csv, it starts with:\n\nClapeyron Database File,\nmodified UNIFAC (Dortmund) Groups [csvtype = groups,grouptype = UNIFACDortmund]\nspecies,groups\nethane,\"[\"\"CH3\"\" => 2]\"\npropane,\"[\"\"CH3\"\" => 2, \"\"CH2\"\" => 1]\"\nbutane,\"[\"\"CH3\"\" => 2, \"\"CH2\"\" => 2]\"\n...\n\nFor compatibility reasons, if you pass a CSV without grouptype, it will be accepted, but two CSV with different specified group types cannot be merged:\n\nx1 = \"\"\"Clapeyron Database File\n       paramterization 1 [csvtype = like,grouptype = param1]\n       species,a,b\n       sp1,1000,0.05\n       sp2,700,0.41\n       \"\"\"\nx2 = \"\"\"Clapeyron Database File\n       fitted to data [csvtype = like,grouptype = fitted]\n       species,a,b\n       sp1,912,0.067\n       sp2,616,0.432\n       \"\"\"\n\nIf we pass the same parameters, with different group types, the parser will fail\n\njulia> Clapeyron.getparams([\"sp1\",\"sp2\"],userlocations = [x1,x2])\nERROR: cannot join two databases with different group types:\ncurrent group type: param1\nincoming group type: fitted\n\nNote, that the parser will not fail if you pass different parameters with different group types (For example if a has param1 group type and b has fit group type)\n\n\n\n\n\n","category":"function"},{"location":"api/parameters/#Creating-Files-from-Parameters","page":"Parameters","title":"Creating Files from Parameters","text":"","category":"section"},{"location":"api/parameters/#Clapeyron.ParamTable","page":"Parameters","title":"Clapeyron.ParamTable","text":"ParamTable(type::Symbol,table;\nlocation = nothing,\nname = nothing,\ngrouptype = :unknown,\noptions = ParamOptions())\n\nCreates a clapeyron CSV file and returns the location of that file. the type determines the table type:\n\n:single creates a table with single parameters\n:pair creates a table with pair parameters\n:assoc creates a table with association parameters\n:group creates a table with association parameters\n\nBy default, the name is generated randomly, and the table is stored as a temporary scratch space (provided by Scratch.jl). You can clean said scratch space by using Clapeyron.cleartemp!().\n\nExamples:\n\njulia> data = (species = [\"water\"],Mw = [18.03]) #it could be a Dict, a named tuple, or any Tables.jl compatible table\n(species = [\"water\"], Mw = [18.9])\njulia> file = ParamTable(:single,data ,name=\"water_new_mw\")\n\"C:\\Users\\user\\.julia\\scratchspaces\\7c7805af-46cc-48c9-995b-ed0ed2dc909a\\ParamTables\\singledata_water_new_mw.csv\"\njulia> model = PCSAFT([\"water\",\"methanol\"],userlocations = [file])\nPCSAFT{BasicIdeal} with 2 components:\n \"water\"\n \"methanol\"\nContains parameters: Mw, segment, sigma,\nepsilon, epsilon_assoc, bondvol\njulia> model.params.Mw\nSingleParam{Float64}(\"Mw\") with 2 components:\n \"water\" => 18.9\n \"methanol\" => 32.042\n\n\n\n\n\n","category":"function"},{"location":"api/parameters/#Clapeyron.cleartemp!","page":"Parameters","title":"Clapeyron.cleartemp!","text":"cleartemp!()\n\nDeletes all files in the temporary Clapeyron scratch space, used to store the csvs created by ParamTable.\n\n\n\n\n\n","category":"function"},{"location":"api/parameters/#Parameter-types","page":"Parameters","title":"Parameter types","text":"","category":"section"},{"location":"api/parameters/#Clapeyron.SingleParam","page":"Parameters","title":"Clapeyron.SingleParam","text":"SingleParam{T}\n\nStruct designed to contain single parameters. Basically a vector with some extra info.\n\nCreation:\n\njulia> mw = SingleParam(\"molecular weight\",[\"water\",\"ammonia\"],[18.01,17.03])\nSingleParam{Float64}(\"molecular weight\") with 2 components:\n \"water\" => 18.01\n \"ammonia\" => 17.03\njulia> mw.values\n2-element Vector{Float64}:\n 18.01\n 17.03\njulia> mw.components\n2-element Vector{String}:\n \"water\"\n \"ammonia\"\njulia> mw2 = SingleParam(mw,\"new name\")\nSingleParam{Float64}(\"new name\") with 2 components:\n \"water\" => 18.01\n \"ammonia\" => 17.03\njulia> has_oxigen = [true,false]; has_o = SingleParam(mw2,has_oxigen)\nSingleParam{Bool}(\"new name\") with 2 components:\n \"water\" => true\n \"ammonia\" => false\n\nExample usage in models:\n\nfunction molecular_weight(model,molar_frac)\n    mw = model.params.mw.values\n    res = zero(eltype(molarfrac))\n    for i in @comps #iterating through all components\n        res += molar_frac[i]*mw[i]\n    end\n    return res\nend\n\n\n\n\n\n","category":"type"},{"location":"api/parameters/#Clapeyron.PairParam","page":"Parameters","title":"Clapeyron.PairParam","text":"PairParam{T}\n\nStruct designed to contain pair data. used a matrix as underlying data storage.\n\nCreation:\n\njulia> kij = PairParam(\"interaction params\",[\"water\",\"ammonia\"],[0.1 0.0;0.1 0.0])\nPairParam{Float64}([\"water\", \"ammonia\"]) with values:\n2×2 Matrix{Float64}:\n 0.1  0.0\n 0.1  0.0\njulia> kij.values\n2×2 Matrix{Float64}:\n 0.1  0.0\n 0.1  0.0\njulia> diagvalues(kij)\n2-element view(::Vector{Float64}, \n1:3:4) with eltype Float64:\n 0.1\n 0.0\n\nExample usage in models:\n\n#lets compute ∑xᵢxⱼkᵢⱼ\nfunction alpha(model,x)\n    kij = model.params.kij.values\n    ki = diagvalues(model.params.kij)\n    res = zero(eltype(molarfrac))\n    for i in @comps \n        @show ki[i] #diagonal values\n        for j in @comps \n            res += x[i]*x[j]*kij[i,j]\n        end\n    end\n    return res\nend\n\n\n\n\n\n","category":"type"},{"location":"api/parameters/#Clapeyron.AssocParam","page":"Parameters","title":"Clapeyron.AssocParam","text":"AssocParam{T}\n\nStruct holding association parameters.\n\n\n\n\n\n","category":"type"},{"location":"api/parameters/#Clapeyron.GroupParam","page":"Parameters","title":"Clapeyron.GroupParam","text":"GroupParam\n\nStruct holding group parameters.contains:\n\ncomponents: a list of all components\ngroups: a list of groups names for each component\ngrouptype: used to differenciate between different group models.\ni_groups: a list containing the number of groups for each component\nn_groups: a list of the group multiplicity of each group corresponding to each group in i_groups\nn_intragroups: a list containining the connectivity graph (as a matrix) between each group for each component.\nflattenedgroups: a list of all unique groups–the parameters correspond to this list\nn_flattenedgroups: the group multiplicities corresponding to each group in flattenedgroups\n\nYou can create a group param by passing a `Vector{Tuple{String, Vector{Pair{String, Int64}}}}. For example:\n\njulia> grouplist = [\n           (\"ethanol\", [\"CH3\"=>1, \"CH2\"=>1, \"OH\"=>1]),\n           (\"nonadecanol\", [\"CH3\"=>1, \"CH2\"=>18, \"OH\"=>1]),\n           (\"ibuprofen\", [\"CH3\"=>3, \"COOH\"=>1, \"aCCH\"=>1, \"aCCH2\"=>1, \"aCH\"=>4])];\njulia> groups = GroupParam(grouplist)\nGroupParam(:unknown) with 3 components:\n \"ethanol\": \"CH3\" => 1, \"CH2\" => 1, \"OH\" => 1\n \"nonadecanol\": \"CH3\" => 1, \"CH2\" => 18, \"OH\" => 1\n \"ibuprofen\": \"CH3\" => 3, \"COOH\" => 1, \"aCCH\" => 1, \"aCCH2\" => 1, \"aCH\" => 4\njulia> groups.flattenedgroups\n7-element Vector{String}:\n \"CH3\"\n \"CH2\"\n \"OH\"\n \"COOH\"\n \"aCCH\"\n \"aCCH2\"\n \"aCH\"\njulia> groups.i_groups\n3-element Vector{Vector{Int64}}:\n [1, 2, 3]\n [1, 2, 3]\n [1, 4, 5, 6, 7]\njulia> groups.n_groups\n3-element Vector{Vector{Int64}}:\n [1, 1, 1]\n [1, 18, 1]\n [3, 1, 1, 1, 4]\njulia> groups.n_flattenedgroups\n 3-element Vector{Vector{Int64}}:\n [1, 1, 1, 0, 0, 0, 0]\n [1, 18, 1, 0, 0, 0, 0]\n [3, 0, 0, 1, 1, 1, 4]\n\nif you have CSV with group data, you can also pass those, to automatically query the missing groups in your input vector:\n\njulia> grouplist = [\n           \"ethanol\",\n           (\"nonadecanol\", [\"CH3\"=>1, \"CH2\"=>18, \"OH\"=>1]),\n           (\"ibuprofen\", [\"CH3\"=>3, \"COOH\"=>1, \"aCCH\"=>1, \"aCCH2\"=>1, \"aCH\"=>4])];\n           julia> groups = GroupParam(grouplist, [\"SAFT/SAFTgammaMie/SAFTgammaMie_groups.csv\"])\n           GroupParam with 3 components:\n            \"ethanol\": \"CH2OH\" => 1, \"CH3\" => 1\n            \"nonadecanol\": \"CH3\" => 1, \"CH2\" => 18, \"OH\" => 1\n            \"ibuprofen\": \"CH3\" => 3, \"COOH\" => 1, \"aCCH\" => 1, \"aCCH2\" => 1, \"aCH\" => 4\n\nIn this case, SAFTGammaMie files support the second order group CH2OH.\n\n\n\n\n\n","category":"type"},{"location":"api/parameters/#Clapeyron.SiteParam","page":"Parameters","title":"Clapeyron.SiteParam","text":"SiteParam\n\nStruct holding site parameters. Is built by parsing all association parameters in the input CSV files. It has the following fields:\n\ncomponents: a list of all components (or groups in Group Contribution models)\nsites: a list containing a list of all sites corresponding to each component (or group) in the components field\nn_sites: a list of the site multiplicities corresponding to each site in flattenedsites\nflattenedsites: a list of all unique sites\ni_sites: an iterator that goes through the indices corresponding  to each site in flattenedsites\nn_flattenedsites: the site multiplicities corresponding to each site in flattenedsites\ni_flattenedsites: an iterator that goes through the indices for each flattened site\n\nLet's explore the sites in a 3-component SAFTGammaMie model:\n\njulia> model3 = SAFTgammaMie([    \n                \"ethanol\",\n                (\"nonadecanol\", [\"CH3\"=>1, \"CH2\"=>18, \"OH\"=>1]),     \n                (\"ibuprofen\", [\"CH3\"=>3, \"COOH\"=>1, \"aCCH\"=>1, \"aCCH2\"=>1, \"aCH\"=>4])\n                               ])\nSAFTgammaMie{BasicIdeal} with 3 components:\n \"ethanol\"\n \"nonadecanol\"\n \"ibuprofen\"\nContains parameters: segment, shapefactor, lambda_a, lambda_r, sigma, epsilon, epsilon_assoc, bondvol \njulia> model3.sites\nSiteParam with 8 sites:\n \"CH2OH\": \"H\" => 1, \"e1\" => 2     \n \"CH3\": (no sites)\n \"CH2\": (no sites)\n \"OH\": \"H\" => 1, \"e1\" => 2        \n \"COOH\": \"e2\" => 2, \"H\" => 1, \"e1\" => 2\n \"aCCH\": (no sites)\n \"aCCH2\": (no sites)\n \"aCH\": (no sites)\njulia> model3.sites.flattenedsites\n3-element Vector{String}:\n \"H\"\n \"e1\"\n \"e2\"\njulia> model3.sites.i_sites       \n8-element Vector{Vector{Int64}}:\n [1, 2]\n []\n []\n [1, 2]\n [1, 2, 3]\n []\n []\n []\njulia> model3.sites.n_sites       \n8-element Vector{Vector{Int64}}:\n [1, 2]\n []\n []\n [1, 2]\n [2, 1, 2]\n []\n []\n []\n\n\n\n\n\n","category":"type"},{"location":"api/parameters/#Clapeyron.AssocOptions","page":"Parameters","title":"Clapeyron.AssocOptions","text":"AssocOptions(;rtol = 1e-12,atol = 1e-12,max_iters = 1000,dampingfactor = 0.5,combining =:nocombining)\n\nStruct containing iteration parameters for the solver of association sites. the combining option controls the type of combining rule applied to the association strength:\n\nnocombining (default). Does not perform any combination rules.\n:cr1: \"combining rule - 1\":   ε[i,j][a,b] = (ε[i,i][a,b] + ε[j,j][a,b])/2   β[i,j][a,b] = √(β[i,i][a,b] * β[j,j][a,b])\n:esd,:elliott: Elliott–Suresh–Donohue combining rule:   ε[i,j][a,b] = (ε[i,i][a,b] + ε[j,j][a,b])/2   β[i,j][a,b] = √(β[i,i][a,b] * β[j,j][a,b]) * (σ[i]*σ[j]/σ[i,j])^3\n:esd_runtime,:elliott_runtime: combining rule, performed at runtime:   Δ[i,j][a,b] = √(Δ[i,i][a,b] * Δ[j,j][a,b])\n:dufal,mie15: combining rule used for SAFTVRMie15   ε[i,j][a,b] = (ε[i,i][a,b] + ε[j,j][a,b])/2   β[i,j][a,b] = (∛β[i,i][a,b] + ∛β[j,j][a,b])^3 / 8\n\ninfo: Association Scheme matters\nall combining rules implicitly requires that both Δ(i,i,a,b) and  Δ(j,j,a,b) are non-zero, that means that components that don't self associate will not be combined.\n\n\n\n\n\n","category":"type"},{"location":"api/parameters/#Combining-Rules,-out-of-place-methods","page":"Parameters","title":"Combining Rules, out-of-place methods","text":"","category":"section"},{"location":"api/parameters/#Clapeyron.kij_mix","page":"Parameters","title":"Clapeyron.kij_mix","text":"kij_mix(f,p::ClapeyronParam,k::PairParam)::PairParam\nkij_mix(f,p::ClapeyronParam)::PairParam\n\nGeneral combining rule for pair parameter with a kᵢⱼ interaction parameter. returns a pair parameter with non diagonal entries equal to:\n\npᵢⱼ = f(pᵢ,pⱼ,kᵢⱼ)\n\nWhere f is a 'combining' function that follows the rules:\n\nf(pᵢ,pⱼ,0) = f(pⱼ,pᵢ,0)\nf(pᵢ,pᵢ,0) = pᵢ\n\nand k must follow:\n\nkᵢᵢ = 0 \n\nIgnores non-diagonal entries already set.\n\nIf a Single Parameter is passed as input, it will be converted to a Pair Parameter with pᵢᵢ = pᵢ.\n\n\n\n\n\n","category":"function"},{"location":"api/parameters/#Clapeyron.pair_mix","page":"Parameters","title":"Clapeyron.pair_mix","text":"pair_mix(g,P::ClapeyronParam,Q::ClapeyronParam)::PairParam\npair_mix(g,P::ClapeyronParam,Q::ClapeyronParam)::PairParam\n\nGeneral combining rule for a pair and a single parameter. returns a pair parameter P with non diagonal entries equal to:\n\nPᵢⱼ = g(Pᵢ,Pⱼ,Qᵢ,Qⱼ,Qᵢⱼ)\n\nWhere f is a 'combining' function that follows the rules:\n\nPᵢⱼ = Pⱼᵢ = g(Pᵢ,Pⱼ,Qᵢ,Qⱼ,Qᵢⱼ) = g(Pⱼ,Pᵢ,Qⱼ,Qᵢ,Qᵢⱼ)\ng(Pᵢ,Pᵢ,Qᵢ,Qᵢ,Qᵢ) = Pᵢ\n\nit is a more general form of kij_mix, where kij_mix(f,P,Q) == pair_mix(g,P,Q) is correct if:\n\nf(Pᵢ,Pⱼ,Qᵢⱼ) = g(Pᵢ,Pⱼ,_,_,Qᵢⱼ)\n\nIf you pass a `SingleParam` or a vector as input for `Q`, then `Qᵢⱼ` will be considered 0.\n\n\n\n\n\n","category":"function"},{"location":"api/parameters/#Clapeyron.mirror_pair","page":"Parameters","title":"Clapeyron.mirror_pair","text":"mirror_pair(param::PairParam,f = identity)\n\nperforms an operation f over the indices of p such as p[j,i] = f(p[i,j]). by default, f = identity (a symmetric matrix).  One key difference is that it sets the ismissingvalues field for each modified index to false\n\n\n\n\n\n","category":"function"},{"location":"api/parameters/#Clapeyron.sigma_LorentzBerthelot","page":"Parameters","title":"Clapeyron.sigma_LorentzBerthelot","text":"sigma_LorentzBerthelot(σ::SingleOrPair,ζ)::PairParam\nsigma_LorentzBerthelot(σ::SingleOrPair)::PairParam\nsigma_LorentzBerthelot(σ::Union{AbstractVector,AbstractMatrix},ζ)::AbstractMatrix\nsigma_LorentzBerthelot(σ::Union{AbstractVector,AbstractMatrix})::AbstractMatrix\n\nCombining rule for a single or pair parameter. Returns a pair parameter with non diagonal entries equal to:\n\nσᵢⱼ = (1 - ζᵢⱼ)*(σᵢ + σⱼ)/2\n\nIf ζᵢⱼ is not defined, the definition is reduced to a simple arithmetic mean:\n\nσᵢⱼ = (σᵢ + σⱼ)/2\n\nIgnores non-diagonal entries already set.\n\nIf a Single Parameter (or vector) is passed as input, it will be converted to a Pair Parameter with σᵢᵢ = σᵢ.\n\n\n\n\n\n","category":"function"},{"location":"api/parameters/#Clapeyron.epsilon_LorentzBerthelot","page":"Parameters","title":"Clapeyron.epsilon_LorentzBerthelot","text":"epsilon_LorentzBerthelot(ϵ::SingleOrPair,k)::PairParam\nepsilon_LorentzBerthelot(ϵ::SingleOrPair)::PairParam\nepsilon_LorentzBerthelot(ϵ::Union{AbstractVector,AbstractMatrix},k)::AbstractMatrix\nepsilon_LorentzBerthelot(ϵ::Union{AbstractVector,AbstractMatrix})::AbstractMatrix\n\nCombining rule for a single or pair parameter. Returns a pair parameter with non diagonal entries equal to:\n\nϵᵢⱼ = (1 - kᵢⱼ)*√(ϵᵢϵⱼ)\n\nIf kᵢⱼ is not defined, the definition is reduced to a simple geometric mean:\n\nϵᵢⱼ = √(ϵᵢϵⱼ)\n\nIgnores non-diagonal entries already set. If a Single Parameter is passed as input, it will be converted to a Pair Parameter with ϵᵢᵢ = ϵᵢ.\n\n\n\n\n\n","category":"function"},{"location":"api/parameters/#Clapeyron.epsilon_HudsenMcCoubrey","page":"Parameters","title":"Clapeyron.epsilon_HudsenMcCoubrey","text":"epsilon_HudsenMcCoubrey(ϵ::SingleOrPair,σ)::PairParam\nepsilon_HudsenMcCoubrey(ϵ::SingleOrPair)::PairParam\nepsilon_HudsenMcCoubrey(ϵ::Union{AbstractVector,AbstractMatrix},σ)::AbstractMatrix\nepsilon_HudsenMcCoubrey(ϵ::Union{AbstractVector,AbstractMatrix})::AbstractMatrix\n\nCombining rule for a single or pair parameter. Returns a pair parameter with non diagonal entries equal to:\n\nϵᵢⱼ = √(ϵᵢϵⱼ)*(σᵢᵢ^3 * σⱼⱼ^3)/σᵢⱼ^6 \n\nIf σᵢⱼ is not defined, the definition is reduced to a simple geometric mean:\n\nϵᵢⱼ = √(ϵᵢϵⱼ)\n\nIgnores non-diagonal entries already set. If a Single Parameter is passed as input, it will be converted to a Pair Parameter with ϵᵢᵢ = ϵᵢ.\n\n\n\n\n\n","category":"function"},{"location":"api/parameters/#Clapeyron.epsilon_HudsenMcCoubreysqrt","page":"Parameters","title":"Clapeyron.epsilon_HudsenMcCoubreysqrt","text":"epsilon_HudsenMcCoubreysqrt(ϵ::SingleOrPair,σ)::PairParam\nepsilon_HudsenMcCoubreysqrt(ϵ::SingleOrPair)::PairParam\nepsilon_HudsenMcCoubreysqrt(ϵ::Union{AbstractVector,AbstractMatrix},σ)::AbstractMatrix\nepsilon_HudsenMcCoubreysqrt(ϵ::Union{AbstractVector,AbstractMatrix})::AbstractMatrix\n\nCombining rule for a single or pair parameter. returns a pair parameter with non diagonal entries equal to:\n\nϵᵢⱼ = √(ϵᵢϵⱼ * σᵢᵢ^3 * σⱼⱼ^3)/σᵢⱼ^3\n\nIf σᵢⱼ is not defined, the definition is reduced to a simple geometric mean:\n\nϵᵢⱼ = √(ϵᵢϵⱼ)\n\nIgnores non-diagonal entries already set.\n\nIf a Single Parameter is passed as input, it will be converted to a Pair Parameter with ϵᵢᵢ = ϵᵢ.\n\n\n\n\n\n","category":"function"},{"location":"api/parameters/#Clapeyron.lambda_LorentzBerthelot","page":"Parameters","title":"Clapeyron.lambda_LorentzBerthelot","text":"lambda_LorentzBerthelot(λ::SingleOrPair,k = 3)::PairParam\nlambda_LorentzBerthelot(λ::Union{AbstractVector,AbstractMatrix},k = 3)::AbstractMatrix\n\nCombining rule for a single or pair parameter. returns a pair parameter with non diagonal entries equal to:\n\nλᵢⱼ = k + √((λᵢᵢ - k)(λⱼⱼ - k))\n\nwith k = 0 the definition is reduced to a simple geometric mean:\n\nλᵢⱼ = √(λᵢλⱼ)\n\nIgnores non-diagonal entries already set.\n\nIf a Single Parameter is passed as input, it will be converted to a Pair Parameter with λᵢᵢ = λᵢ.\n\n\n\n\n\n","category":"function"},{"location":"api/parameters/#Clapeyron.lambda_squarewell","page":"Parameters","title":"Clapeyron.lambda_squarewell","text":"lambda_squarewell(λ::SingleOrPair,σ)::PairParam\nlambda_squarewell(λ::Union{AbstractVector,AbstractMatrix},σ)::AbstractMatrix\n\nCombining rule for a single or pair parameter. returns a pair parameter with non diagonal entries equal to:\n\nλᵢⱼ = (σᵢᵢλᵢᵢ + σⱼⱼλⱼⱼ)/(σᵢᵢ + σⱼⱼ)\n\nIgnores non-diagonal entries already set.\n\nIf a Single Parameter is passed as input, it will be converted to a Pair Parameter with λᵢᵢ = λᵢ.\n\n\n\n\n\n","category":"function"},{"location":"api/parameters/#Combining-Rules,-in-place-methods","page":"Parameters","title":"Combining Rules, in-place methods","text":"","category":"section"},{"location":"api/parameters/#Clapeyron.sigma_LorentzBerthelot!","page":"Parameters","title":"Clapeyron.sigma_LorentzBerthelot!","text":"sigma_LorentzBerthelot!(σ::PairParameter,ζ)::PairParam\nsigma_LorentzBerthelot!(σ::AbstractMatrix,ζ)::AbstractMatrix\n\nCombining rule for a single or pair parameter. Returns a pair parameter with non diagonal entries equal to:\n\nσᵢⱼ = (1 - ζᵢⱼ)*(σᵢ + σⱼ)/2\n\nIf ζᵢⱼ is not defined, the definition is reduced to a simple arithmetic mean:\n\nσᵢⱼ = (σᵢ + σⱼ)/2\n\nThe method overwrites the entries in σ, with the exception of diagonal entries.\n\n\n\n\n\n","category":"function"},{"location":"api/parameters/#Clapeyron.epsilon_LorentzBerthelot!","page":"Parameters","title":"Clapeyron.epsilon_LorentzBerthelot!","text":"epsilon_LorentzBerthelot!(ϵ::PairParameter,k)::PairParam\nepsilon_LorentzBerthelot!(ϵ::PairParameter)::PairParam\nepsilon_LorentzBerthelot!(ϵ::AbstractMatrix,k)::AbstractMatrix\nepsilon_LorentzBerthelot!(ϵ::AbstractMatrix)::AbstractMatrix\n\nCombining rule for a single or pair parameter. Returns a pair parameter with non diagonal entries equal to:\n\nϵᵢⱼ = (1 - kᵢⱼ)*√(ϵᵢϵⱼ)\n\nIf kᵢⱼ is not defined, the definition is reduced to a simple geometric mean:\n\nϵᵢⱼ = √(ϵᵢϵⱼ)\n\nThe method overwrites the entries in ϵ, with the exception of diagonal entries.\n\n\n\n\n\n","category":"function"},{"location":"api/parameters/#Clapeyron.epsilon_HudsenMcCoubrey!","page":"Parameters","title":"Clapeyron.epsilon_HudsenMcCoubrey!","text":"epsilon_HudsenMcCoubrey!(ϵ::PairParameter,σ)::PairParam\nepsilon_HudsenMcCoubrey!(ϵ::PairParameter)::PairParam\nepsilon_HudsenMcCoubrey!(ϵ::AbstractMatrix,σ)::AbstractMatrix\nepsilon_HudsenMcCoubrey!(ϵ::AbstractMatrix)::AbstractMatrix\n\nCombining rule for a single or pair parameter. Returns a pair parameter with non diagonal entries equal to:\n\nϵᵢⱼ = √(ϵᵢϵⱼ)*(σᵢᵢ^3 * σⱼⱼ^3)/σᵢⱼ^6 \n\nIf σᵢⱼ is not defined, the definition is reduced to a simple geometric mean:\n\nϵᵢⱼ = √(ϵᵢϵⱼ)\n\nIgnores non-diagonal entries already set. If a Single Parameter is passed as input, it will be converted to a Pair Parameter with ϵᵢᵢ = ϵᵢ.\n\n\n\n\n\n","category":"function"},{"location":"api/parameters/#Group-Combining-Rules","page":"Parameters","title":"Group Combining Rules","text":"","category":"section"},{"location":"api/parameters/#Clapeyron.group_sum","page":"Parameters","title":"Clapeyron.group_sum","text":"group_sum(groups::GroupParam,P::SingleParameter)\n\nGiven a GroupParam and a Single Parameter P for group data, it will return a single parameter p of component data, where:\n\npᵢ = ∑Pₖνᵢₖ\n\nwhere νᵢₖ is the number of groups k at component i.\n\n\n\n\n\ngroup_sum(groups::GroupParam,P::AbstractVector)\n\nGiven a GroupParam and a Vector P for group data, it will return a Vector p of component data, where:\n\npᵢ = ∑Pₖνᵢₖ\n\nwhere νᵢₖ is the number of groups k at component i.\n\n\n\n\n\ngroup_sum(groups::GroupParam,::Nothing)\n\nGiven a GroupParam, it will return a vector p of component data, where:\n\npᵢ = ∑νᵢₖ\n\nwhere νᵢₖ is the number of groups k at component i.\n\n\n\n\n\n","category":"function"},{"location":"api/parameters/#Clapeyron.group_pairmean","page":"Parameters","title":"Clapeyron.group_pairmean","text":"group_pairmean(groups::GroupParam,param::PairParam)\ngroup_pairmean(f,groups::GroupParam,param::SingleParam)\n\nGiven a GroupParam and a parameter P it will return a single parameter p of component data, where:\n\npᵢ = ∑νᵢₖ(∑(νᵢₗ*P(i,j))) / ∑νᵢₖ(∑νᵢₗ)\n\nwhere νᵢₖ is the number of groups k at component i and P(i,j) depends on the type of P:\n\nif P is a single paremeter, then P(i,j) = f(P[i],P[j])\nif P is a pair paremeter, then P(i,j) = p[i,j]\n\n\n\n\n\n","category":"function"},{"location":"api/parameters/#Clapeyron.group_matrix","page":"Parameters","title":"Clapeyron.group_matrix","text":"group_matrix(groups::MixedGCSegmentParam)\n\nreturns a matrix of size (k,i) with values νₖᵢ. when multiplied with a molar amount, it returns the amount of moles of each group.\n\n\n\n\n\n","category":"function"},{"location":"api/parameters/#Model-Splitting","page":"Parameters","title":"Model Splitting","text":"","category":"section"},{"location":"api/parameters/#Clapeyron.split_model","page":"Parameters","title":"Clapeyron.split_model","text":"split_model(model::EoSModel)\nsplit_model(model::EoSModel, splitter)\n\nTakes in a model for a multi-component system and returns a vector of models. The result depends on the splitter used.\n\nA model can be splitted in a list of submodels, where each submodel is of the same type as the original model, but it has a different combination of components.\n\nGroup-Contribution models are also splitted in a component basis, split_model takes care of converting between Group and Component basis automatically.\n\nA splitter is just a list of indices for each submodel, valid splitters are:\n\nA list of integers: split_model(model,[1,5,2]) will return three pure models.\nAn integer: split_model(model,1) will return a list with one model corresponding to the first component\nA list of lists: split_model(model,[[1,2],[3]) will return a list with two models, the first one will contain two components, the second one will be a pure model.\n\nThe default splitter is 1:length(model), that will return a list with all pure models.\n\nExamples\n\njulia> model = MonomerIdeal([\"methane\",\"propane\",\"butane\"])\nMonomerIdeal with 3 components:\n \"methane\"\n \"propane\"\n \"butane\"\nContains parameters: Mw, reference_state\n\njulia> split_model(model)\n3-element Vector{MonomerIdeal}:\n MonomerIdeal(\"methane\")\n MonomerIdeal(\"propane\")\n MonomerIdeal(\"butane\")\n \njulia> split_model(model,[[1,2],[3,1]])\n2-element Vector{MonomerIdeal}:\n MonomerIdeal(\"methane\", \"propane\")\n MonomerIdeal(\"butane\", \"methane\")\n\njulia> split_model(model,2)\n1-element Vector{MonomerIdeal}:\n MonomerIdeal(\"propane\")\n\n\n\n\n\n","category":"function"},{"location":"api/parameters/#Clapeyron.is_splittable","page":"Parameters","title":"Clapeyron.is_splittable","text":"is_splittable(model)::Bool\n\nTrait to determine if a EoSModel should be splitted by itself or can be simply filled into a vector. This is useful in the case of models without any parameters, as those models are impossible by definition to split, because they don't have any underlying data. The Default is is_splittable(model) = true.\n\n\n\n\n\n","category":"function"},{"location":"api/parameters/#Clapeyron.index_reduction","page":"Parameters","title":"Clapeyron.index_reduction","text":"index_reduction(model::EoSModel,z,zmin = sum(z)*4*eps(eltype(z)))\nindex_reduction(model::EoSModel,bools <: AbstractVector{Bool})\n\nRemoves any component with composition z[i] < zmin. returns a reduced model model_r and a vector of indices idx_r, such as:\n\nmodel_r,idx_r = index_reduction(model,z)\neos(model,V,T,z) ≈ eos(model_r,V,T,z[idx_r])\n\nif the model does not have empty compositions, it will just return the input model.\n\nThe function will error if the reduction results in an empty model.\n\nYou can pass an arbitrary boolean vector (bools) to perform the reduction.\n\n\n\n\n\n","category":"function"},{"location":"api/parameters/#Model-Exporting","page":"Parameters","title":"Model Exporting","text":"","category":"section"},{"location":"api/parameters/#Clapeyron.export_model","page":"Parameters","title":"Clapeyron.export_model","text":"export_model(model::EoSModel,name=\"\";location=\".\")\n\nExports model parameters to CSVs. Unless the name kwarg is specified, the name of the files will follow the convention singledata_EoS, pairdata_EoS and assocdata_EoS. Files will be saved within the current directory unless the location argument is specified.\n\nNote that it will export all submodel parameters (e.g. Alpha function parameters for cubic EoS).\n\n\n\n\n\n","category":"function"},{"location":"api/parameters/#Model-Citing","page":"Parameters","title":"Model Citing","text":"","category":"section"},{"location":"api/parameters/#Clapeyron.doi","page":"Parameters","title":"Clapeyron.doi","text":"doi(model)\n\nReturns a Vector of strings containing the top-level bibliographic references of the model, in DOI format. if there isn't a references field, it defaults to default_references(model)\n\njulia> umr = UMRPR([\"water\"],idealmodel = WalkerIdeal);Clapeyron.doi(umr)\n1-element Vector{String}:\n \"10.1021/I160057A011\"\n\n\n\n\n\n","category":"function"},{"location":"api/parameters/#Clapeyron.cite","page":"Parameters","title":"Clapeyron.cite","text":"cite(model,out = :doi)\n\nReturns a Vector of strings containing all bibliographic references of the model, in the format indicated by the out argument. this includes any nested models.\n\njulia> umr = UMRPR([\"water\"],idealmodel = WalkerIdeal);Clapeyron.cite(umr) #should cite UMRPR, UNIFAC, WalkerIdeal\n4-element Vector{String}:\n \"10.1021/I160057A011\"\n \"10.1021/ie049580p\"\n \"10.1021/i260064a004\"\n \"10.1021/acs.jced.0c00723\"\n\nthe out argument supports two values:\n\n:doi: returns the stored values on each EoS. by default those are DOI identifiers.\n:bib: returns BibTeX entries. to use this, an internet connection is required.\n\njulia> model = SAFTVRQMie([\"helium\"])\nSAFTVRQMie{BasicIdeal} with 1 component:\n \"helium\"\nContains parameters: Mw, segment, sigma, lambda_a, lambda_r, epsilon\n\njulia> Clapeyron.cite(model,:bib)\n2-element Vector{String}:\n \"@article{Aasen_2019,\n\tdoi = {10\" ⋯ 463 bytes ⋯ \"Journal of Chemical Physics}\n}\"\n \"@article{Aasen_2020,\n\tdoi = {10\" ⋯ 452 bytes ⋯ \"Journal of Chemical Physics}\n}\"\n\nThis list will displayed by each EoSModel on future versions. you can enable/disable this by setting ENV[\"CLAPEYRON_SHOW_REFERENCES\"] = \"TRUE\"/\"FALSE\"\n\n\n\n\n\n","category":"function"},{"location":"api/parameters/#Clapeyron.doi2bib","page":"Parameters","title":"Clapeyron.doi2bib","text":"doi2bib(doi::String)\n\ngiven a DOI identifier, returns a BibTeX entry. requires an internet connection. if the value is not found, returns an empty string. results are cached in Clapeyron.DOI2BIB_CACHE\n\nExample\n\njulia> Clapeyron.doi2bib(\"10.1063/1.5136079\")\n\"@article{Aasen_2020,\n\tdoi = {10.1063/1.5136079},\n\turl = {https://doi.org/10.1063%2F1.5136079},\n\tyear = 2020,\n\tmonth = {feb},\n\tpublisher = {{AIP} Publishing},\n\tvolume = {152},\n\tnumber = {7},\n\tpages = {074507},\n\tauthor = {Ailo Aasen and Morten Hammer and Erich A. Müller and {\\O}ivind Wilhelmsen},\n\ttitle = {Equation of state and force fields for Feynman{\\textendash}Hibbs-corrected Mie fluids. {II}. Application to mixtures of helium, neon, hydrogen, and deuterium},\n\tjournal = {The Journal of Chemical Physics}\n}\"\n\n\n\n\n\n","category":"function"},{"location":"eos/cubic/#Index","page":"Cubic Models","title":"Index","text":"","category":"section"},{"location":"eos/cubic/","page":"Cubic Models","title":"Cubic Models","text":"Pages = [\"cubic.md\"]","category":"page"},{"location":"eos/cubic/#Cubic-Models","page":"Cubic Models","title":"Cubic Models","text":"","category":"section"},{"location":"eos/cubic/","page":"Cubic Models","title":"Cubic Models","text":"All cubic models in Clapeyron.jl follow a common evaluation order:","category":"page"},{"location":"eos/cubic/","page":"Cubic Models","title":"Cubic Models","text":"function CubicModel(args...)\n    # get params for database, initialize other models, etc.\n    recombine!(model)  # we calculate the mixing rules, caches for the translation models if necessary, etc.\nend\n\nfunction cubic_ab(model::CubicModel,V,T,z=SA[1.0])\n    invn2 = (one(n)/n)^2\n    a = model.params.a.values\n    b = model.params.b.values\n    α = α_function(model,V,T,z,model.alpha)\n    c = translation(model,V,T,z,model.translation)\n    ā,b̄,c̄ = mixing_rule(model,V,T,z,model.mixing,α,a,b,c)\n    return ā, b̄, c̄\nend\n\nfunction a_res(model::CubicModel,V,T,z,data = (sum(z),cubic_ab(model,V,T,z)))\n    n, ā, b̄, c̄ = data\n    # depends on the specific EoS\n    return result\nend","category":"page"},{"location":"eos/cubic/","page":"Cubic Models","title":"Cubic Models","text":"A Mixing Rule Model creates aᵢⱼ and bᵢⱼ from the critical temperature, critical pressure and a matrix of pair coefficients.\nAn Alpha Model creates a vector of αᵢ(T) values.\nA Translation Model creates a vector of cᵢ values.\nThe same Mixing rule, given aᵢⱼ, bᵢⱼ, αᵢ(T) and cᵢ returns the the mixture values of ā, b̄ and c̄ that are then used by the corresponding cubic model. A Mixing Rule can contain activity models to participate in the mixing (for example, Huron–Vidal rules).","category":"page"},{"location":"eos/cubic/#Common-Definitions","page":"Cubic Models","title":"Common Definitions","text":"","category":"section"},{"location":"eos/cubic/#Clapeyron.ab_premixing","page":"Cubic Models","title":"Clapeyron.ab_premixing","text":"ab_premixing(model,mixing,kij = nothing,lij = nothing)\n\ngiven a model::CubicModel, that has a::PairParam, b::PairParam, a mixing::MixingRule and kij,lij matrices, ab_premixing will perform an implace calculation to obtain the values of a and b, containing values aᵢⱼ and bᵢⱼ. by default, it performs the van der Wals One-Fluid mixing rule. that is:\n\naᵢⱼ = sqrt(aᵢ*aⱼ)*(1-kᵢⱼ)\nbᵢⱼ = (bᵢ + bⱼ)/2\n\n\n\n\n\n","category":"function"},{"location":"eos/cubic/#Clapeyron.mixing_rule","page":"Cubic Models","title":"Clapeyron.mixing_rule","text":"mixing_rule(model::CubicModel,V,T,z,mixing_model::MixingRule,α,a,b,c)\n\nInterface function used by cubic models. with matrices a and b, vectors α and c, a model::CubicModel and mixing_model::MixingRule, returns the scalars ā,b̄ and c̄, corresponding to the values mixed by the amount of components and the specifics of the mixing rule.\n\nExample\n\nfunction mixing_rule(model::CubicModel,V,T,z,mixing_model::vdW1fRule,α,a,b,c)\n    ∑z = sum(z)\n    ā = dot(z .* sqrt(α),a,z .* sqrt(α))/(∑z*∑z) #∑∑aᵢⱼxᵢxⱼ√(αᵢαⱼ)\n    b̄ = dot(z,b,z)/(∑z*∑z)  #∑∑bᵢⱼxᵢxⱼ\n    c̄ = dot(z,c)/∑z ∑cᵢxᵢ\n    return ā,b̄,c̄\nend\n\n\n\n\n\n","category":"function"},{"location":"eos/cubic/#Main-Models","page":"Cubic Models","title":"Main Models","text":"","category":"section"},{"location":"eos/cubic/#Clapeyron.vdW","page":"Cubic Models","title":"Clapeyron.vdW","text":"vdW(components;\nidealmodel = BasicIdeal,\nalpha = NoAlpha,\nmixing = vdW1fRule,\nactivity = nothing,\ntranslation = NoTranslation,\nuserlocations = String[],\nideal_userlocations = String[],\nalpha_userlocations = String[],\nmixing_userlocations = String[],\nactivity_userlocations = String[],\ntranslation_userlocations = String[],\nreference_state = nothing,\nverbose = false)\n\nInput parameters\n\nTc: Single Parameter (Float64) - Critical Temperature [K]\nPc: Single Parameter (Float64) - Critical Pressure [Pa]\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nk: Pair Parameter (Float64) (optional)\nl: Pair Parameter (Float64) (optional)\n\nModel Parameters\n\nTc: Single Parameter (Float64) - Critical Temperature [K]\nPc: Single Parameter (Float64) - Critical Pressure [Pa]\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\na: Pair Parameter (Float64)\nb: Pair Parameter (Float64)\n\nInput models\n\nidealmodel: Ideal Model\nalpha: Alpha model\nmixing: Mixing model\nactivity: Activity Model, used in the creation of the mixing model.\ntranslation: Translation Model\n\nDescription\n\nvan der Wals Equation of state.\n\nP = RT/(V-Nb) + a•α(T)/V²\n\nModel Construction Examples\n\n# Using the default database\nmodel = vdW(\"water\") #single input\nmodel = vdW([\"water\",\"ethanol\"]) #multiple components\nmodel = vdW([\"water\",\"ethanol\"], idealmodel = ReidIdeal) #modifying ideal model\nmodel = vdW([\"water\",\"ethanol\"],alpha = SoaveAlpha) #modifying alpha function\nmodel = vdW([\"water\",\"ethanol\"],translation = RackettTranslation) #modifying translation\nmodel = vdW([\"water\",\"ethanol\"],mixing = KayRule) #using another mixing rule\nmodel = vdW([\"water\",\"ethanol\"],mixing = WSRule, activity = NRTL) #using advanced EoS+gᴱ mixing rule\n\n# Passing a prebuilt model\n\nmy_alpha = SoaveAlpha([\"ethane\",\"butane\"],userlocations = Dict(:acentricfactor => [0.1,0.2]))\nmodel = vdW([\"ethane\",\"butane\"],alpha = my_alpha)\n\n# User-provided parameters, passing files or folders\n\nmodel = vdW([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"cubic/my_k_values.csv\"])\n\n# User-provided parameters, passing parameters directly\n\nmodel = vdW([\"neon\",\"hydrogen\"];\n        userlocations = (;Tc = [44.492,33.19],\n                        Pc = [2679000, 1296400],\n                        Mw = [20.17, 2.],\n                        acentricfactor = [-0.03,-0.21]\n                        k = [0. 0.18; 0.18 0.], #k,l can be ommited in single-component models.\n                        l = [0. 0.01; 0.01 0.])\n                    )\n\nReferences\n\nvan der Waals JD. Over de Continuiteit van den Gasen Vloeistoftoestand. PhD thesis, University of Leiden; 1873\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.Clausius","page":"Cubic Models","title":"Clapeyron.Clausius","text":"Clausius(components;\nidealmodel = BasicIdeal,\nalpha = NoAlpha,\nmixing = vdW1fRule,\nactivity = nothing,\ntranslation = ClausiusTranslation,\nuserlocations = String[],\nideal_userlocations = String[],\nalpha_userlocations = String[],\nmixing_userlocations = String[],\nactivity_userlocations = String[],\ntranslation_userlocations = String[],\nreference_state = nothing,\nverbose = false)\n\nInput parameters\n\nTc: Single Parameter (Float64) - Critical Temperature [K]\nPc: Single Parameter (Float64) - Critical Pressure [Pa]\nVc: Single Parameter (Float64) - Molar Volume [m^3/mol]\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nk: Pair Parameter (Float64) (optional)\nl: Pair Parameter (Float64) (optional)\n\nModel Parameters\n\nTc: Single Parameter (Float64) - Critical Temperature [K]\nPc: Single Parameter (Float64) - Critical Pressure [Pa]\nVc: Single Parameter (Float64) - Molar Volume [m^3/mol]\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\na: Pair Parameter (Float64)\nb: Pair Parameter (Float64)\n\nDescription\n\nClausius Equation of state.\n\nP = RT/(v-b) + a•α(T)/((v - Δ₀b)^2)\n\naᵢᵢ =27/64 * (RTcᵢ)²/Pcᵢ\nbᵢᵢ = Vcᵢ - 1/4 * RTcᵢ/Pcᵢ\ncᵢ = 3/8 * RTcᵢ/Pcᵢ - Vcᵢ\n\nΔ₀ = ∑cᵢxᵢ/∑bᵢxᵢ\n\n\nReferences\n\nClausius, R. (1880). Ueber das Verhalten der Kohlensäure in Bezug auf Druck, Volumen und Temperatur. Annalen der Physik, 245(3), 337–357. doi:10.1002/andp.18802450302\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.RK","page":"Cubic Models","title":"Clapeyron.RK","text":"RK(components; \nidealmodel = BasicIdeal,\nalpha = PRAlpha,\nmixing = vdW1fRule,\nactivity = nothing,\ntranslation = NoTranslation,\nuserlocations = String[],\nideal_userlocations = String[],\nalpha_userlocations = String[],\nmixing_userlocations = String[],\nactivity_userlocations = String[],\ntranslation_userlocations = String[],\nverbose = false,\nreference_state = nothing)\n\nInput parameters\n\nTc: Single Parameter (Float64) - Critical Temperature [K]\nPc: Single Parameter (Float64) - Critical Pressure [Pa]\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nk: Pair Parameter (Float64) (optional)\nl: Pair Parameter (Float64) (optional)\n\nModel Parameters\n\nTc: Single Parameter (Float64) - Critical Temperature [K]\nPc: Single Parameter (Float64) - Critical Pressure [Pa]\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\na: Pair Parameter (Float64)\nb: Pair Parameter (Float64)\n\nInput models\n\nidealmodel: Ideal Model\nalpha: Alpha model\nmixing: Mixing model\nactivity: Activity Model, used in the creation of the mixing model.\ntranslation: Translation Model\n\nDescription\n\nRedlich-Kwong Equation of state.\n\nP = RT/(V-Nb) + a•α(T)/(V(V+Nb))\n\nModel Construction Examples\n\n# Using the default database\nmodel = RK(\"water\") #single input\nmodel = RK([\"water\",\"ethanol\"]) #multiple components\nmodel = RK([\"water\",\"ethanol\"], idealmodel = ReidIdeal) #modifying ideal model\nmodel = RK([\"water\",\"ethanol\"],alpha = Soave2019) #modifying alpha function\nmodel = RK([\"water\",\"ethanol\"],translation = RackettTranslation) #modifying translation\nmodel = RK([\"water\",\"ethanol\"],mixing = KayRule) #using another mixing rule\nmodel = RK([\"water\",\"ethanol\"],mixing = WSRule, activity = NRTL) #using advanced EoS+gᴱ mixing rule\n\n# Passing a prebuilt model\n\nmy_alpha = SoaveAlpha([\"ethane\",\"butane\"],userlocations = Dict(:acentricfactor => [0.1,0.2]))\nmodel = RK([\"ethane\",\"butane\"],alpha = my_alpha) #this is efectively now an SRK model\n\n# User-provided parameters, passing files or folders\n\n# Passing files or folders\nmodel = RK([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"cubic/my_k_values.csv\"])\n\n# User-provided parameters, passing parameters directly\n\nmodel = RK([\"neon\",\"hydrogen\"];\n        userlocations = (;Tc = [44.492,33.19],\n                        Pc = [2679000, 1296400],\n                        Mw = [20.17, 2.],\n                        acentricfactor = [-0.03,-0.21]\n                        k = [0. 0.18; 0.18 0.], #k,l can be ommited in single-component models.\n                        l = [0. 0.01; 0.01 0.])\n                    )\n\nReferences\n\nRedlich, O., & Kwong, J. N. S. (1949). On the thermodynamics of solutions; an equation of state; fugacities of gaseous solutions. Chemical Reviews, 44(1), 233–244. doi:10.1021/cr60137a013\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.PR","page":"Cubic Models","title":"Clapeyron.PR","text":"PR(components;\nidealmodel = BasicIdeal,\nalpha = PRAlpha,\nmixing = vdW1fRule,\nactivity = nothing,\ntranslation = NoTranslation,\nuserlocations = String[],\nideal_userlocations = String[],\nalpha_userlocations = String[],\nmixing_userlocations = String[],\nactivity_userlocations = String[],\ntranslation_userlocations = String[],\nverbose = false,\nreference_state = nothing)\n\nInput parameters\n\nTc: Single Parameter (Float64) - Critical Temperature [K]\nPc: Single Parameter (Float64) - Critical Pressure [Pa]\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nk: Pair Parameter (Float64) (optional)\nl: Pair Parameter (Float64) (optional)\n\nModel Parameters\n\nTc: Single Parameter (Float64) - Critical Temperature [K]\nPc: Single Parameter (Float64) - Critical Pressure [Pa]\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\na: Pair Parameter (Float64)\nb: Pair Parameter (Float64)\n\nInput models\n\nidealmodel: Ideal Model\nalpha: Alpha model\nmixing: Mixing model\nactivity: Activity Model, used in the creation of the mixing model.\ntranslation: Translation Model\n\nDescription\n\nPeng-Robinson Equation of state.\n\nP = RT/(V-Nb) + a•α(T)/(V-Nb₁)(V-Nb₂)\nb₁ = (1 + √2)b\nb₂ = (1 - √2)b\n\nModel Construction Examples\n\n# Using the default database\nmodel = PR(\"water\") #single input\nmodel = PR([\"water\",\"ethanol\"]) #multiple components\nmodel = PR([\"water\",\"ethanol\"], idealmodel = ReidIdeal) #modifying ideal model\nmodel = PR([\"water\",\"ethanol\"],alpha = Soave2019) #modifying alpha function\nmodel = PR([\"water\",\"ethanol\"],translation = RackettTranslation) #modifying translation\nmodel = PR([\"water\",\"ethanol\"],mixing = KayRule) #using another mixing rule\nmodel = PR([\"water\",\"ethanol\"],mixing = WSRule, activity = NRTL) #using advanced EoS+gᴱ mixing rule\n\n# Passing a prebuilt model\n\nmy_alpha = PR78Alpha([\"ethane\",\"butane\"],userlocations = Dict(:acentricfactor => [0.1,0.2]))\nmodel = PR([\"ethane\",\"butane\"],alpha = my_alpha)\n\n# User-provided parameters, passing files or folders\nmodel = PR([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"cubic/my_k_values.csv\"])\n\n# User-provided parameters, passing parameters directly\n\nmodel = PR([\"neon\",\"hydrogen\"];\n        userlocations = (;Tc = [44.492,33.19],\n                        Pc = [2679000, 1296400],\n                        Mw = [20.17, 2.],\n                        acentricfactor = [-0.03,-0.21]\n                        k = [0. 0.18; 0.18 0.], #k,l can be ommited in single-component models.\n                        l = [0. 0.01; 0.01 0.])\n                    )\n\nReferences\n\nPeng, D.Y., & Robinson, D.B. (1976). A New Two-Constant Equation of State. Industrial & Engineering Chemistry Fundamentals, 15, 59-64. doi:10.1021/I160057A011\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.RKPR","page":"Cubic Models","title":"Clapeyron.RKPR","text":"RKPR(components;\nidealmodel = BasicIdeal,\nalpha = RKPRAlpha,\nmixing = vdW1fRule,\nactivity = nothing,\ntranslation = NoTranslation,\nuserlocations = String[],\nideal_userlocations = String[],\nalpha_userlocations = String[],\nmixing_userlocations = String[],\nactivity_userlocations = String[],\ntranslation_userlocations = String[],\nreference_state = nothing,\nverbose = false)\n\nInput parameters\n\nTc: Single Parameter (Float64) - Critical Temperature [K]\nPc: Single Parameter (Float64) - Critical Pressure [Pa]\nVc: Single Parameter (Float64) - Critical Volume [m3/mol]\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nk: Pair Parameter (Float64) (optional)\nl: Pair Parameter (Float64) (optional)\n\nModel Parameters\n\nTc: Single Parameter (Float64) - Critical Temperature [K]\nPc: Single Parameter (Float64) - Critical Pressure [Pa]\nVc: Single Parameter (Float64) - Critical Volume [m3/mol]\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\na: Pair Parameter (Float64)\nb: Pair Parameter (Float64)\nc: Pair Parameter (Float64)\n\nInput models\n\nidealmodel: Ideal Model\nalpha: Alpha model\nmixing: Mixing model\nactivity: Activity Model, used in the creation of the mixing model.\ntranslation: Translation Model\n\nDescription\n\nRedlich-Kwong-Peng-Robinson Equation of state.\n\nP = RT/(v-b) + a•α(T)/((v + Δ₁b)*(v + Δ₂b))\nΔ₁ = δ\nΔ₂ = (1 - δ)/(1 + δ)\nδ = ∑cᵢxᵢ\n\naᵢᵢ = Ωaᵢ(R²Tcᵢ²/Pcᵢ)\nbᵢᵢ = Ωbᵢ(R²Tcᵢ/Pcᵢ)\nΩaᵢ = (3*yᵢ^2 + 3yᵢdᵢ + dᵢ^2 + dᵢ - 1)/(3yᵢ + dᵢ - 1)^2\nΩbᵢ = 1/(3yᵢ + dᵢ - 1)\ndᵢ = (1 + cᵢ^2)/(1 + cᵢ)\nyᵢ = 1 + (2(1 + cᵢ))^(1/3) + (4/(1 + cᵢ))^(1/3)\n\ncᵢ is fitted to match:\n\nif Zcᵢ[exp] > 0.29\n    cᵢ = √2 - 1\nelse\n    Zcᵢ = 1.168Zcᵢ[exp]\n    f(cᵢ) == 0\n    f(cᵢ) = Zcᵢ - yᵢ/(3yᵢ + dᵢ - 1)\n\nModel Construction Examples\n\n# Using the default database\nmodel = RKPR(\"water\") #single input\nmodel = RKPR([\"water\",\"ethanol\"]) #multiple components\nmodel = RKPR([\"water\",\"ethanol\"], idealmodel = ReidIdeal) #modifying ideal model\nmodel = RKPR([\"water\",\"ethanol\"],alpha = TwuAlpha) #modifying alpha function\nmodel = RKPR([\"water\",\"ethanol\"],translation = RackettTranslation) #modifying translation\nmodel = RKPR([\"water\",\"ethanol\"],mixing = KayRule) #using another mixing rule\nmodel = RKPR([\"water\",\"ethanol\"],mixing = WSRule, activity = NRTL) #using advanced EoS+gᴱ mixing rule\n\n# Passing a prebuilt model\n\nmy_alpha = PR78Alpha([\"ethane\",\"butane\"],userlocations = Dict(:acentricfactor => [0.1,0.2]))\nmodel = RKPR([\"ethane\",\"butane\"],alpha = my_alpha)\n\n# User-provided parameters, passing files or folders\nmodel = RKPR([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"cubic/my_k_values.csv\"])\n\n# User-provided parameters, passing parameters directly\n\nmodel = RKPR([\"neon\",\"hydrogen\"];\n        userlocations = (;Tc = [44.492,33.19],\n                        Pc = [2679000, 1296400],\n                        Vc = [4.25e-5, 6.43e-5],\n                        Mw = [20.17, 2.],\n                        acentricfactor = [-0.03,-0.21]\n                        k = [0. 0.18; 0.18 0.], #k,l can be ommited in single-component models.\n                        l = [0. 0.01; 0.01 0.])\n                    )\n\nReferences\n\nCismondi, M., & Mollerup, J. (2005). Development and application of a three-parameter RK–PR equation of state. Fluid Phase Equilibria, 232(1–2), 74–89. doi:10.1016/j.fluid.2005.03.020\nTassin, N. G., Mascietti, V. A., & Cismondi, M. (2019). Phase behavior of multicomponent alkane mixtures and evaluation of predictive capacity for the PR and RKPR EoS’s. Fluid Phase Equilibria, 480, 53–65. doi:10.1016/j.fluid.2018.10.005\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.PatelTeja","page":"Cubic Models","title":"Clapeyron.PatelTeja","text":"PatelTeja(components;\nidealmodel = BasicIdeal,\nalpha = NoAlpha,\nmixing = vdW1fRule,\nactivity = nothing,\ntranslation = PatelTejaTranslation,\nuserlocations = String[],\nideal_userlocations = String[],\nalpha_userlocations = String[],\nmixing_userlocations = String[],\nactivity_userlocations = String[],\ntranslation_userlocations = String[],\nreference_state = nothing,\nverbose = false)\n\nInput parameters\n\nTc: Single Parameter (Float64) - Critical Temperature [K]\nPc: Single Parameter (Float64) - Critical Pressure [Pa]\nVc: Single Parameter (Float64) - Critical Volume [m3/mol]\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nk: Pair Parameter (Float64) (optional)\nl: Pair Parameter (Float64) (optional)\n\nModel Parameters\n\nTc: Single Parameter (Float64) - Critical Temperature [K]\nPc: Single Parameter (Float64) - Critical Pressure [Pa]\nVc: Single Parameter (Float64) - Critical Volume [m3/mol]\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\na: Pair Parameter (Float64)\nb: Pair Parameter (Float64)\nc: Pair Parameter (Float64)\n\nDescription\n\nPatel-Teja Equation of state.\n\nP = RT/(v-b) + a•α(T)/((v - Δ₁b)*(v - Δ₂b))\naᵢᵢ = Ωaᵢ(R²Tcᵢ²/Pcᵢ)\nbᵢᵢ = Ωbᵢ(R²Tcᵢ/Pcᵢ)\ncᵢ = Ωcᵢ(R²Tcᵢ/Pcᵢ)\nZcᵢ = Pcᵢ*Vcᵢ/(R*Tcᵢ)\nΩaᵢ = 3Zcᵢ² + 3(1 - 2Zcᵢ)Ωbᵢ + Ωbᵢ² + 1 - 3Zcᵢ\n0 = -Zcᵢ³ + (3Zcᵢ²)*Ωbᵢ + (2 - 3Zcᵢ)*Ωbᵢ² + Ωbᵢ³\nΩcᵢ = 1 - 3Zcᵢ\n\nγ = ∑cᵢxᵢ/∑bᵢxᵢ\nδ = 1 + 6γ + γ²\nϵ = 1 + γ\n\nΔ₁ = -(ϵ + √δ)/2\nΔ₂ = -(ϵ - √δ)/2\n\nModel Construction Examples\n\n# Using the default database\nmodel = PatelTeja(\"water\") #single input\nmodel = PatelTeja([\"water\",\"ethanol\"]) #multiple components\nmodel = PatelTeja([\"water\",\"ethanol\"], idealmodel = ReidIdeal) #modifying ideal model\nmodel = PatelTeja([\"water\",\"ethanol\"],alpha = TwuAlpha) #modifying alpha function\nmodel = PatelTeja([\"water\",\"ethanol\"],translation = RackettTranslation) #modifying translation\nmodel = PatelTeja([\"water\",\"ethanol\"],mixing = KayRule) #using another mixing rule\nmodel = PatelTeja([\"water\",\"ethanol\"],mixing = WSRule, activity = NRTL) #using advanced EoS+gᴱ mixing rule\n\n# Passing a prebuilt model\n\nmy_alpha = PR78Alpha([\"ethane\",\"butane\"],userlocations = Dict(:acentricfactor => [0.1,0.2]))\nmodel = PatelTeja([\"ethane\",\"butane\"],alpha = my_alpha)\n\n# User-provided parameters, passing files or folders\nmodel = PatelTeja([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"cubic/my_k_values.csv\"])\n\n# User-provided parameters, passing parameters directly\n\nmodel = PatelTeja([\"neon\",\"hydrogen\"];\n        userlocations = (;Tc = [44.492,33.19],\n                        Pc = [2679000, 1296400],\n                        Vc = [4.25e-5, 6.43e-5],\n                        Mw = [20.17, 2.],\n                        acentricfactor = [-0.03,-0.21]\n                        k = [0. 0.18; 0.18 0.], #k,l can be ommited in single-component models.\n                        l = [0. 0.01; 0.01 0.])\n                    )\n\nReferences\n\nPatel, N. C., & Teja, A. S. (1982). A new cubic equation of state for fluids and fluid mixtures. Chemical Engineering Science, 37(3), 463–473. doi:10.1016/0009-2509(82)80099-7\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.KU","page":"Cubic Models","title":"Clapeyron.KU","text":"KU(components;\nidealmodel = BasicIdeal,\nalpha = KUAlpha,\nmixing = vdW1fRule,\nactivity = nothing,\ntranslation = NoTranslation,\nuserlocations = String[],\nideal_userlocations = String[],\nalpha_userlocations = String[],\nmixing_userlocations = String[],\nactivity_userlocations = String[],\ntranslation_userlocations = String[],\nreference_state = nothing,\nverbose = false)\n\nInput parameters\n\nTc: Single Parameter (Float64) - Critical Temperature [K]\nPc: Single Parameter (Float64) - Critical Pressure [Pa]\nVc: Single Parameter (Float64) - Critical Volume [m^3]\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nk: Pair Parameter (Float64) (optional)\nl: Pair Parameter (Float64) (optional)\n\nModel Parameters\n\nTc: Single Parameter (Float64) - Critical Temperature [K]\nPc: Single Parameter (Float64) - Critical Pressure [Pa]\nVc: Single Parameter (Float64) - Critical Volume [m^3]\nomega_a: Single Parameter (Float64) - Critical Constant for a - No units\nomega_b: Single Parameter (Float64) - Critical Constant for b - No units\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\na: Pair Parameter (Float64)\nb: Pair Parameter (Float64)\n\nInput models\n\nidealmodel: Ideal Model\nalpha: Alpha model\nmixing: Mixing model\nactivity: Activity Model, used in the creation of the mixing model.\ntranslation: Translation Model\n\nDescription\n\nKumar-Upadhyay Cubic Equation of state. Ωa and Ωb are component-dependent\n\nP = RT/(v-b) + a•κ(T)/((v²-1.6bv - 0.8b²)\na = Ωa(R²Tcᵢ²/Pcᵢ)\nb = Ωb(R²Tcᵢ²/Pcᵢ)\nΩa = Zc[(1 + 1.6α - 0.8α²)²/((1 - α²)(2 + 1.6α))]\nχ = ∛[√(1458Zc³ - 1701Zc² + 540Zc -20)/32√3Zc² - (729Zc³ - 216Zc + 8)/1728Zc³]\nα = [χ + (81Zc² - 72Zc + 4)/144Zc²χ + (3Zc - 2)/12Zc]\nΩa = Zc[(1 + 1.6α - 0.8α²)²/((1 - α²)(2 + 1.6α))]\nΩb = αZc\n\nModel Construction Examples\n\n# Using the default database\nmodel = KU(\"water\") #single input\nmodel = KU([\"water\",\"ethanol\"]) #multiple components\nmodel = KU([\"water\",\"ethanol\"], idealmodel = ReidIdeal) #modifying ideal model\nmodel = KU([\"water\",\"ethanol\"],alpha = TwuAlpha) #modifying alpha function\nmodel = KU([\"water\",\"ethanol\"],translation = RackettTranslation) #modifying translation\nmodel = KU([\"water\",\"ethanol\"],mixing = KayRule) #using another mixing rule\nmodel = KU([\"water\",\"ethanol\"],mixing = WSRule, activity = NRTL) #using advanced EoS+gᴱ mixing rule\n\n# Passing a prebuilt model\n\nmy_alpha = PR78Alpha([\"ethane\",\"butane\"],userlocations = Dict(:acentricfactor => [0.1,0.2]))\nmodel = KU([\"ethane\",\"butane\"],alpha = my_alpha)\n\n# User-provided parameters, passing files or folders\nmodel = KU([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"cubic/my_k_values.csv\"])\n\n# User-provided parameters, passing parameters directly\n\nmodel = KU([\"neon\",\"hydrogen\"];\n        userlocations = (;Tc = [44.492,33.19],\n                        Pc = [2679000, 1296400],\n                        Vc = [4.25e-5, 6.43e-5],\n                        Mw = [20.17, 2.],\n                        acentricfactor = [-0.03,-0.21]\n                        k = [0. 0.18; 0.18 0.], #k,l can be ommited in single-component models.\n                        l = [0. 0.01; 0.01 0.])\n                    )\n\nReferences\n\nKumar, A., & Upadhyay, R. (2021). A new two-parameters cubic equation of state with benefits of three-parameters. Chemical Engineering Science, 229(116045), 116045. doi:10.1016/j.ces.2020.116045\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Variant-Models","page":"Cubic Models","title":"Variant Models","text":"","category":"section"},{"location":"eos/cubic/#Clapeyron.Berthelot","page":"Cubic Models","title":"Clapeyron.Berthelot","text":"Berthelot(components;\nidealmodel = BasicIdeal,\nalpha = ClausiusAlpha,\nmixing = vdW1fRule,\nactivity = nothing,\ntranslation = NoTranslation,\nuserlocations = String[],\nideal_userlocations = String[],\nalpha_userlocations = String[],\nmixing_userlocations = String[],\nactivity_userlocations = String[],\ntranslation_userlocations = String[],\nreference_state = nothing,\nverbose = false)\n\nInput parameters\n\nTc: Single Parameter (Float64) - Critical Temperature [K]\nPc: Single Parameter (Float64) - Critical Pressure [Pa]\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nVc: Single Parameter (Float64) - Molar Volume [m^3/mol]\nk: Pair Parameter (Float64) (optional)\n\nModel Parameters\n\na: Pair Parameter (Float64)\nb: Pair Parameter (Float64)\nTc: Single Parameter (Float64) - Critical Temperature [K]\nPc: Single Parameter (Float64) - Critical Pressure [Pa]\nVc: Single Parameter (Float64) - Molar Volume [m^3/mol]\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\n\nInput models\n\nidealmodel: Ideal Model\nalpha: Alpha model\nmixing: Mixing model\nactivity: Activity Model, used in the creation of the mixing model.\ntranslation: Translation Model\n\nDescription\n\nBerthelot Equation of state. it uses the Volume-Pressure Based mixing rules, that is:\n\na = 8*Pc*Vc^2\nb = Vc/3\nR = (8/3)*Pc*Vc/Tc\nP = RT/(V-Nb) + a•α(T)/V²\nα(T) = Tc/T\n\nReferences\n\nBerthelot, D. (1899). Sur une méthode purement physique pour la détermination des poids moléculaires des gaz et des poids atomiques de leurs éléments. Journal de Physique Théorique et Appliquée, 8(1), 263–274. doi:10.1051/jphystap:018990080026300\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.SRK","page":"Cubic Models","title":"Clapeyron.SRK","text":"SRK(components::Vector{String};\nidealmodel = BasicIdeal,\nalpha = SoaveAlpha,\nmixing = vdW1fRule,\nactivity = nothing,\ntranslation = NoTranslation,\nuserlocations = String[], \nideal_userlocations = String[],\nalpha_userlocations = String[],\nmixing_userlocations = String[],\nactivity_userlocations = String[],\ntranslation_userlocations = String[],\nreference_state = nothing,\nverbose = false)\n\nDescription\n\nSoave-Redlich-Kwong equation of state. it uses the following models:\n\nTranslation Model: NoTranslation\nAlpha Model: SoaveAlpha\nMixing Rule Model: vdW1fRule\n\nModel Construction Examples\n\n# Using the default database\nmodel = SRK(\"water\") #single input\nmodel = SRK([\"water\",\"ethanol\"]) #multiple components\nmodel = SRK([\"water\",\"ethanol\"], idealmodel = ReidIdeal) #modifying ideal model\nmodel = SRK([\"water\",\"ethanol\"],alpha = Soave2019) #modifying alpha function, using 2019 correlation\nmodel = SRK([\"water\",\"ethanol\"],translation = RackettTranslation) #modifying translation\nmodel = SRK([\"water\",\"ethanol\"],mixing = KayRule) #using another mixing rule\nmodel = SRK([\"water\",\"ethanol\"],mixing = WSRule, activity = NRTL) #using advanced EoS+gᴱ mixing rule\n\n# Passing a prebuilt model\n\nmy_alpha = SoaveAlpha([\"ethane\",\"butane\"],userlocations = Dict(:acentricfactor => [0.1,0.2]))\nmodel = SRK([\"ethane\",\"butane\"],alpha = my_alpha)\n\n# User-provided parameters, passing files or folders\n\nmodel = SRK([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"cubic/my_k_values.csv\"])\n\n# User-provided parameters, passing parameters directly\n\nmodel = SRK([\"neon\",\"hydrogen\"];\n        userlocations = (;Tc = [44.492,33.19],\n                        Pc = [2679000, 1296400],\n                        Mw = [20.17, 2.],\n                        acentricfactor = [-0.03,-0.21]\n                        k = [0. 0.18; 0.18 0.], #k,l can be ommited in single-component models.\n                        l = [0. 0.01; 0.01 0.])\n                    )\n\nReferences\n\nSoave, G. (1972). Equilibrium constants from a modified Redlich-Kwong equation of state. Chemical Engineering Science, 27(6), 1197–1203. doi:10.1016/0009-2509(72)80096-4\n\n\n\n\n\n","category":"function"},{"location":"eos/cubic/#Clapeyron.PSRK","page":"Cubic Models","title":"Clapeyron.PSRK","text":"function PSRK(components;\nidealmodel = BasicIdeal,\nalpha = SoaveAlpha,\nmixing = PSRKRule,\nactivity = PSRKUNIFAC,\ntranslation = PenelouxTranslation,\nuserlocations = String[],\nideal_userlocations = String[],\nalpha_userlocations = String[],\nmixing_userlocations = String[],\nactivity_userlocations = String[],\ntranslation_userlocations = String[],\nreference_state = nothing,\nverbose = false)\n\nDescription\n\nPredictive Soave-Redlich-Kwong equation of state. it uses the following models:\n\nTranslation Model: NoTranslation\nAlpha Model: SoaveAlpha\nMixing Rule Model: PSRKRule with PSRKUNIFAC activity model\n\nReferences\n\nHorstmann, S., Jabłoniec, A., Krafczyk, J., Fischer, K., & Gmehling, J. (2005). PSRK group contribution equation of state: comprehensive revision and extension IV, including critical constants and α-function parameters for 1000 components. Fluid Phase Equilibria, 227(2), 157–164. doi:10.1016/j.fluid.2004.11.002\n\n\n\n\n\n","category":"function"},{"location":"eos/cubic/#Clapeyron.tcRK","page":"Cubic Models","title":"Clapeyron.tcRK","text":"tcRK(components::Vector{String};\nidealmodel = BasicIdeal,\nuserlocations = String[],\nideal_userlocations = String[],\nalpha_userlocations = String[],\nmixing_userlocations = String[],\nactivity_userlocations = String[],\ntranslation_userlocations = String[],\nreference_state = nothing,\nverbose = false,\nestimate_alpha = true,\nestimate_translation = true)\n\ntranslated and consistent Redlich-Kwong equation of state. it uses the following models:\n\nTranslation Model: ConstantTranslation\nAlpha Model: TwuAlpha\nMixing Rule Model: vdW1fRule\n\nIf Twu parameters are not provided, they can be estimated from the acentric factor (acentricfactor). If translation is not provided, it can be estimated, using Rackett compresibility Factor (ZRA) or the acentric factor (acentricfactor).\n\nThe use of estimates for the alpha function and volume translation can be turned off by passing estimate_alpha = false or estimate_translation = false.\n\nReferences\n\nLe Guennec, Y., Privat, R., & Jaubert, J.-N. (2016). Development of the translated-consistent tc-PR and tc-RK cubic equations of state for a safe and accurate prediction of volumetric, energetic and saturation properties of pure compounds in the sub- and super-critical domains. Fluid Phase Equilibria, 429, 301–312. doi:10.1016/j.fluid.2016.09.003\nPina-Martinez, A., Le Guennec, Y., Privat, R., Jaubert, J.-N., & Mathias, P. M. (2018). Analysis of the combinations of property data that are suitable for a safe estimation of consistent twu α-function parameters: Updated parameter values for the translated-consistent tc-PR and tc-RK cubic equations of state. Journal of Chemical and Engineering Data, 63(10), 3980–3988. doi:10.1021/acs.jced.8b00640\nPiña-Martinez, A., Privat, R., & Jaubert, J.-N. (2022). Use of 300,000 pseudo‐experimental data over 1800 pure fluids to assess the performance of four cubic equations of state: SRK , PR , tc ‐RK , and tc ‐PR. AIChE Journal. American Institute of Chemical Engineers, 68(2). doi:10.1002/aic.17518\n\n\n\n\n\n","category":"function"},{"location":"eos/cubic/#Clapeyron.PR78","page":"Cubic Models","title":"Clapeyron.PR78","text":"PR78(components::Vector{String};\nidealmodel = BasicIdeal,\nalpha = PR78Alpha,\nmixing = vdW1fRule,\nactivity = nothing,\ntranslation = NoTranslation,\nuserlocations = String[], \nideal_userlocations = String[],\nalpha_userlocations = String[],\nmixing_userlocations = String[],\ntranslation_userlocations = String[],\nreference_state = nothing,\nverbose = false)\n\nPeng Robinson (1978) equation of state. it uses the following models:\n\nTranslation Model: NoTranslation\nAlpha Model: PR78Alpha\nMixing Rule Model: vdW1fRule\n\nModel Construction Examples\n\n# Using the default database\nmodel = PR78(\"water\") #single input\nmodel = PR78([\"water\",\"ethanol\"]) #multiple components\nmodel = PR78([\"water\",\"ethanol\"], idealmodel = ReidIdeal) #modifying ideal model\nmodel = PR78([\"water\",\"ethanol\"],alpha = Soave2019) #modifying alpha function\nmodel = PR78([\"water\",\"ethanol\"],translation = RackettTranslation) #modifying translation\nmodel = PR78([\"water\",\"ethanol\"],mixing = KayRule) #using another mixing rule\nmodel = PR78([\"water\",\"ethanol\"],mixing = WSRule, activity = NRTL) #using advanced EoS+gᴱ mixing rule\n\n# Passing a prebuilt model\n\nmy_alpha = PRAlpha([\"ethane\",\"butane\"],userlocations = Dict(:acentricfactor => [0.1,0.2]))\nmodel = PR78([\"ethane\",\"butane\"],alpha = my_alpha) #this model becomes a normal PR EoS\n\n# User-provided parameters, passing files or folders\nmodel = PR78([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"cubic/my_k_values.csv\"])\n\n# User-provided parameters, passing parameters directly\n\nmodel = PR78([\"neon\",\"hydrogen\"];\n        userlocations = (;Tc = [44.492,33.19],\n                        Pc = [2679000, 1296400],\n                        Mw = [20.17, 2.],\n                        acentricfactor = [-0.03,-0.21]\n                        k = [0. 0.18; 0.18 0.], #k,l can be ommited in single-component models.\n                        l = [0. 0.01; 0.01 0.])\n                    )\n\nReferences\n\nRobinson DB, Peng DY. The characterization of the heptanes and heavier fractions for the GPA Peng-Robinson programs. Tulsa: Gas Processors Association; 1978\n\n\n\n\n\n","category":"function"},{"location":"eos/cubic/#Clapeyron.PTV","page":"Cubic Models","title":"Clapeyron.PTV","text":"PTV(components;\nidealmodel = BasicIdeal,\nalpha = NoAlpha,\nmixing = vdW1fRule,\nactivity = nothing,\ntranslation = PTVTranslation,\nuserlocations = String[],\nideal_userlocations = String[],\nalpha_userlocations = String[],\nmixing_userlocations = String[],\nactivity_userlocations = String[],\ntranslation_userlocations = String[],\nverbose = false,\nreference_state = nothing)\n\nInput parameters\n\nTc: Single Parameter (Float64) - Critical Temperature [K]\nPc: Single Parameter (Float64) - Critical Pressure [Pa]\nVc: Single Parameter (Float64) - Critical Volume [m3/mol]\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\nk: Pair Parameter (Float64) (optional)\nl: Pair Parameter (Float64) (optional)\n\nModel Parameters\n\nTc: Single Parameter (Float64) - Critical Temperature [K]\nPc: Single Parameter (Float64) - Critical Pressure [Pa]\nVc: Single Parameter (Float64) - Critical Volume [m3/mol]\nMw: Single Parameter (Float64) - Molecular Weight [g/mol]\na: Pair Parameter (Float64)\nb: Pair Parameter (Float64)\nc: Pair Parameter (Float64)\n\nDescription\n\nPatel-Teja-Valderrama Equation of state.\n\nP = RT/(v-b) + a•α(T)/((v - Δ₁b)*(v - Δ₂b))\naᵢᵢ = Ωaᵢ(R²Tcᵢ²/Pcᵢ)\nbᵢᵢ = Ωbᵢ(R²Tcᵢ/Pcᵢ)\ncᵢ = Ωcᵢ(R²Tcᵢ/Pcᵢ)\nZcᵢ = Pcᵢ*Vcᵢ/(R*Tcᵢ)\nΩaᵢ = 0.66121 - 0.76105Zcᵢ\nΩbᵢ = 0.02207 + 0.20868Zcᵢ\nΩcᵢ = 0.57765 - 1.87080Zcᵢ\n\nγ = ∑cᵢxᵢ/∑bᵢxᵢ\nδ = 1 + 6γ + γ²\nϵ = 1 + γ\n\nΔ₁ = -(ϵ + √δ)/2\nΔ₂ = -(ϵ - √δ)/2\n\nModel Construction Examples\n\n# Using the default database\nmodel = PTV(\"water\") #single input\nmodel = PTV([\"water\",\"ethanol\"]) #multiple components\nmodel = PTV([\"water\",\"ethanol\"], idealmodel = ReidIdeal) #modifying ideal model\nmodel = PTV([\"water\",\"ethanol\"],alpha = TwuAlpha) #modifying alpha function\nmodel = PTV([\"water\",\"ethanol\"],translation = RackettTranslation) #modifying translation\nmodel = PTV([\"water\",\"ethanol\"],mixing = KayRule) #using another mixing rule\nmodel = PTV([\"water\",\"ethanol\"],mixing = WSRule, activity = NRTL) #using advanced EoS+gᴱ mixing rule\n\n# Passing a prebuilt model\n\nmy_alpha = PR78Alpha([\"ethane\",\"butane\"],userlocations = Dict(:acentricfactor => [0.1,0.2]))\nmodel = PTV([\"ethane\",\"butane\"],alpha = my_alpha)\n\n# User-provided parameters, passing files or folders\nmodel = PTV([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"cubic/my_k_values.csv\"])\n\n# User-provided parameters, passing parameters directly\n\nmodel = PTV([\"neon\",\"hydrogen\"];\n        userlocations = (;Tc = [44.492,33.19],\n                        Pc = [2679000, 1296400],\n                        Vc = [4.25e-5, 6.43e-5],\n                        Mw = [20.17, 2.],\n                        acentricfactor = [-0.03,-0.21]\n                        k = [0. 0.18; 0.18 0.], #k,l can be ommited in single-component models.\n                        l = [0. 0.01; 0.01 0.])\n                    )\n\nReferences\n\nValderrama, J. O. (1990). A generalized Patel-Teja equation of state for polar and nonpolar fluids and their mixtures. Journal of Chemical Engineering of Japan, 23(1), 87–91. doi:10.1252/jcej.23.87\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.EPPR78","page":"Cubic Models","title":"Clapeyron.EPPR78","text":"EPPR78(components_or_groups;\nidealmodel = BasicIdeal,\nalpha = PR78Alpha,\nmixing = PPR78Rule,\nactivity = nothing,\ntranslation = NoTranslation,\nuserlocations = String[],\nideal_userlocations = String[],\nalpha_userlocations = String[],\nmixing_userlocations = String[],\ntranslation_userlocations = String[],\nreference_state = nothing,\nverbose = false)\n\nEnhanced Predictive Peng Robinson equation of state. it uses the following models:\n\nTranslation Model: NoTranslation\nAlpha Model: PR78Alpha\nMixing Rule Model: PPR78Rule\n\nReferences\n\nJaubert, J.-N., Privat, R., & Mutelet, F. (2010). Predicting the phase equilibria of synthetic petroleum fluids with the PPR78 approach. AIChE Journal. American Institute of Chemical Engineers, 56(12), 3225–3235. doi:10.1002/aic.12232\nJaubert, J.-N., Qian, J.-W., Lasala, S., & Privat, R. (2022). The impressive impact of including enthalpy and heat capacity of mixing data when parameterising equations of state. Application to the development of the E-PPR78 (Enhanced-Predictive-Peng-Robinson-78) model. Fluid Phase Equilibria, (113456), 113456. doi:10.1016/j.fluid.2022.113456\n\n\n\n\n\n","category":"function"},{"location":"eos/cubic/#Clapeyron.UMRPR","page":"Cubic Models","title":"Clapeyron.UMRPR","text":"UMRPR(components;\nidealmodel = BasicIdeal,\nuserlocations = String[],\ngroup_userlocations = String[],\nideal_userlocations = String[],\nalpha_userlocations = String[],\nmixing_userlocations = String[],\nactivity_userlocations = String[],\ntranslation_userlocations = String[],\nreference_state = nothing,\nverbose = false)\n\nUniversal Mixing Rule Peng Robinson equation of state. it uses the following models:\n\nTranslation Model: MTTranslation\nAlpha Model: MTAlpha\nMixing Rule Model: UMRRule with UNIFAC activity\n\nReferences\n\nVoutsas, E., Magoulas, K., & Tassios, D. (2004). Universal mixing rule for cubic equations of state applicable to symmetric and asymmetric systems: Results with the Peng−Robinson equation of state. Industrial & Engineering Chemistry Research, 43(19), 6238–6246. doi:10.1021/ie049580p\n\n\n\n\n\n","category":"function"},{"location":"eos/cubic/#Clapeyron.VTPR","page":"Cubic Models","title":"Clapeyron.VTPR","text":"VTPR(components;\nidealmodel = BasicIdeal,\nuserlocations = String[],\ngroup_userlocations = String[]\nideal_userlocations = String[],\nalpha_userlocations = String[],\nmixing_userlocations = String[],\nactivity_userlocations = String[],\ntranslation_userlocations = String[],\nreference_state = nothing,\nverbose = false)\n\nVolume-translated Peng Robinson equation of state. it uses the following models:\n\nTranslation Model: RackettTranslation\nAlpha Model: TwuAlpha\nMixing Rule Model: VTPRRule with VTPRUNIFAC activity\n\nReferences\n\nAhlers, J., & Gmehling, J. (2001). Development of an universal group contribution equation of state. Fluid Phase Equilibria, 191(1–2), 177–188. doi:10.1016/s0378-3812(01)00626-4\n\n\n\n\n\n","category":"function"},{"location":"eos/cubic/#Clapeyron.tcPR","page":"Cubic Models","title":"Clapeyron.tcPR","text":"tcPR(components;\nidealmodel = BasicIdeal,\nuserlocations = String[],\nideal_userlocations = String[],\nalpha_userlocations = String[],\nmixing_userlocations = String[],\nactivity_userlocations = String[],\ntranslation_userlocations = String[],\nreference_state = nothing,\nverbose = false,\nestimate_alpha = true,\nestimate_translation = true)\n\ntranslated and consistent Peng Robinson equation of state. it uses the following models:\n\nTranslation Model: ConstantTranslation\nAlpha Model: TwuAlpha\nMixing Rule Model: vdW1fRule\n\nIf Twu parameters are not provided, they can be estimated from the acentric factor (acentricfactor). If translation is not provided, it can be estimated, using Rackett compresibility Factor (ZRA) or the acentric factor (acentricfactor).\n\nReferences\n\nLe Guennec, Y., Privat, R., & Jaubert, J.-N. (2016). Development of the translated-consistent tc-PR and tc-RK cubic equations of state for a safe and accurate prediction of volumetric, energetic and saturation properties of pure compounds in the sub- and super-critical domains. Fluid Phase Equilibria, 429, 301–312. doi:10.1016/j.fluid.2016.09.003\nPina-Martinez, A., Le Guennec, Y., Privat, R., Jaubert, J.-N., & Mathias, P. M. (2018). Analysis of the combinations of property data that are suitable for a safe estimation of consistent twu α-function parameters: Updated parameter values for the translated-consistent tc-PR and tc-RK cubic equations of state. Journal of Chemical and Engineering Data, 63(10), 3980–3988. doi:10.1021/acs.jced.8b00640\nPiña-Martinez, A., Privat, R., & Jaubert, J.-N. (2022). Use of 300,000 pseudo‐experimental data over 1800 pure fluids to assess the performance of four cubic equations of state: SRK , PR , tc ‐RK , and tc ‐PR. AIChE Journal. American Institute of Chemical Engineers, 68(2). doi:10.1002/aic.17518\n\n\n\n\n\n","category":"function"},{"location":"eos/cubic/#Clapeyron.tcPRW","page":"Cubic Models","title":"Clapeyron.tcPRW","text":"tcPR(components;\nidealmodel = BasicIdeal,\nuserlocations = String[],\nideal_userlocations = String[],\nalpha_userlocations = String[],\nmixing_userlocations = String[],\nactivity_userlocations = String[],\ntranslation_userlocations = String[],\nreference_state = nothing,\nverbose = false)\n\ntranslated and consistent Peng Robinson equation of state,with an gE mixing rule. it uses the following models:\n\nTranslation Model: ConstantTranslation\nAlpha Model: TwuAlpha\nMixing Rule Model: gErRule\nActivity: tcPRWilsonRes\n\nIf Twu parameters are not provided, they can be estimated from the acentric factor (acentricfactor). If translation is not provided, it can be estimated, using Rackett compresibility Factor (ZRA) or the acentric factor (acentricfactor).\n\nReferences\n\nLe Guennec, Y., Privat, R., & Jaubert, J.-N. (2016). Development of the translated-consistent tc-PR and tc-RK cubic equations of state for a safe and accurate prediction of volumetric, energetic and saturation properties of pure compounds in the sub- and super-critical domains. Fluid Phase Equilibria, 429, 301–312. doi:10.1016/j.fluid.2016.09.003\nPina-Martinez, A., Le Guennec, Y., Privat, R., Jaubert, J.-N., & Mathias, P. M. (2018). Analysis of the combinations of property data that are suitable for a safe estimation of consistent twu α-function parameters: Updated parameter values for the translated-consistent tc-PR and tc-RK cubic equations of state. Journal of Chemical and Engineering Data, 63(10), 3980–3988. doi:10.1021/acs.jced.8b00640\nPiña-Martinez, A., Privat, R., & Jaubert, J.-N. (2022). Use of 300,000 pseudo‐experimental data over 1800 pure fluids to assess the performance of four cubic equations of state: SRK , PR , tc ‐RK , and tc ‐PR. AIChE Journal. American Institute of Chemical Engineers, 68(2). doi:10.1002/aic.17518\nPiña-Martinez, A., Privat, R., Nikolaidis, I. K., Economou, I. G., & Jaubert, J.-N. (2021). What is the optimal activity coefficient model to be combined with the translated–consistent Peng–Robinson equation of state through advanced mixing rules? Cross-comparison and grading of the Wilson, UNIQUAC, and NRTL aE models against a benchmark database involving 200 binary systems. Industrial & Engineering Chemistry Research, 60(47), 17228–17247. doi:10.1021/acs.iecr.1c03003\n\n\n\n\n\n","category":"function"},{"location":"eos/cubic/#Clapeyron.cPR","page":"Cubic Models","title":"Clapeyron.cPR","text":"cPR(components::Vector{String};\nidealmodel = BasicIdeal,\nuserlocations = String[],\nideal_userlocations = String[],\nalpha_userlocations = String[],\nmixing_userlocations = String[],\nactivity_userlocations = String[],\ntranslation_userlocations = String[],\nreference_state = nothing,\nverbose = false)\n\nconsistent Peng Robinson equation of state. it uses the following models:\n\nTranslation Model: NoTranslation\nAlpha Model: TwuAlpha\nMixing Rule Model: vdW1fRule\n\nReferences\n\nBell, I. H., Satyro, M., & Lemmon, E. W. (2018). Consistent twu parameters for more than 2500 pure fluids from critically evaluated experimental data. Journal of Chemical and Engineering Data, 63(7), 2402–2409. doi:10.1021/acs.jced.7b00967\n\n\n\n\n\n","category":"function"},{"location":"eos/cubic/#Clapeyron.QCPR","page":"Cubic Models","title":"Clapeyron.QCPR","text":"QCPR(components;\n    idealmodel = BasicIdeal,\n    userlocations = String[], \n    ideal_userlocations = String[],\n    alpha_userlocations = String[],\n    mixing_userlocations = String[],\n    activity_userlocations = String[],\n    translation_userlocations = String[],\n    reference_state = nothing,\n    verbose = false)\n\nQuantum-corrected Peng Robinson equation of state. it uses the following models:\n\nTranslation Model: ConstantTranslation\nAlpha Model: TwuAlpha\nMixing Rule Model: QCPRRule\n\nReferences\n\nAasen, A., Hammer, M., Lasala, S., Jaubert, J.-N., & Wilhelmsen, Ø. (2020). Accurate quantum-corrected cubic equations of state for helium, neon, hydrogen, deuterium and their mixtures. Fluid Phase Equilibria, 524(112790), 112790. doi:10.1016/j.fluid.2020.112790\n\n\n\n\n\n","category":"function"},{"location":"eos/cubic/#Alpha-(α(T))-Models","page":"Cubic Models","title":"Alpha (α(T)) Models","text":"","category":"section"},{"location":"eos/cubic/#Clapeyron.α_function","page":"Cubic Models","title":"Clapeyron.α_function","text":"α_function(model::CubicModel,V,T,z,αmodel::AlphaModel)\n\nInterface function used in cubic models. it should return a vector of αᵢ(T).\n\nExample:\n\nfunction α_function(model::CubicModel,V,T,z,alpha_model::RKAlphaModel)\n    return 1 ./ sqrt.(T ./ Tc)\nend\n\n\n\n\n\n","category":"function"},{"location":"eos/cubic/#Clapeyron.NoAlpha","page":"Cubic Models","title":"Clapeyron.NoAlpha","text":"NoAlpha(args...) <: NoAlphaModel\n\nInput Parameters\n\nNone\n\nDescription\n\nCubic alpha (α(T)) model. Default for vdW EoS\n\nαᵢ = 1 ∀ i\n\nModel Construction Examples\n\n# Because this model does not have parameters, all those constructors are equivalent:\nalpha = NoAlpha()\nalpha = NoAlpha(\"water\")\nalpha = NoAlpha([\"water\",\"carbon dioxide\"])\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.ClausiusAlpha","page":"Cubic Models","title":"Clapeyron.ClausiusAlpha","text":"ClausiusAlpha <: ClausiusAlphaModel\n\nClausiusAlpha(components;\nuserlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nnone\n\nDescription\n\nCubic alpha (α(T)) model. Default for Clausius  and [Berthelot]\n\nαᵢ = 1/Trᵢ\nTrᵢ = T/Tcᵢ\n\nModel Construction Examples\n\n# Because this model does not have parameters, all those constructors are equivalent:\nalpha = ClausiusAlpha()\nalpha = ClausiusAlpha(\"water\")\nalpha = ClausiusAlpha([\"water\",\"carbon dioxide\"])\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.RKAlpha","page":"Cubic Models","title":"Clapeyron.RKAlpha","text":"RKAlpha <: RKAlphaModel\n\nRKAlpha(components;\nuserlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nnone\n\nDescription\n\nCubic alpha (α(T)) model. Default for RK EoS.\n\nαᵢ = 1/√(Trᵢ)\nTrᵢ = T/Tcᵢ\n\nModel Construction Examples\n\n# Because this model does not have parameters, all those constructors are equivalent:\nalpha = RKAlpha()\nalpha = RKAlpha(\"water\")\nalpha = RKAlpha([\"water\",\"carbon dioxide\"])\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.SoaveAlpha","page":"Cubic Models","title":"Clapeyron.SoaveAlpha","text":"SoaveAlpha <: SoaveAlphaModel\n\nSoaveAlpha(components;\nuserlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nacentricfactor: Single Parameter (Float64)\n\nDescription\n\nCubic alpha (α(T)) model. Default for SRK EoS.\n\nαᵢ = (1+mᵢ(1-√(Trᵢ)))^2\nTrᵢ = T/Tcᵢ\nmᵢ = 0.480 + 1.547ωᵢ - 0.176ωᵢ^2\n\nTo use different polynomial coefficients for mᵢ, overload Clapeyron.α_m(::CubicModel,::SoaveAlphaModel) = (c₁,c₂,...cₙ)\n\nModel Construction Examples\n\n# Using the default database\nalpha = SoaveAlpha(\"water\") #single input\nalpha = SoaveAlpha([\"water\",\"ethanol\"]) #multiple components\n\n# Using user-provided parameters\n\n# Passing files or folders\nalpha = SoaveAlpha([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"critical/acentric.csv\"])\n\n# Passing parameters directly\nalpha = SoaveAlpha([\"neon\",\"hydrogen\"];userlocations = (;acentricfactor = [-0.03,-0.21]))\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.Soave2019Alpha","page":"Cubic Models","title":"Clapeyron.Soave2019Alpha","text":"Soave2019Alpha <: SoaveAlphaModel\n\nSoave2019Alpha(components::Vector{String};\nuserlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nacentricfactor: Single Parameter (Float64)\n\nDescription\n\nCubic alpha (α(T)) model. Updated m(ω) correlations for PR and SRK with better results for heavy molecules.\n\nαᵢ = (1+mᵢ(1-√(Trᵢ)))^2\nTrᵢ = T/Tcᵢ\nmᵢ = 0.37464 + 1.54226ωᵢ - 0.26992ωᵢ^2\n\nwhere, for Peng-robinson:\n\nmᵢ = 0.3919 + 1.4996ωᵢ - 0.2721ωᵢ^2 + 0.1063ωᵢ^3\n\nand, for Redlich-Kwong:\n\nmᵢ = 0.4810 + 1.5963ωᵢ - 0.2963ωᵢ^2 + 0.1223ωᵢ^3\n\nModel Construction Examples\n\n# Using the default database\nalpha = Soave2019Alpha(\"water\") #single input\nalpha = Soave2019Alpha([\"water\",\"ethanol\"]) #multiple components\n\n# Using user-provided parameters\n\n# Passing files or folders\nalpha = Soave2019Alpha([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"critical/acentric.csv\"])\n\n# Passing parameters directly\nalpha = Soave2019Alpha([\"neon\",\"hydrogen\"];userlocations = (;acentricfactor = [-0.03,-0.21]))\n\nReferences\n\nPina-Martinez, A., Privat, R., Jaubert, J.-N., & Peng, D.-Y. (2019). Updated versions of the generalized Soave α-function suitable for the Redlich-Kwong and Peng-Robinson equations of state. Fluid Phase Equilibria, 485, 264–269. doi:10.1016/j.fluid.2018.12.007\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.PRAlpha","page":"Cubic Models","title":"Clapeyron.PRAlpha","text":"PRAlpha <: SoaveAlphaModel\n\nPRAlpha(components;\nuserlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nacentricfactor: Single Parameter (Float64)\n\nDescription\n\nCubic alpha (α(T)) model. Default for PR EoS.\n\nαᵢ = (1+mᵢ(1-√(Trᵢ)))^2\nTrᵢ = T/Tcᵢ\nmᵢ = 0.37464 + 1.54226ωᵢ - 0.26992ωᵢ^2\n\nIt is equivalent to SoaveAlpha.\n\nModel Construction Examples\n\n# Using the default database\nalpha = PRAlpha(\"water\") #single input\nalpha = PRAlpha([\"water\",\"ethanol\"]) #multiple components\n\n# Using user-provided parameters\n\n# Passing files or folders\nalpha = PRAlpha([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"critical/acentric.csv\"])\n\n# Passing parameters directly\nalpha = PRAlpha([\"neon\",\"hydrogen\"];userlocations = (;acentricfactor = [-0.03,-0.21]))\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.PR78Alpha","page":"Cubic Models","title":"Clapeyron.PR78Alpha","text":"PR78Alpha <: PR78AlphaModel\n\nPR78Alpha(components;\nuserlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nacentricfactor: Single Parameter (Float64)\n\nDescription\n\nCubic alpha (α(T)) model. Default for PR78 and EPPR78 EoS.\n\nαᵢ = (1+mᵢ(1-√(Trᵢ)))^2\nTrᵢ = T/Tcᵢ\nif ωᵢ ≤ 0.491\n    mᵢ = 0.37464 + 1.54226ωᵢ - 0.26992ωᵢ^2\nelse\n    mᵢ = 0.379642 + 1.487503ωᵢ - 0.164423ωᵢ^2 - 0.016666ωᵢ^3\n\nModel Construction Examples\n\n# Using the default database\nalpha = PR78Alpha(\"water\") #single input\nalpha = PR78Alpha([\"water\",\"ethanol\"]) #multiple components\n\n# Using user-provided parameters\n\n# Passing files or folders\nalpha = PR78Alpha([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"critical/acentric.csv\"])\n\n# Passing parameters directly\nalpha = PR78Alpha([\"neon\",\"hydrogen\"];userlocations = (;acentricfactor = [-0.03,-0.21]))\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.CPAAlpha","page":"Cubic Models","title":"Clapeyron.CPAAlpha","text":"CPAAlpha <: CPAAlphaModel\n\nCPAAlpha(components;\nuserlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nc1: Single Parameter (Float64)\n\nDescription\n\nCubic alpha (α(T)) model. Default for CPA EoS.\n\nαᵢ = (1+c¹ᵢ(1-√(Trᵢ)))^2\n\nModel Construction Examples\n\n# Using the default database\nalpha = CPAAlpha(\"water\") #single input\nalpha = CPAAlpha([\"water\",\"carbon dioxide\"]) #multiple components\n\n# Using user-provided parameters\n\n# Passing files or folders\nalpha = CPAAlpha([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"cpa/alpha.csv\"])\n\n# Passing parameters directly\nalpha = CPAAlpha([\"water\",\"carbon dioxide\"];userlocations = (;c1 = [0.67,0.76]))\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.sCPAAlpha","page":"Cubic Models","title":"Clapeyron.sCPAAlpha","text":"sCPAAlpha <: sCPAAlphaModel\n\nsCPAAlpha(components;\nuserlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nc1: Single Parameter\n\nDescription\n\nCubic alpha (α(T)) model. Default for sCPA EoS.\n\nαᵢ = (1+c¹ᵢ(1-√(Trᵢ)))^2\n\nModel Construction Examples\n\n# Using the default database\nalpha = sCPAAlpha(\"water\") #single input\nalpha = sCPAAlpha([\"water\",\"carbon dioxide\"]) #multiple components\n\n# Using user-provided parameters\n\n# Passing files or folders\nalpha = sCPAAlpha([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"scpa/alpha.csv\"])\n\n# Passing parameters directly\nalpha = sCPAAlpha([\"water\",\"carbon dioxide\"];userlocations = (;c1 = [0.67,0.76]))\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.MTAlpha","page":"Cubic Models","title":"Clapeyron.MTAlpha","text":"MTAlpha <: MTAlphaModel\n\nMTAlpha(components;\nuserlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nacentricfactor: Single Parameter (Float64)\n\nDescription\n\nMagoulas & Tassios Cubic alpha (α(T)) model. Default for UMRPR EoS.\n\nαᵢ = (1+mᵢ(1-√(Trᵢ)))^2\nTrᵢ = T/Tcᵢ\nmᵢ = 0.384401 + 1.52276ωᵢ - 0.213808ωᵢ^2 + 0.034616ωᵢ^3 - 0.001976ωᵢ^4 \n\nModel Construction Examples\n\n# Using the default database\nalpha = MTAlpha(\"water\") #single input\nalpha = MTAlpha([\"water\",\"ethanol\"]) #multiple components\n\n# Using user-provided parameters\n\n# Passing files or folders\nalpha = MTAlpha([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"critical/acentric.csv\"])\n\n# Passing parameters directly\nalpha = MTAlpha([\"neon\",\"hydrogen\"];userlocations = (;acentricfactor = [-0.03,-0.21]))\n\nReferences\n\nMagoulas, K., & Tassios, D. (1990). Thermophysical properties of n-Alkanes from C1 to C20 and their prediction for higher ones. Fluid Phase Equilibria, 56, 119–140. doi:10.1016/0378-3812(90)85098-u\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.BMAlpha","page":"Cubic Models","title":"Clapeyron.BMAlpha","text":"BMAlpha <: BMAlphaModel\n\nBMAlpha(components;\nuserlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nacentricfactor: Single Parameter (Float64)\n\nDescription\n\nBoston Mathias Cubic alpha (α(T)) model.\n\nif Trᵢ > 1\n    αᵢ = (exp((1-2/(2+mᵢ))*(1-Trᵢ^(1+mᵢ/2))))^2\nelse\n    αᵢ = (1+mᵢ*(1-√(Trᵢ)))^2\n\nTrᵢ = T/Tcᵢ\n\nfor PR models:\n    mᵢ = 0.37464 + 1.54226ωᵢ - 0.26992ωᵢ^2\nfor RK models:\n    mᵢ = 0.480 + 1.547ωᵢ - 0.176ωᵢ^2\n\nModel Construction Examples\n\n# Using the default database\nalpha = BMAlpha(\"water\") #single input\nalpha = BMAlpha([\"water\",\"ethanol\"]) #multiple components\n\n# Using user-provided parameters\n\n# Passing files or folders\nalpha = BMAlpha([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"critical/acentric.csv\"])\n\n# Passing parameters directly\nalpha = BMAlpha([\"neon\",\"hydrogen\"];userlocations = (;acentricfactor = [-0.03,-0.21]))\n\nReferences\n\n.M. Boston, P.M. Mathias, Proceedings of the 2nd International Conference on Phase Equilibria and Fluid Properties in the Chemical Process Industries, West Berlin, March, 1980, pp. 823–849\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.TwuAlpha","page":"Cubic Models","title":"Clapeyron.TwuAlpha","text":"TwuAlpha <: TwuAlphaModel\nTwu91Alpha = TwuAlpha\nTwuAlpha(components;\nuserlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nM: Single Parameter\nN: Single Parameter\nL: Single Parameter\n\nDescription\n\nCubic alpha (α(T)) model. Default for VTPR EoS. Also known as Twu-91 alpha\n\nαᵢ = Trᵢ^(N*(M-1))*exp(L*(1-Trᵢ^(N*M))\nTrᵢ = T/Tcᵢ\n\nModel Construction Examples\n\n# Using the default database\nalpha = TwuAlpha(\"water\") #single input\nalpha = Twu91Alpha(\"water\") #same function\nalpha = TwuAlpha([\"water\",\"ethanol\"]) #multiple components\n\n# Using user-provided parameters\n\n# Passing files or folders\nalpha = TwuAlpha([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"twu.csv\"])\n\n# Passing parameters directly\nalpha = TwuAlpha([\"neon\",\"hydrogen\"];\n    userlocations = (;L = [0.40453, 156.21],\n                    M = [0.95861, -0.0062072],\n                    N = [0.8396, 5.047])\n                )\n\nReferences\n\nTwu, C. H., Lee, L. L., & Starling, K. E. (1980). Improved analytical representation of argon thermodynamic behavior. Fluid Phase Equilibria, 4(1–2), 35–44. doi:10.1016/0378-3812(80)80003-3\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.Twu88Alpha","page":"Cubic Models","title":"Clapeyron.Twu88Alpha","text":"Twu88Alpha::TwuAlpha\n\nTwu88Alpha(components::Vector{String};\nuserlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nM: Single Parameter\nN: Single Parameter (optional)\nL: Single Parameter\n\nModel Parameters\n\nM: Single Parameter\nN: Single Parameter\nL: Single Parameter\n\nDescription\n\nCubic alpha (α(T)) model. Also known as Twu-88 alpha.\n\nαᵢ = Trᵢ^(N*(M-1))*exp(L*(1-Trᵢ^(N*M))\nN = 2\nTrᵢ = T/Tcᵢ\n\nif N is specified, it will be used instead of the default value of 2.\n\nModel Construction Examples\n\n# Using the default database\nalpha = Twu88Alpha(\"water\") #single input\nalpha = Twu88Alpha([\"water\",\"ethanol\"]) #multiple components\n\n# Using user-provided parameters\n\n# Passing files or folders\nalpha = Twu88Alpha([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"twu88.csv\"])\n\n# Passing parameters directly\nalpha = Twu88Alpha([\"neon\",\"hydrogen\"];\n    userlocations = (;L = [0.40453, 156.21],\n                    M = [0.95861, -0.0062072],\n                    N = [0.8396, 5.047]) #if we don't pass N, then is assumed N = 2\n                )\n\nReferences\n\nTwu, C. H., Lee, L. L., & Starling, K. E. (1980). Improved analytical representation of argon thermodynamic behavior. Fluid Phase Equilibria, 4(1–2), 35–44. doi:10.1016/0378-3812(80)80003-3\n\n\n\n\n\n","category":"function"},{"location":"eos/cubic/#Clapeyron.PatelTejaAlpha","page":"Cubic Models","title":"Clapeyron.PatelTejaAlpha","text":"PatelTejaAlpha <: SoaveAlphaModel\n\nPatelTejaAlpha(components;\nuserlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nacentricfactor: Single Parameter (Float64)\n\nDescription\n\nCubic alpha (α(T)) model. Default for PatelTeja EoS.\n\nαᵢ = (1+mᵢ(1-√(Trᵢ)))^2\nTrᵢ = T/Tcᵢ\nmᵢ = 0.452413 + 1.30982ωᵢ - 0.295937ωᵢ^2\n\nModel Construction Examples\n\n# Using the default database\nalpha = PatelTejaAlpha(\"water\") #single input\nalpha = PatelTejaAlpha([\"water\",\"ethanol\"]) #multiple components\n\n# Using user-provided parameters\n\n# Passing files or folders\nalpha = PatelTejaAlpha([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"critical/acentric.csv\"])\n\n# Passing parameters directly\nalpha = PatelTejaAlpha([\"neon\",\"hydrogen\"];userlocations = (;acentricfactor = [-0.03,-0.21]))\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.KUAlpha","page":"Cubic Models","title":"Clapeyron.KUAlpha","text":"KUAlpha <: AlphaModel\n\nKUAlpha(components;\nuserlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nacentricfactor: Single Parameter (Float64)\n\nDescription\n\nCubic alpha (α(T)) model. Default for KU EoS.\n\nFor Tr < 1\n\nαᵢ = (1+mᵢ(1-√(Trᵢ))^nᵢ)^2\nTrᵢ = T/Tcᵢ\nmᵢ = 0.37790 + 1.51959ωᵢ - 0.46904ωᵢ^2 + 0.015679ωᵢ^3\nnᵢ = 0.97016 + 0.05495ωᵢ - 0.1293ωᵢ^2 + 0.0172028ωᵢ^3\n\nFor Tr > 1 is a 6th order taylor expansion around T = Tc.\n\nModel Construction Examples\n\n# Using the default database\nalpha = KUAlpha(\"water\") #single input\nalpha = KUAlpha([\"water\",\"ethanol\"]) #multiple components\n\n# Using user-provided parameters\n\n# Passing files or folders\nalpha = KUAlpha([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"critical/acentric.csv\"])\n\n# Passing parameters directly\nalpha = KUAlpha([\"neon\",\"hydrogen\"];userlocations = (;acentricfactor = [-0.03,-0.21]))\n\nReferences\n\nKumar, A., & Upadhyay, R. (2021). A new two-parameters cubic equation of state with benefits of three-parameters. Chemical Engineering Science, 229(116045), 116045. doi:10.1016/j.ces.2020.116045\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.RKPRAlpha","page":"Cubic Models","title":"Clapeyron.RKPRAlpha","text":"RKPRAlpha <: RKPRAlphaModel\n\nRKPRAlpha(components;\nuserlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nacentricfactor: Single Parameter (Float64)\n\nDescription\n\nCubic alpha (α(T)) model. Default for RKPR EoS.\n\nαᵢ = (3/(2 + Trᵢ))^kᵢ\nkᵢ = (12.504Zc -2.7238) + (7.4513*Zc + 1.9681)ωᵢ + (-2.4407*Zc + 0.0017)ωᵢ^2\nTrᵢ = T/Tcᵢ\n\nModel Construction Examples\n\n# Using the default database\nalpha = RKPRAlpha(\"water\") #single input\nalpha = RKPRAlpha([\"water\",\"ethanol\"]) #multiple components\n\n# Using user-provided parameters\n\n# Passing files or folders\nalpha = RKPRAlpha([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"critical/acentric.csv\"])\n\n# Passing parameters directly\nalpha = RKPRAlpha([\"neon\",\"hydrogen\"];userlocations = (;acentricfactor = [-0.03,-0.21]))\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Volume-Translation-Models","page":"Cubic Models","title":"Volume Translation Models","text":"","category":"section"},{"location":"eos/cubic/#Clapeyron.translation","page":"Cubic Models","title":"Clapeyron.translation","text":"translation(model::CubicModel,V,T,z,translation_model::TranslationModel)\n\nInterface function used in cubic models. it should return a vector of cᵢ. such as Ṽ = V + mixing(c,z)\n\nExample:\n\nfunction translation(model::CubicModel,V,T,z,translation_model::RackettTranslation)\n    Tc = model.params.Tc.values\n    Pc = model.params.Pc.values\n    Vc = translation_model.params.Vc.values\n    R = Clapeyron.R̄\n    Zc = Pc .* Vc ./ (R .* Tc)\n    c = 0.40768 .* (0.29441 .- Zc) .* R .* Tc ./ Pc\n    return c\nend\n\n\n\n\n\n","category":"function"},{"location":"eos/cubic/#Clapeyron.NoTranslation","page":"Cubic Models","title":"Clapeyron.NoTranslation","text":"NoTranslation(args...) <: TranslationModel\n\nInput Parameters\n\nNone\n\nDescription\n\nDefault volume translation model for cubic models. it performs no translation:\n\nV = V₀ + mixing_rule(cᵢ)\ncᵢ = 0 ∀ i\n\nModel Construction Examples\n\n# Because this model does not have parameters, all those constructors are equivalent:\ntranslation = NoTranslation()\ntranslation = NoTranslation(\"water\")\ntranslation = NoTranslation([\"water\",\"carbon dioxide\"])\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.ConstantTranslation","page":"Cubic Models","title":"Clapeyron.ConstantTranslation","text":"ConstantTranslation <: ConstantTranslationModel\nConstantTranslation(components;\nuserlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nv_shift: Single Parameter (Float64) - Volume shift [m³/mol]\n\nDescription\n\nConstant Translation model for cubics:\n\nV = V₀ + mixing_rule(cᵢ)\n\nwhere cᵢ is constant.  It does not have parameters by default, the volume shifts must be user-supplied.\n\nModel Construction Examples\n\n# Using user-provided parameters\n\n# Passing files or folders\ntranslation = ConstantTranslation([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"properties/critical.csv\"])\n\n# Passing parameters directly\ntranslation = ConstantTranslation([\"neon\",\"hydrogen\"];userlocations = (;Vc = [4.25e-5, 6.43e-5]))\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.RackettTranslation","page":"Cubic Models","title":"Clapeyron.RackettTranslation","text":"RackettTranslation <: RackettTranslationModel\n\nRackettTranslation(components;\nuserlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nVc: Single Parameter (Float64) - Critical Volume [m³/mol]\n\nModel Parameters\n\nVc: Single Parameter (Float64) - Critical Volume [m³/mol]\nv_shift: Single Parameter (Float64) - Volume shift [m³/mol]\n\nDescription\n\nRackett Translation model for cubics:\n\nV = V₀ + mixing_rule(cᵢ)\ncᵢ = 0.40768*RTcᵢ/Pcᵢ*(0.29441-Zcᵢ)\nZcᵢ = Pcᵢ*Vcᵢ/(RTcᵢ)\n\nModel Construction Examples\n\n# Using the default database\ntranslation = RackettTranslation(\"water\") #single input\ntranslation = RackettTranslation([\"water\",\"ethanol\"]) #multiple components\n\n# Using user-provided parameters\n\n# Passing files or folders\ntranslation = RackettTranslation([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"critical/Vc.csv\"])\n\n# Passing parameters directly\ntranslation = RackettTranslation([\"neon\",\"hydrogen\"];userlocations = (;Vc = [4.25e-5, 6.43e-5]))\n\nReferences\n\nRackett, H. G. (1970). Equation of state for saturated liquids. Journal of Chemical and Engineering Data, 15(4), 514–517. doi:10.1021/je60047a012\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.PenelouxTranslation","page":"Cubic Models","title":"Clapeyron.PenelouxTranslation","text":"PenelouxTranslation <: PenelouxTranslationModel\n\nPenelouxTranslation(components;\nuserlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nVc: Single Parameter (Float64) - Critical Volume [m³/mol]\n\nModel Parameters\n\nVc: Single Parameter (Float64) - Critical Volume [m³/mol]\nv_shift: Single Parameter (Float64) - Volume shift [m³/mol]\n\nDescription\n\nPeneloux Translation model for cubics:\n\nV = V₀ + mixing_rule(cᵢ)\ncᵢ = -0.252*RTcᵢ/Pcᵢ*(1.5448Zcᵢ - 0.4024)\nZcᵢ = Pcᵢ*Vcᵢ/(RTcᵢ)\n\nModel Construction Examples\n\n# Using the default database\ntranslation = PenelouxTranslation(\"water\") #single input\ntranslation = PenelouxTranslation([\"water\",\"ethanol\"]) #multiple components\n\n# Using user-provided parameters\n\n# Passing files or folders\ntranslation = PenelouxTranslation([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"critical/Vc.csv\"])\n\n# Passing parameters directly\ntranslation = PenelouxTranslation([\"neon\",\"hydrogen\"];userlocations = (;Vc = [4.25e-5, 6.43e-5]))\n\nReferences\n\nPéneloux A, Rauzy E, Fréze R. (1982) A consistent correction for Redlich‐Kwong‐Soave volumes. Fluid Phase Equilibria 1, 8(1), 7–23. doi:10.1016/0378-3812(82)80002-2\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.MTTranslation","page":"Cubic Models","title":"Clapeyron.MTTranslation","text":"MTTranslation <: MTTranslationModel\n\nMTTranslation(components;\nuserlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nacentricfactor: Single Parameter (Float64)\n\nDescription\n\nMagoulas Tassios Translation model for cubics:\n\nV = V₀ + mixing_rule(cᵢ)\ncᵢ = T₀ᵢ+(T̄cᵢ-T̄₀ᵢ)*exp(β*abs(1-Trᵢ))\nTrᵢ = T/T̄cᵢ\nT̄cᵢ = (RTcᵢ/Pcᵢ)*(0.3074-Zcᵢ)\nT̄₀ᵢ = (RTcᵢ/Pcᵢ)*(-0.014471 + 0.067498ωᵢ - 0.084852ωᵢ^2 + 0.067298ωᵢ^3 - 0.017366ωᵢ^4)\nZcᵢ = 0.289 - 0.0701ωᵢ - 0.0207ωᵢ^2\nβᵢ  = -10.2447 - 28.6312ωᵢ\n\nModel Construction Examples\n\n# Using the default database\ntranslation = MTTranslation(\"water\") #single input\ntranslation = MTTranslation([\"water\",\"ethanol\"]) #multiple components\n\n# Using user-provided parameters\n\n# Passing files or folders\ntranslation = MTTranslation([\"neon\",\"hydrogen\"]; userlocations = [\"path/to/my/db\",\"critical/acentric.csv\"])\n\n# Passing parameters directly\ntranslation = MTTranslation([\"neon\",\"hydrogen\"];userlocations = (;acentricfactor = [-0.03,-0.21]))\n\nReferences\n\nMagoulas, K., & Tassios, D. (1990). Thermophysical properties of n-Alkanes from C1 to C20 and their prediction for higher ones. Fluid Phase Equilibria, 56, 119–140. doi:10.1016/0378-3812(90)85098-u\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Mixing-Rule-Models","page":"Cubic Models","title":"Mixing Rule Models","text":"","category":"section"},{"location":"eos/cubic/#Clapeyron.vdW1fRule","page":"Cubic Models","title":"Clapeyron.vdW1fRule","text":"vdW1fRule <: vdW1fRuleModel\n\nvdW1fRule(components;\nuserlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nNone\n\nDescription\n\nvan der Wals One-Fluid mixing rule for cubic parameters:\n\naᵢⱼ = √(aᵢaⱼ)(1 - kᵢⱼ)\nbᵢⱼ = (1 - lᵢⱼ)(bᵢ + bⱼ)/2\nā = ∑aᵢⱼxᵢxⱼ√(αᵢ(T)αⱼ(T))\nb̄ = ∑bᵢⱼxᵢxⱼ\nc̄ = ∑cᵢxᵢ\n\nModel Construction Examples\n\n# Because this model does not have parameters, all those constructors are equivalent:\nmixing = vdW1fRule()\nmixing = vdW1fRule(\"water\")\nmixing = vdW1fRule([\"water\",\"carbon dioxide\"])\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.KayRule","page":"Cubic Models","title":"Clapeyron.KayRule","text":"KayRule <: KayRuleModel\n\nKayRule(components;\nuserlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nNone\n\nDescription\n\nKay mixing rule for cubic parameters:\n\naᵢⱼ = √(aᵢaⱼ)(1 - kᵢⱼ)\nbᵢⱼ = (1 - lᵢⱼ)(bᵢ + bⱼ)/2\nā = b̄*(∑[aᵢⱼxᵢxⱼ√(αᵢ(T)αⱼ(T))/bᵢⱼ])^2\nb̄ = (∑∛(bᵢⱼ)xᵢxⱼ)^3\nc̄ = ∑cᵢxᵢ\n\nModel Construction Examples\n\n# Because this model does not have parameters, all those constructors are equivalent:\nmixing = KayRule()\nmixing = KayRule(\"water\")\nmixing = KayRule([\"water\",\"carbon dioxide\"])\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.HVRule","page":"Cubic Models","title":"Clapeyron.HVRule","text":"HVRule{γ} <: HVRuleModel\n\nHVRule(components;\nactivity = Wilson,\nuserlocations = String[],\nactivity_userlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nNone\n\nInput models\n\nactivity: Activity Model\n\nDescription\n\nHuron-Vidal Mixing Rule\n\nb̄ = ∑bᵢⱼxᵢxⱼ\nc̄ = ∑cᵢxᵢ\nā = b̄(∑[xᵢaᵢᵢαᵢ/(bᵢᵢ)] - gᴱ/λ)\nfor Redlich-Kwong:\n    λ = log(2) (0.6931471805599453)\nfor Peng-Robinson:\n    λ = 1/(2√(2))log((2+√(2))/(2-√(2))) (0.6232252401402305)\n\nλ is a coefficient indicating the relation between gᴱ and gᴱ(cubic) at infinite pressure. see [1] for more information. it can be customized by defining HV_λ(::HVRuleModel,::CubicModel,z)\n\nReferences\n\nHuron, M.-J., & Vidal, J. (1979). New mixing rules in simple equations of state for representing vapour-liquid equilibria of strongly non-ideal mixtures. Fluid Phase Equilibria, 3(4), 255–271. doi:10.1016/0378-3812(79)80001-1\n\nModel Construction Examples\n\n# Using the default database\nmixing = HVRule([\"water\",\"carbon dioxide\"]) #default: Wilson Activity Coefficient.\nmixing = HVRule([\"water\",\"carbon dioxide\"],activity = NRTL) #passing another Activity Coefficient Model.\nmixing = HVRule([(\"ethane\",[\"CH3\" => 2]),(\"butane\",[\"CH2\" => 2,\"CH3\" => 2])],activity = UNIFAC) #passing a GC Activity Coefficient Model.\n\n# Passing a prebuilt model\n\nact_model = NRTL([\"water\",\"ethanol\"],userlocations = (a = [0.0 3.458; -0.801 0.0],b = [0.0 -586.1; 246.2 0.0], c = [0.0 0.3; 0.3 0.0]))\nmixing = HVRule([\"water\",\"ethanol\"],activity = act_model)\n\n# Using user-provided parameters\n\n# Passing files or folders\nmixing = HVRule([\"water\",\"ethanol\"]; activity = NRTL, activity_userlocations = [\"path/to/my/db\",\"nrtl_ge.csv\"])\n\n# Passing parameters directly\nmixing = HVRule([\"water\",\"ethanol\"];\n                activity = NRTL,\n                userlocations = (a = [0.0 3.458; -0.801 0.0],\n                    b = [0.0 -586.1; 246.2 0.0],\n                    c = [0.0 0.3; 0.3 0.0])\n                )\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.MHV1Rule","page":"Cubic Models","title":"Clapeyron.MHV1Rule","text":"MHV1Rule{γ} <: MHV1RuleModel\n\nMHV1Rule(components;\nactivity = Wilson,\nuserlocations = String[],\nactivity_userlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nNone\n\nInput models\n\nactivity: Activity Model\n\nDescription\n\nModified Huron-Vidal Mixing Rule, First Order\n\nbᵢⱼ = (1 - lᵢⱼ)(bᵢ + bⱼ)/2\nb̄ = ∑bᵢⱼxᵢxⱼ\nc̄ = ∑cᵢxᵢ\nā = b̄RT(∑[xᵢaᵢᵢαᵢ/(RTbᵢᵢ)] - [gᴱ/RT + ∑log(bᵢᵢ/b̄)]/q)\n\nif the model is Peng-Robinson:\n    q = 0.53\nif the model is Redlich-Kwong:\n    q = 0.593\n\nto use different values for q, overload Clapeyron.MHV1q(::CubicModel,::MHV1Model) = q\n\nModel Construction Examples\n\n# Using the default database\nmixing = MHV1Rule([\"water\",\"carbon dioxide\"]) #default: Wilson Activity Coefficient.\nmixing = MHV1Rule([\"water\",\"carbon dioxide\"],activity = NRTL) #passing another Activity Coefficient Model.\nmixing = MHV1Rule([(\"ethane\",[\"CH3\" => 2]),(\"butane\",[\"CH2\" => 2,\"CH3\" => 2])],activity = UNIFAC) #passing a GC Activity Coefficient Model.\n\n# Passing a prebuilt model\n\nact_model = NRTL([\"water\",\"ethanol\"],userlocations = (a = [0.0 3.458; -0.801 0.0],b = [0.0 -586.1; 246.2 0.0], c = [0.0 0.3; 0.3 0.0]))\nmixing = MHV1Rule([\"water\",\"ethanol\"],activity = act_model)\n\n# Using user-provided parameters\n\n# Passing files or folders\nmixing = MHV1Rule([\"water\",\"ethanol\"]; activity = NRTL, activity_userlocations = [\"path/to/my/db\",\"nrtl_ge.csv\"])\n\n# Passing parameters directly\nmixing = MHV1Rule([\"water\",\"ethanol\"];\n                activity = NRTL,\n                userlocations = (a = [0.0 3.458; -0.801 0.0],\n                    b = [0.0 -586.1; 246.2 0.0],\n                    c = [0.0 0.3; 0.3 0.0])\n                )\n\nReferences\n\nMichelsen, M. L. (1990). A modified Huron-Vidal mixing rule for cubic equations of state. Fluid Phase Equilibria, 60(1–2), 213–219. doi:10.1016/0378-3812(90)85053-d\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.MHV2Rule","page":"Cubic Models","title":"Clapeyron.MHV2Rule","text":"MHV2Rule{γ} <: MHV2RuleModel\n\nMHV2Rule(components;\nactivity = Wilson,\nuserlocations = String[],\nactivity_userlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nNone\n\nInput models\n\nactivity: Activity Model\n\nDescription\n\nModified Huron-Vidal Mixing Rule, Second Order.\n\nbᵢⱼ = (1 - lᵢⱼ)(bᵢ + bⱼ)/2\nb̄ = ∑bᵢⱼxᵢxⱼ\nc̄ = ∑cᵢxᵢ\nᾱᵢ  = aᵢαᵢ/bᵢRT\nċ = -q₁*Σᾱᵢxᵢ - q₂*Σᾱᵢxᵢ^2 - gᴱ/RT - ∑log(bᵢᵢ/b̄)\nā = (-q₁ - √(q₁^2 - 4q₂ċ))/(2q₂)\n\nif the model is Peng-Robinson:\n    q₁ = -0.4347, q₂ = -0.003654\nif the model is Redlich-Kwong:\n    q₁ = -0.4783, q₂ = -0.0047\n    (-0.4783,-0.0047)\n\nto use different values for q₁ and q₂, overload Clapeyron.MHV1q(::CubicModel,::MHV2Model) = (q₁,q₂)\n\nModel Construction Examples\n\n# Using the default database\nmixing = MHV2Rule([\"water\",\"carbon dioxide\"]) #default: Wilson Activity Coefficient.\nmixing = MHV2Rule([\"water\",\"carbon dioxide\"],activity = NRTL) #passing another Activity Coefficient Model.\nmixing = MHV2Rule([(\"ethane\",[\"CH3\" => 2]),(\"butane\",[\"CH2\" => 2,\"CH3\" => 2])],activity = UNIFAC) #passing a GC Activity Coefficient Model.\n\n# Passing a prebuilt model\n\nact_model = NRTL([\"water\",\"ethanol\"],userlocations = (a = [0.0 3.458; -0.801 0.0],b = [0.0 -586.1; 246.2 0.0], c = [0.0 0.3; 0.3 0.0]))\nmixing = MHV2Rule([\"water\",\"ethanol\"],activity = act_model)\n\n# Using user-provided parameters\n\n# Passing files or folders\nmixing = MHV2Rule([\"water\",\"ethanol\"]; activity = NRTL, activity_userlocations = [\"path/to/my/db\",\"nrtl_ge.csv\"])\n\n# Passing parameters directly\nmixing = MHV1Rule([\"water\",\"ethanol\"];\n                activity = NRTL,\n                userlocations = (a = [0.0 3.458; -0.801 0.0],\n                    b = [0.0 -586.1; 246.2 0.0],\n                    c = [0.0 0.3; 0.3 0.0])\n                )\n\nReferences\n\nMichelsen, M. L. (1990). A modified Huron-Vidal mixing rule for cubic equations of state. Fluid Phase Equilibria, 60(1–2), 213–219. doi:10.1016/0378-3812(90)85053-d\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.LCVMRule","page":"Cubic Models","title":"Clapeyron.LCVMRule","text":"LCVMRule{γ} <: LCVMRuleModel\n\nLCVMRule(components;\nactivity = Wilson,\nuserlocations = String[],\nactivity_userlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nNone\n\nInput models\n\nactivity: Activity Model\n\nDescription\n\nLinear Combination of Vidal and Michaelsen (LCVM) Mixing Rule\n\nbᵢⱼ = (1 - lᵢⱼ)(bᵢ + bⱼ)/2\nb̄ = ∑bᵢⱼxᵢxⱼ\nc̄ = ∑cᵢxᵢ\nᾱᵢ  = aᵢαᵢ/bᵢRT\nċ = -q₁*Σᾱᵢxᵢ - q₂*Σᾱᵢxᵢ^2 - gᴱ/RT - ∑log(bᵢᵢ/b̄)\nā = b̄RT(-1.827[gᴱ/RT - 0.3∑log(bᵢᵢ/b̄)] + Σᾱᵢxᵢ)\n\nModel Construction Examples\n\n# Using the default database\nmixing = LCVMRule([\"water\",\"carbon dioxide\"]) #default: Wilson Activity Coefficient.\nmixing = LCVMRule([\"water\",\"carbon dioxide\"],activity = NRTL) #passing another Activity Coefficient Model.\nmixing = LCVMRule([(\"ethane\",[\"CH3\" => 2]),(\"butane\",[\"CH2\" => 2,\"CH3\" => 2])],activity = UNIFAC) #passing a GC Activity Coefficient Model.\n\n# Passing a prebuilt model\n\nact_model = NRTL([\"water\",\"ethanol\"],userlocations = (a = [0.0 3.458; -0.801 0.0],b = [0.0 -586.1; 246.2 0.0], c = [0.0 0.3; 0.3 0.0]))\nmixing = LCVMRule([\"water\",\"ethanol\"],activity = act_model)\n\n# Using user-provided parameters\n\n# Passing files or folders\nmixing = LCVMRule([\"water\",\"ethanol\"]; activity = NRTL, activity_userlocations = [\"path/to/my/db\",\"nrtl_ge.csv\"])\n\n# Passing parameters directly\nmixing = LCVMRule([\"water\",\"ethanol\"];\n                activity = NRTL,\n                userlocations = (a = [0.0 3.458; -0.801 0.0],\n                    b = [0.0 -586.1; 246.2 0.0],\n                    c = [0.0 0.3; 0.3 0.0])\n                )\n\nReferences\n\nBoukouvalas, C., Spiliotis, N., Coutsikos, P., Tzouvaras, N., & Tassios, D. (1994). Prediction of vapor-liquid equilibrium with the LCVM model: a linear combination of the Vidal and Michelsen mixing rules coupled with the original UNIFAC. Fluid Phase Equilibria, 92, 75–106. doi:10.1016/0378-3812(94)80043-x\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.WSRule","page":"Cubic Models","title":"Clapeyron.WSRule","text":"WSRule{γ} <: WSRuleModel\n\nWSRule(components;\nactivity = Wilson,\nuserlocations = String[],\nactivity_userlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nNone\n\nInput models\n\nactivity: Activity Model\n\nDescription\n\nWong-Sandler Mixing Rule.\n\naᵢⱼ = √(aᵢaⱼ)(1 - kᵢⱼ)\nbᵢⱼ = (bᵢ + bⱼ)/2\nc̄ = ∑cᵢxᵢ\nB̄ = ΣxᵢxⱼB̄ᵢⱼ\nB̄ᵢⱼ = (1 - kᵢⱼ)((bᵢ - aᵢ/RT) + (bⱼ - aⱼ/RT))/2\nb̄  = B̄/(1 - gᴱ/λRT - Σxᵢaᵢαᵢ/bᵢRT)\nā = RT(b̄ - B̄)\nfor Redlich-Kwong:\n    λ = log(2) (0.6931471805599453)\nfor Peng-Robinson:\n    λ = 1/(2√(2))log((2+√(2))/(2-√(2))) (0.6232252401402305)\n\nλ is a coefficient indicating the relation between gᴱ and gᴱ(cubic) at infinite pressure. see [1] for more information. it can be customized by defining WS_λ(::WSRuleModel,::CubicModel)\n\nModel Construction Examples\n\n# Using the default database\nmixing = WSRule([\"water\",\"carbon dioxide\"]) #default: Wilson Activity Coefficient.\nmixing = WSRule([\"water\",\"carbon dioxide\"],activity = NRTL) #passing another Activity Coefficient Model.\nmixing = WSRule([(\"ethane\",[\"CH3\" => 2]),(\"butane\",[\"CH2\" => 2,\"CH3\" => 2])],activity = UNIFAC) #passing a GC Activity Coefficient Model.\n\n# Passing a prebuilt model\n\nact_model = NRTL([\"water\",\"ethanol\"],userlocations = (a = [0.0 3.458; -0.801 0.0],b = [0.0 -586.1; 246.2 0.0], c = [0.0 0.3; 0.3 0.0]))\nmixing = WSRule([\"water\",\"ethanol\"],activity = act_model)\n\n# Using user-provided parameters\n\n# Passing files or folders\nmixing = WSRule([\"water\",\"ethanol\"]; activity = NRTL, activity_userlocations = [\"path/to/my/db\",\"nrtl_ge.csv\"])\n\n# Passing parameters directly\nmixing = WSRule([\"water\",\"ethanol\"];\n                activity = NRTL,\n                userlocations = (a = [0.0 3.458; -0.801 0.0],\n                    b = [0.0 -586.1; 246.2 0.0],\n                    c = [0.0 0.3; 0.3 0.0])\n                )\n\nReferences\n\nWong, D. S. H., & Sandler, S. I. (1992). A theoretically correct mixing rule for cubic equations of state. AIChE journal. American Institute of Chemical Engineers, 38(5), 671–680. doi:10.1002/aic.690380505\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.modWSRule","page":"Cubic Models","title":"Clapeyron.modWSRule","text":"modWSRule{γ} <: WSRuleModel\n\nmodWSRule(components;\nactivity = Wilson,\nuserlocations = String[],\nactivity_userlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nNone\n\nInput models\n\nactivity: Activity Model\n\nDescription\n\nmodified Wong-Sandler Mixing Rule.\n\naᵢⱼ = √(aᵢaⱼ)(1 - kᵢⱼ)\nbᵢⱼ = (bᵢ + bⱼ)/2\nc̄ = ∑cᵢxᵢ\nB̄ = Σxᵢxⱼ(bᵢⱼ - aᵢⱼ√(αᵢαⱼ)/RT)\nb̄  = B̄/(1 - gᴱ/λRT - Σxᵢaᵢαᵢ/bᵢRT)\nā = RT(b̄ - B̄)\nfor Redlich-Kwong:\n    λ = log(2) (0.6931471805599453)\nfor Peng-Robinson:\n    λ = 1/(2√(2))log((2+√(2))/(2-√(2))) (0.6232252401402305)\n\nλ is a coefficient indicating the relation between gᴱ and gᴱ(cubic) at infinite pressure. see [1] for more information. it can be customized by defining WS_λ(::WSRuleModel,::CubicModel,z)\n\nModel Construction Examples\n\n# Using the default database\nmixing = modWSRule([\"water\",\"carbon dioxide\"]) #default: Wilson Activity Coefficient.\nmixing = modWSRule([\"water\",\"carbon dioxide\"],activity = NRTL) #passing another Activity Coefficient Model.\nmixing = modWSRule([(\"ethane\",[\"CH3\" => 2]),(\"butane\",[\"CH2\" => 2,\"CH3\" => 2])],activity = UNIFAC) #passing a GC Activity Coefficient Model.\n\n# Passing a prebuilt model\n\nact_model = NRTL([\"water\",\"ethanol\"],userlocations = (a = [0.0 3.458; -0.801 0.0],b = [0.0 -586.1; 246.2 0.0], c = [0.0 0.3; 0.3 0.0]))\nmixing = modWSRule([\"water\",\"ethanol\"],activity = act_model)\n\n# Using user-provided parameters\n\n# Passing files or folders\nmixing = modWSRule([\"water\",\"ethanol\"]; activity = NRTL, activity_userlocations = [\"path/to/my/db\",\"nrtl_ge.csv\"])\n\n# Passing parameters directly\nmixing = modWSRule([\"water\",\"ethanol\"];\n                activity = NRTL,\n                userlocations = (a = [0.0 3.458; -0.801 0.0],\n                    b = [0.0 -586.1; 246.2 0.0],\n                    c = [0.0 0.3; 0.3 0.0])\n                )\n\nReferences\n\nWong, D. S. H., & Sandler, S. I. (1992). A theoretically correct mixing rule for cubic equations of state. AIChE journal. American Institute of Chemical Engineers, 38(5), 671–680. doi:10.1002/aic.690380505\nOrbey, H., & Sandler, S. I. (1995). Reformulation of Wong-Sandler mixing rule for cubic equations of state. AIChE journal. American Institute of Chemical Engineers, 41(3), 683–690. doi:10.1002/aic.690410325\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.VTPRRule","page":"Cubic Models","title":"Clapeyron.VTPRRule","text":"VTPRRule{γ} <: VTPRRuleModel\n\nVTPRRule(components;\nactivity = UNIFAC,\nuserlocations = String[],\nactivity_userlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nNone\n\nInput models\n\nactivity: Activity Model\n\nDescription\n\nMixing Rule used by the Volume-translated Peng-Robinson VTPR equation of state. only works with activity models that define an excess residual gibbs energy function Clapeyron.excess_g_res(model,P,T,z) function (like UNIQUAC and UNIFAC models)\n\naᵢⱼ = √(aᵢaⱼ)(1-kᵢⱼ)\nbᵢⱼ = ((bᵢ^(3/4) + bⱼ^(3/4))/2)^(4/3)\nlog(γʳ)ᵢ = lnγ_res(model.activity,V,T,z)\ngᴱᵣₑₛ = ∑RTlog(γʳ)ᵢxᵢ\nb̄ = ∑bᵢⱼxᵢxⱼ\nc̄ = ∑cᵢxᵢ\nā = b̄RT(∑[xᵢaᵢᵢαᵢ/(RTbᵢᵢ)] - gᴱᵣₑₛ/(0.53087RT))\n\nModel Construction Examples\n\n# Note: this model was meant to be used exclusively with the VTPRUNIFAC activity model.\n\n# Using the default database\nmixing = VTPRRule([\"water\",\"carbon dioxide\"]) #default: VTPRUNIFAC Activity Coefficient.\nmixing = VTPRRule([\"water\",\"carbon dioxide\"],activity = NRTL) #passing another Activity Coefficient Model\nmixing = VTPRRule([(\"ethane\",[\"CH3\" => 2]),(\"butane\",[\"CH2\" => 2,\"CH3\" => 2])],activity = UNIFAC) #passing a GC Activity Coefficient Model.\n\n# Passing a prebuilt model\n\nact_model = NRTL([\"water\",\"ethanol\"],userlocations = (a = [0.0 3.458; -0.801 0.0],b = [0.0 -586.1; 246.2 0.0], c = [0.0 0.3; 0.3 0.0]))\nmixing = VTPRRule([\"water\",\"ethanol\"],activity = act_model)\n\n# Using user-provided parameters\n\n# Passing files or folders\nmixing = VTPRRule([\"water\",\"ethanol\"]; activity = NRTL, activity_userlocations = [\"path/to/my/db\",\"nrtl_ge.csv\"])\n\n# Passing parameters directly\nmixing = VTPRRule([\"water\",\"ethanol\"];\n                activity = NRTL,\n                userlocations = (a = [0.0 3.458; -0.801 0.0],\n                    b = [0.0 -586.1; 246.2 0.0],\n                    c = [0.0 0.3; 0.3 0.0])\n                )\n\nReferences\n\nAhlers, J., & Gmehling, J. (2001). Development of an universal group contribution equation of state. Fluid Phase Equilibria, 191(1–2), 177–188. doi:10.1016/s0378-3812(01)00626-4\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.PSRKRule","page":"Cubic Models","title":"Clapeyron.PSRKRule","text":"PSRKRule{γ} <: MHV1RuleModel\n\nPSRKRule(components;\nactivity = Wilson,\nuserlocations = String[],\nactivity_userlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nNone\n\nInput models\n\nactivity: Activity Model\n\nDescription\n\nMixing Rule used by the Predictive Soave-Redlich-Kwong PSRK EoS, derived from the First Order modified Huron-Vidal Mixing Rule.\n\nModel Construction Examples\n\n# Note: this model was meant to be used exclusively with the PSRKUNIFAC activity model.\n\n# Using the default database\nmixing = PSRKRule([\"water\",\"carbon dioxide\"]) #default: PSRKUNIFAC Activity Coefficient.\nmixing = PSRKRule([\"water\",\"carbon dioxide\"],activity = NRTL) #passing another Activity Coefficient Model\nmixing = PSRKRule([(\"ethane\",[\"CH3\" => 2]),(\"butane\",[\"CH2\" => 2,\"CH3\" => 2])],activity = UNIFAC) #passing a GC Activity Coefficient Model.\n\n# Passing a prebuilt model\n\nact_model = NRTL([\"water\",\"ethanol\"],userlocations = (a = [0.0 3.458; -0.801 0.0],b = [0.0 -586.1; 246.2 0.0], c = [0.0 0.3; 0.3 0.0]))\nmixing = PSRKRule([\"water\",\"ethanol\"],activity = act_model)\n\n# Using user-provided parameters\n\n# Passing files or folders\nmixing = PSRKRule([\"water\",\"ethanol\"]; activity = NRTL, activity_userlocations = [\"path/to/my/db\",\"nrtl_ge.csv\"])\n\n# Passing parameters directly\nmixing = PSRKRule([\"water\",\"ethanol\"];\n                activity = NRTL,\n                userlocations = (a = [0.0 3.458; -0.801 0.0],\n                    b = [0.0 -586.1; 246.2 0.0],\n                    c = [0.0 0.3; 0.3 0.0])\n                )\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.UMRRule","page":"Cubic Models","title":"Clapeyron.UMRRule","text":"UMRRule{γ} <: UMRRuleModel\n\nUMRRule(components;\nactivity = UNIFAC,\nuserlocations = String[],\nactivity_userlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nNone\n\nInput models\n\nactivity: Activity Model\n\nDescription\n\nMixing Rule used by the Universal Mixing Rule Peng-Robinson UMRPR equation of state.\n\naᵢⱼ = √(aᵢaⱼ)(1 - kᵢⱼ)\nbᵢⱼ = (1 - lᵢⱼ)((√bᵢ +√bⱼ)/2)^2\nb̄ = ∑bᵢⱼxᵢxⱼ\nc̄ = ∑cᵢxᵢ\nā = b̄RT(∑[xᵢaᵢᵢαᵢ/(RTbᵢᵢ)] - [gᴱ/RT]/0.53)\n\n## Model Construction Examples\n\nNote: this model was meant to be used exclusively with the UNIFAC activity model.\n\nUsing the default database\n\nmixing = VTPRRule([\"water\",\"carbon dioxide\"]) #default: UNIFAC Activity Coefficient. mixing = VTPRRule([\"water\",\"carbon dioxide\"],activity = NRTL) #passing another Activity Coefficient Model mixing = VTPRRule([(\"ethane\",[\"CH3\" => 2]),(\"butane\",[\"CH2\" => 2,\"CH3\" => 2])],activity = ogUNIFAC) #passing a GC Activity Coefficient Model.\n\nPassing a prebuilt model\n\nactmodel = NRTL([\"water\",\"ethanol\"],userlocations = (a = [0.0 3.458; -0.801 0.0],b = [0.0 -586.1; 246.2 0.0], c = [0.0 0.3; 0.3 0.0])) mixing = VTPRRule([\"water\",\"ethanol\"],activity = actmodel)\n\nUsing user-provided parameters\n\nPassing files or folders\n\nmixing = VTPRRule([\"water\",\"ethanol\"]; activity = NRTL, activityuserlocations = [\"path/to/my/db\",\"nrtlge.csv\"])\n\nPassing parameters directly\n\nmixing = VTPRRule([\"water\",\"ethanol\"];                 activity = NRTL,                 userlocations = (a = [0.0 3.458; -0.801 0.0],                     b = [0.0 -586.1; 246.2 0.0],                     c = [0.0 0.3; 0.3 0.0])                 )\n\n\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.QCPRRule","page":"Cubic Models","title":"Clapeyron.QCPRRule","text":"QCPRRule <: MHV2RuleModel\n\nQCPRRule(components;\nactivity = Wilson,\nuserlocations = String[],\nactivity_userlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nNone\n\nInput models\n\nactivity: Activity Model\n\nDescription\n\nQuantum-Corrected Mixing Rule, used by QCPR EoS:\n\naᵢⱼ = √(aᵢaⱼ)(1 - kᵢⱼ)\nbᵢⱼ = (1 - lᵢⱼ)(bqᵢ + bqⱼ)/2\nbqᵢ = bᵢβᵢ(T)\nβᵢ(T) = (1 + Aᵢ/(T + Bᵢ))^3 / (1 + Aᵢ/(Tcᵢ + Bᵢ))^3\nā = ∑aᵢⱼxᵢxⱼ√(αᵢ(T)αⱼ(T))\nb̄ = ∑bᵢⱼxᵢxⱼ\nc̄ = ∑cᵢxᵢ\n\nReferences\n\nAasen, A., Hammer, M., Lasala, S., Jaubert, J.-N., & Wilhelmsen, Ø. (2020). Accurate quantum-corrected cubic equations of state for helium, neon, hydrogen, deuterium and their mixtures. Fluid Phase Equilibria, 524(112790), 112790. doi:10.1016/j.fluid.2020.112790\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.PPR78Rule","page":"Cubic Models","title":"Clapeyron.PPR78Rule","text":"PPR78Rule <: PPR78RuleModel\n\nPPR78Rule(components;\nuserlocations = String[],\ngroup_userlocations = String[]\nverbose::Bool=false)\n\nInput Parameters\n\nA: Pair Parameter (Float64) - Fitted Parameter [K]\nB: Pair Parameter (Float64) - Fitted Parameter [K]\n\nDescription\n\nPPR78 Mixing Rule, Uses E-PPR78 Group params. Default for EPPR78 EoS.\n\naᵢⱼ = √(aᵢaⱼ)\nbᵢⱼ = (bᵢ +bⱼ)/2\nb̄ = ∑bᵢⱼxᵢxⱼ\nc̄ = ∑cᵢxᵢ\nā = b̄(∑[xᵢaᵢαᵢ/(bᵢᵢ)] - ∑xᵢxⱼbᵢbⱼEᵢⱼ/2b̄)\nEᵢⱼ = ∑(z̄ᵢₖ - z̄ⱼₖ)(z̄ᵢₗ - z̄ⱼₗ) × Aₖₗ × (298.15/T)^(Aₖₗ/Bₖₗ - 1)\n\nReferences\n\nJaubert, J.-N., Privat, R., & Mutelet, F. (2010). Predicting the phase equilibria of synthetic petroleum fluids with the PPR78 approach. AIChE Journal. American Institute of Chemical Engineers, 56(12), 3225–3235. doi:10.1002/aic.12232\nJaubert, J.-N., Qian, J.-W., Lasala, S., & Privat, R. (2022). The impressive impact of including enthalpy and heat capacity of mixing data when parameterising equations of state. Application to the development of the E-PPR78 (Enhanced-Predictive-Peng-Robinson-78) model. Fluid Phase Equilibria, (113456), 113456. doi:10.1016/j.fluid.2022.113456\n\n\n\n\n\n","category":"type"},{"location":"eos/cubic/#Clapeyron.gErRule","page":"Cubic Models","title":"Clapeyron.gErRule","text":"gErRule{γ} <: gErRuleModel\n\ngErRule(components;\nactivity = NRTL,\nuserlocations = String[],\nactivity_userlocations = String[],\nverbose::Bool=false)\n\nInput Parameters\n\nNone\n\nInput models\n\nactivity: Activity Model\n\nDescription\n\nMixing rule that uses the residual part of the activity coefficient model:\n\nbᵢⱼ = ( (bᵢ^(2/3) + bⱼ^(2/3)) / 2 )^(3/2)\nb̄ = ∑bᵢⱼxᵢxⱼ\nc̄ = ∑cᵢxᵢ\nā/b̄ = b̄RT*(∑xᵢaᵢ/bᵢ + gᴱᵣ/Λ\nΛ = 1/(r₂ - r₁) * log((1 - r₂)/(1 - r₁))\n\nModel Construction Examples\n\n# Using the default database\nmixing = gErRule([\"water\",\"carbon dioxide\"]) #default: NRTL Activity Coefficient.\nmixing = gErRule([\"water\",\"carbon dioxide\"],activity = Wilson) #passing another Activity Coefficient Model.\nmixing = gErRule([(\"ethane\",[\"CH3\" => 2]),(\"butane\",[\"CH2\" => 2,\"CH3\" => 2])],activity = UNIFAC) #passing a GC Activity Coefficient Model.\n\n# Passing a prebuilt model\n\nact_model = NRTL([\"water\",\"ethanol\"],userlocations = (a = [0.0 3.458; -0.801 0.0],b = [0.0 -586.1; 246.2 0.0], c = [0.0 0.3; 0.3 0.0]))\nmixing = gErRule([\"water\",\"ethanol\"],activity = act_model)\n\n# Using user-provided parameters\n\n# Passing files or folders\nmixing = gErRule([\"water\",\"ethanol\"]; activity = NRTL, activity_userlocations = [\"path/to/my/db\",\"nrtl_ge.csv\"])\n\n# Passing parameters directly\nmixing = gErRule([\"water\",\"ethanol\"];\n                activity = NRTL,\n                userlocations = (a = [0.0 3.458; -0.801 0.0],\n                    b = [0.0 -586.1; 246.2 0.0],\n                    c = [0.0 0.3; 0.3 0.0])\n                )\n\nReferences\n\nPiña-Martinez, A., Privat, R., Nikolaidis, I. K., Economou, I. G., & Jaubert, J.-N. (2021). What is the optimal activity coefficient model to be combined with the translated–consistent Peng–Robinson equation of state through advanced mixing rules? Cross-comparison and grading of the Wilson, UNIQUAC, and NRTL aE models against a benchmark database involving 200 binary systems. Industrial & Engineering Chemistry Research, 60(47), 17228–17247. doi:10.1021/acs.iecr.1c03003\n\n\n\n\n\n","category":"type"},{"location":"#Clapeyron.jl","page":"Home","title":"Clapeyron.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"An extensible Julia package for the modelling of fluids using thermodynamic equations of state. These include the standard cubics (van der Waals, Redlich–Kwong, Peng–Robinson, etc.), SAFT-type equations (PC‑SAFT, SAFT‑VR Mie, SAFT‑gamma Mie, etc.), empirical equations (GERG‑2008, IAPWS‑95), Activity coefficient models (NRTL, UNIFAC, COSMO‑SAC, etc.) and many more.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The documentation is laid out as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Installation\nModel construction\nIdeal gas models\nCubic equations of state\nSAFT equations of state\nEmpirical equations of state\nActivity coefficient models\nComposite Models\nGroup Contribution Models\nProperty Estimation\nBulk Properties\nPhase Equilibria\nFlash Calculations\nParameter Estimation\nExtensions\nCoolProp\nSymbolics\nMeasurements\nPackage Development\nDeveloping new methods\nDeveloping new models\nContributing to the package\nAPI","category":"page"},{"location":"#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pierre J. Walker, California Institute of Technology\nHon-Wa (Paul) Yew, Imperial College London\nAndrés Riedemann, University of Concepción","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Clapeyron.jl is licensed under the MIT license.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Clapeyron.jl is a registered package, it can be installed from the general registry by:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add Clapeyron","category":"page"},{"location":"#Citing-Clapeyron.jl","page":"Home","title":"Citing Clapeyron.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you are using Clapeyron for your research work, please cite the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@article{Clapeyron-2022,\n    title={Clapeyron.jl: An Extensible, Open-Source Fluid Thermodynamics Toolkit},\n    author={Pierre J. Walker, Hon-Wa Yew, and Andrés Riedemann},\n    journal={Ind. Eng. Chem. Res.},\n    volume={61},\n    number={20},\n    pages={7130--7153},\n    year={2022},\n    publisher={American Chemical Society},\n    doi={doi/10.1021/acs.iecr.2c00326},\n    url={https://pubs.acs.org/doi/10.1021/acs.iecr.2c00326}\n}","category":"page"},{"location":"#Citing-a-particular-equation-of-state-model","page":"Home","title":"Citing a particular equation of state model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In addition to citing this work, it is encouraged to cite the references to the underlying models used. For that, you can use Clapeyron.cite to obtain the references used in a particular model.","category":"page"}]
}
